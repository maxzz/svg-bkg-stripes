{"version":3,"file":"index.3e74a87c.js","sources":["../../node_modules/@vue/shared/dist/shared.esm-bundler.js","../../node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js","../../node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js","../../node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js","../../src/core/materialui-swatches.ts","../../src/core/stripes.ts","../../src/components/HomeView.vue","../../src/App.vue","../../src/main.js"],"sourcesContent":["/**\r\n * Make a map and return a function for checking if a key\r\n * is in that map.\r\n * IMPORTANT: all calls of this function must be prefixed with\r\n * \\/\\*#\\_\\_PURE\\_\\_\\*\\/\r\n * So that rollup can tree-shake them if necessary.\r\n */\r\nfunction makeMap(str, expectsLowerCase) {\r\n    const map = Object.create(null);\r\n    const list = str.split(',');\r\n    for (let i = 0; i < list.length; i++) {\r\n        map[list[i]] = true;\r\n    }\r\n    return expectsLowerCase ? val => !!map[val.toLowerCase()] : val => !!map[val];\r\n}\n\n// Patch flags are optimization hints generated by the compiler.\r\n// when a block with dynamicChildren is encountered during diff, the algorithm\r\n// enters \"optimized mode\". In this mode, we know that the vdom is produced by\r\n// a render function generated by the compiler, so the algorithm only needs to\r\n// handle updates explicitly marked by these patch flags.\r\n// dev only flag -> name mapping\r\nconst PatchFlagNames = {\r\n    [1 /* TEXT */]: `TEXT`,\r\n    [2 /* CLASS */]: `CLASS`,\r\n    [4 /* STYLE */]: `STYLE`,\r\n    [8 /* PROPS */]: `PROPS`,\r\n    [16 /* FULL_PROPS */]: `FULL_PROPS`,\r\n    [32 /* HYDRATE_EVENTS */]: `HYDRATE_EVENTS`,\r\n    [64 /* STABLE_FRAGMENT */]: `STABLE_FRAGMENT`,\r\n    [128 /* KEYED_FRAGMENT */]: `KEYED_FRAGMENT`,\r\n    [256 /* UNKEYED_FRAGMENT */]: `UNKEYED_FRAGMENT`,\r\n    [1024 /* DYNAMIC_SLOTS */]: `DYNAMIC_SLOTS`,\r\n    [512 /* NEED_PATCH */]: `NEED_PATCH`,\r\n    [-1 /* HOISTED */]: `HOISTED`,\r\n    [-2 /* BAIL */]: `BAIL`\r\n};\n\nconst GLOBALS_WHITE_LISTED = 'Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,' +\r\n    'decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,' +\r\n    'Object,Boolean,String,RegExp,Map,Set,JSON,Intl';\r\nconst isGloballyWhitelisted = /*#__PURE__*/ makeMap(GLOBALS_WHITE_LISTED);\n\nconst range = 2;\r\nfunction generateCodeFrame(source, start = 0, end = source.length) {\r\n    const lines = source.split(/\\r?\\n/);\r\n    let count = 0;\r\n    const res = [];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        count += lines[i].length + 1;\r\n        if (count >= start) {\r\n            for (let j = i - range; j <= i + range || end > count; j++) {\r\n                if (j < 0 || j >= lines.length)\r\n                    continue;\r\n                const line = j + 1;\r\n                res.push(`${line}${' '.repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);\r\n                const lineLength = lines[j].length;\r\n                if (j === i) {\r\n                    // push underline\r\n                    const pad = start - (count - lineLength) + 1;\r\n                    const length = Math.max(1, end > count ? lineLength - pad : end - start);\r\n                    res.push(`   |  ` + ' '.repeat(pad) + '^'.repeat(length));\r\n                }\r\n                else if (j > i) {\r\n                    if (end > count) {\r\n                        const length = Math.max(Math.min(end - count, lineLength), 1);\r\n                        res.push(`   |  ` + '^'.repeat(length));\r\n                    }\r\n                    count += lineLength + 1;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    return res.join('\\n');\r\n}\n\n/**\r\n * On the client we only need to offer special cases for boolean attributes that\r\n * have different names from their corresponding dom properties:\r\n * - itemscope -> N/A\r\n * - allowfullscreen -> allowFullscreen\r\n * - formnovalidate -> formNoValidate\r\n * - ismap -> isMap\r\n * - nomodule -> noModule\r\n * - novalidate -> noValidate\r\n * - readonly -> readOnly\r\n */\r\nconst specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;\r\nconst isSpecialBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs);\r\n/**\r\n * The full list is needed during SSR to produce the correct initial markup.\r\n */\r\nconst isBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs +\r\n    `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` +\r\n    `loop,open,required,reversed,scoped,seamless,` +\r\n    `checked,muted,multiple,selected`);\r\nconst unsafeAttrCharRE = /[>/=\"'\\u0009\\u000a\\u000c\\u0020]/;\r\nconst attrValidationCache = {};\r\nfunction isSSRSafeAttrName(name) {\r\n    if (attrValidationCache.hasOwnProperty(name)) {\r\n        return attrValidationCache[name];\r\n    }\r\n    const isUnsafe = unsafeAttrCharRE.test(name);\r\n    if (isUnsafe) {\r\n        console.error(`unsafe attribute name: ${name}`);\r\n    }\r\n    return (attrValidationCache[name] = !isUnsafe);\r\n}\r\nconst propsToAttrMap = {\r\n    acceptCharset: 'accept-charset',\r\n    className: 'class',\r\n    htmlFor: 'for',\r\n    httpEquiv: 'http-equiv'\r\n};\r\n/**\r\n * CSS properties that accept plain numbers\r\n */\r\nconst isNoUnitNumericStyleProp = /*#__PURE__*/ makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` +\r\n    `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` +\r\n    `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` +\r\n    `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` +\r\n    `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` +\r\n    `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` +\r\n    // SVG\r\n    `fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` +\r\n    `stroke-miterlimit,stroke-opacity,stroke-width`);\r\n/**\r\n * Known attributes, this is used for stringification of runtime static nodes\r\n * so that we don't stringify bindings that cannot be set from HTML.\r\n * Don't also forget to allow `data-*` and `aria-*`!\r\n * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\r\n */\r\nconst isKnownAttr = /*#__PURE__*/ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` +\r\n    `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` +\r\n    `border,buffered,capture,challenge,charset,checked,cite,class,code,` +\r\n    `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` +\r\n    `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` +\r\n    `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` +\r\n    `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` +\r\n    `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` +\r\n    `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` +\r\n    `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` +\r\n    `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` +\r\n    `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` +\r\n    `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` +\r\n    `start,step,style,summary,tabindex,target,title,translate,type,usemap,` +\r\n    `value,width,wrap`);\n\nfunction normalizeStyle(value) {\r\n    if (isArray(value)) {\r\n        const res = {};\r\n        for (let i = 0; i < value.length; i++) {\r\n            const item = value[i];\r\n            const normalized = normalizeStyle(isString(item) ? parseStringStyle(item) : item);\r\n            if (normalized) {\r\n                for (const key in normalized) {\r\n                    res[key] = normalized[key];\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    else if (isObject(value)) {\r\n        return value;\r\n    }\r\n}\r\nconst listDelimiterRE = /;(?![^(]*\\))/g;\r\nconst propertyDelimiterRE = /:(.+)/;\r\nfunction parseStringStyle(cssText) {\r\n    const ret = {};\r\n    cssText.split(listDelimiterRE).forEach(item => {\r\n        if (item) {\r\n            const tmp = item.split(propertyDelimiterRE);\r\n            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());\r\n        }\r\n    });\r\n    return ret;\r\n}\r\nfunction stringifyStyle(styles) {\r\n    let ret = '';\r\n    if (!styles) {\r\n        return ret;\r\n    }\r\n    for (const key in styles) {\r\n        const value = styles[key];\r\n        const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);\r\n        if (isString(value) ||\r\n            (typeof value === 'number' && isNoUnitNumericStyleProp(normalizedKey))) {\r\n            // only render valid values\r\n            ret += `${normalizedKey}:${value};`;\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nfunction normalizeClass(value) {\r\n    let res = '';\r\n    if (isString(value)) {\r\n        res = value;\r\n    }\r\n    else if (isArray(value)) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            res += normalizeClass(value[i]) + ' ';\r\n        }\r\n    }\r\n    else if (isObject(value)) {\r\n        for (const name in value) {\r\n            if (value[name]) {\r\n                res += name + ' ';\r\n            }\r\n        }\r\n    }\r\n    return res.trim();\r\n}\n\n// These tag configs are shared between compiler-dom and runtime-dom, so they\r\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Element\r\nconst HTML_TAGS = 'html,body,base,head,link,meta,style,title,address,article,aside,footer,' +\r\n    'header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,' +\r\n    'figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,' +\r\n    'data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,' +\r\n    'time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,' +\r\n    'canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,' +\r\n    'th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,' +\r\n    'option,output,progress,select,textarea,details,dialog,menu,' +\r\n    'summary,template,blockquote,iframe,tfoot';\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element\r\nconst SVG_TAGS = 'svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,' +\r\n    'defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,' +\r\n    'feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,' +\r\n    'feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,' +\r\n    'feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,' +\r\n    'fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,' +\r\n    'foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,' +\r\n    'mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,' +\r\n    'polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,' +\r\n    'text,textPath,title,tspan,unknown,use,view';\r\nconst VOID_TAGS = 'area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr';\r\nconst isHTMLTag = /*#__PURE__*/ makeMap(HTML_TAGS);\r\nconst isSVGTag = /*#__PURE__*/ makeMap(SVG_TAGS);\r\nconst isVoidTag = /*#__PURE__*/ makeMap(VOID_TAGS);\n\nconst escapeRE = /[\"'&<>]/;\r\nfunction escapeHtml(string) {\r\n    const str = '' + string;\r\n    const match = escapeRE.exec(str);\r\n    if (!match) {\r\n        return str;\r\n    }\r\n    let html = '';\r\n    let escaped;\r\n    let index;\r\n    let lastIndex = 0;\r\n    for (index = match.index; index < str.length; index++) {\r\n        switch (str.charCodeAt(index)) {\r\n            case 34: // \"\r\n                escaped = '&quot;';\r\n                break;\r\n            case 38: // &\r\n                escaped = '&amp;';\r\n                break;\r\n            case 39: // '\r\n                escaped = '&#39;';\r\n                break;\r\n            case 60: // <\r\n                escaped = '&lt;';\r\n                break;\r\n            case 62: // >\r\n                escaped = '&gt;';\r\n                break;\r\n            default:\r\n                continue;\r\n        }\r\n        if (lastIndex !== index) {\r\n            html += str.substring(lastIndex, index);\r\n        }\r\n        lastIndex = index + 1;\r\n        html += escaped;\r\n    }\r\n    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\r\n}\r\n// https://www.w3.org/TR/html52/syntax.html#comments\r\nconst commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;\r\nfunction escapeHtmlComment(src) {\r\n    return src.replace(commentStripRE, '');\r\n}\n\nfunction looseCompareArrays(a, b) {\r\n    if (a.length !== b.length)\r\n        return false;\r\n    let equal = true;\r\n    for (let i = 0; equal && i < a.length; i++) {\r\n        equal = looseEqual(a[i], b[i]);\r\n    }\r\n    return equal;\r\n}\r\nfunction looseEqual(a, b) {\r\n    if (a === b)\r\n        return true;\r\n    let aValidType = isDate(a);\r\n    let bValidType = isDate(b);\r\n    if (aValidType || bValidType) {\r\n        return aValidType && bValidType ? a.getTime() === b.getTime() : false;\r\n    }\r\n    aValidType = isArray(a);\r\n    bValidType = isArray(b);\r\n    if (aValidType || bValidType) {\r\n        return aValidType && bValidType ? looseCompareArrays(a, b) : false;\r\n    }\r\n    aValidType = isObject(a);\r\n    bValidType = isObject(b);\r\n    if (aValidType || bValidType) {\r\n        /* istanbul ignore if: this if will probably never be called */\r\n        if (!aValidType || !bValidType) {\r\n            return false;\r\n        }\r\n        const aKeysCount = Object.keys(a).length;\r\n        const bKeysCount = Object.keys(b).length;\r\n        if (aKeysCount !== bKeysCount) {\r\n            return false;\r\n        }\r\n        for (const key in a) {\r\n            const aHasKey = a.hasOwnProperty(key);\r\n            const bHasKey = b.hasOwnProperty(key);\r\n            if ((aHasKey && !bHasKey) ||\r\n                (!aHasKey && bHasKey) ||\r\n                !looseEqual(a[key], b[key])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return String(a) === String(b);\r\n}\r\nfunction looseIndexOf(arr, val) {\r\n    return arr.findIndex(item => looseEqual(item, val));\r\n}\n\n/**\r\n * For converting {{ interpolation }} values to displayed strings.\r\n * @private\r\n */\r\nconst toDisplayString = (val) => {\r\n    return val == null\r\n        ? ''\r\n        : isObject(val)\r\n            ? JSON.stringify(val, replacer, 2)\r\n            : String(val);\r\n};\r\nconst replacer = (_key, val) => {\r\n    if (isMap(val)) {\r\n        return {\r\n            [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val]) => {\r\n                entries[`${key} =>`] = val;\r\n                return entries;\r\n            }, {})\r\n        };\r\n    }\r\n    else if (isSet(val)) {\r\n        return {\r\n            [`Set(${val.size})`]: [...val.values()]\r\n        };\r\n    }\r\n    else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {\r\n        return String(val);\r\n    }\r\n    return val;\r\n};\n\n/**\r\n * List of @babel/parser plugins that are used for template expression\r\n * transforms and SFC script transforms. By default we enable proposals slated\r\n * for ES2020. This will need to be updated as the spec moves forward.\r\n * Full list at https://babeljs.io/docs/en/next/babel-parser#plugins\r\n */\r\nconst babelParserDefaultPlugins = [\r\n    'bigInt',\r\n    'optionalChaining',\r\n    'nullishCoalescingOperator'\r\n];\r\nconst EMPTY_OBJ = (process.env.NODE_ENV !== 'production')\r\n    ? Object.freeze({})\r\n    : {};\r\nconst EMPTY_ARR = (process.env.NODE_ENV !== 'production') ? Object.freeze([]) : [];\r\nconst NOOP = () => { };\r\n/**\r\n * Always return false.\r\n */\r\nconst NO = () => false;\r\nconst onRE = /^on[^a-z]/;\r\nconst isOn = (key) => onRE.test(key);\r\nconst isModelListener = (key) => key.startsWith('onUpdate:');\r\nconst extend = Object.assign;\r\nconst remove = (arr, el) => {\r\n    const i = arr.indexOf(el);\r\n    if (i > -1) {\r\n        arr.splice(i, 1);\r\n    }\r\n};\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\nconst hasOwn = (val, key) => hasOwnProperty.call(val, key);\r\nconst isArray = Array.isArray;\r\nconst isMap = (val) => toTypeString(val) === '[object Map]';\r\nconst isSet = (val) => toTypeString(val) === '[object Set]';\r\nconst isDate = (val) => val instanceof Date;\r\nconst isFunction = (val) => typeof val === 'function';\r\nconst isString = (val) => typeof val === 'string';\r\nconst isSymbol = (val) => typeof val === 'symbol';\r\nconst isObject = (val) => val !== null && typeof val === 'object';\r\nconst isPromise = (val) => {\r\n    return isObject(val) && isFunction(val.then) && isFunction(val.catch);\r\n};\r\nconst objectToString = Object.prototype.toString;\r\nconst toTypeString = (value) => objectToString.call(value);\r\nconst toRawType = (value) => {\r\n    // extract \"RawType\" from strings like \"[object RawType]\"\r\n    return toTypeString(value).slice(8, -1);\r\n};\r\nconst isPlainObject = (val) => toTypeString(val) === '[object Object]';\r\nconst isIntegerKey = (key) => isString(key) &&\r\n    key !== 'NaN' &&\r\n    key[0] !== '-' &&\r\n    '' + parseInt(key, 10) === key;\r\nconst isReservedProp = /*#__PURE__*/ makeMap(\r\n// the leading comma is intentional so empty string \"\" is also included\r\n',key,ref,' +\r\n    'onVnodeBeforeMount,onVnodeMounted,' +\r\n    'onVnodeBeforeUpdate,onVnodeUpdated,' +\r\n    'onVnodeBeforeUnmount,onVnodeUnmounted');\r\nconst cacheStringFunction = (fn) => {\r\n    const cache = Object.create(null);\r\n    return ((str) => {\r\n        const hit = cache[str];\r\n        return hit || (cache[str] = fn(str));\r\n    });\r\n};\r\nconst camelizeRE = /-(\\w)/g;\r\n/**\r\n * @private\r\n */\r\nconst camelize = cacheStringFunction((str) => {\r\n    return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : ''));\r\n});\r\nconst hyphenateRE = /\\B([A-Z])/g;\r\n/**\r\n * @private\r\n */\r\nconst hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, '-$1').toLowerCase());\r\n/**\r\n * @private\r\n */\r\nconst capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));\r\n/**\r\n * @private\r\n */\r\nconst toHandlerKey = cacheStringFunction((str) => (str ? `on${capitalize(str)}` : ``));\r\n// compare whether a value has changed, accounting for NaN.\r\nconst hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);\r\nconst invokeArrayFns = (fns, arg) => {\r\n    for (let i = 0; i < fns.length; i++) {\r\n        fns[i](arg);\r\n    }\r\n};\r\nconst def = (obj, key, value) => {\r\n    Object.defineProperty(obj, key, {\r\n        configurable: true,\r\n        enumerable: false,\r\n        value\r\n    });\r\n};\r\nconst toNumber = (val) => {\r\n    const n = parseFloat(val);\r\n    return isNaN(n) ? val : n;\r\n};\r\nlet _globalThis;\r\nconst getGlobalThis = () => {\r\n    return (_globalThis ||\r\n        (_globalThis =\r\n            typeof globalThis !== 'undefined'\r\n                ? globalThis\r\n                : typeof self !== 'undefined'\r\n                    ? self\r\n                    : typeof window !== 'undefined'\r\n                        ? window\r\n                        : typeof global !== 'undefined'\r\n                            ? global\r\n                            : {}));\r\n};\n\nexport { EMPTY_ARR, EMPTY_OBJ, NO, NOOP, PatchFlagNames, babelParserDefaultPlugins, camelize, capitalize, def, escapeHtml, escapeHtmlComment, extend, generateCodeFrame, getGlobalThis, hasChanged, hasOwn, hyphenate, invokeArrayFns, isArray, isBooleanAttr, isDate, isFunction, isGloballyWhitelisted, isHTMLTag, isIntegerKey, isKnownAttr, isMap, isModelListener, isNoUnitNumericStyleProp, isObject, isOn, isPlainObject, isPromise, isReservedProp, isSSRSafeAttrName, isSVGTag, isSet, isSpecialBooleanAttr, isString, isSymbol, isVoidTag, looseEqual, looseIndexOf, makeMap, normalizeClass, normalizeStyle, objectToString, parseStringStyle, propsToAttrMap, remove, stringifyStyle, toDisplayString, toHandlerKey, toNumber, toRawType, toTypeString };\n","import { EMPTY_OBJ, isArray, isMap, isIntegerKey, isSymbol, extend, hasOwn, isObject, hasChanged, capitalize, toRawType, def, isFunction, NOOP } from '@vue/shared';\n\nconst targetMap = new WeakMap();\r\nconst effectStack = [];\r\nlet activeEffect;\r\nconst ITERATE_KEY = Symbol((process.env.NODE_ENV !== 'production') ? 'iterate' : '');\r\nconst MAP_KEY_ITERATE_KEY = Symbol((process.env.NODE_ENV !== 'production') ? 'Map key iterate' : '');\r\nfunction isEffect(fn) {\r\n    return fn && fn._isEffect === true;\r\n}\r\nfunction effect(fn, options = EMPTY_OBJ) {\r\n    if (isEffect(fn)) {\r\n        fn = fn.raw;\r\n    }\r\n    const effect = createReactiveEffect(fn, options);\r\n    if (!options.lazy) {\r\n        effect();\r\n    }\r\n    return effect;\r\n}\r\nfunction stop(effect) {\r\n    if (effect.active) {\r\n        cleanup(effect);\r\n        if (effect.options.onStop) {\r\n            effect.options.onStop();\r\n        }\r\n        effect.active = false;\r\n    }\r\n}\r\nlet uid = 0;\r\nfunction createReactiveEffect(fn, options) {\r\n    const effect = function reactiveEffect() {\r\n        if (!effect.active) {\r\n            return options.scheduler ? undefined : fn();\r\n        }\r\n        if (!effectStack.includes(effect)) {\r\n            cleanup(effect);\r\n            try {\r\n                enableTracking();\r\n                effectStack.push(effect);\r\n                activeEffect = effect;\r\n                return fn();\r\n            }\r\n            finally {\r\n                effectStack.pop();\r\n                resetTracking();\r\n                activeEffect = effectStack[effectStack.length - 1];\r\n            }\r\n        }\r\n    };\r\n    effect.id = uid++;\r\n    effect.allowRecurse = !!options.allowRecurse;\r\n    effect._isEffect = true;\r\n    effect.active = true;\r\n    effect.raw = fn;\r\n    effect.deps = [];\r\n    effect.options = options;\r\n    return effect;\r\n}\r\nfunction cleanup(effect) {\r\n    const { deps } = effect;\r\n    if (deps.length) {\r\n        for (let i = 0; i < deps.length; i++) {\r\n            deps[i].delete(effect);\r\n        }\r\n        deps.length = 0;\r\n    }\r\n}\r\nlet shouldTrack = true;\r\nconst trackStack = [];\r\nfunction pauseTracking() {\r\n    trackStack.push(shouldTrack);\r\n    shouldTrack = false;\r\n}\r\nfunction enableTracking() {\r\n    trackStack.push(shouldTrack);\r\n    shouldTrack = true;\r\n}\r\nfunction resetTracking() {\r\n    const last = trackStack.pop();\r\n    shouldTrack = last === undefined ? true : last;\r\n}\r\nfunction track(target, type, key) {\r\n    if (!shouldTrack || activeEffect === undefined) {\r\n        return;\r\n    }\r\n    let depsMap = targetMap.get(target);\r\n    if (!depsMap) {\r\n        targetMap.set(target, (depsMap = new Map()));\r\n    }\r\n    let dep = depsMap.get(key);\r\n    if (!dep) {\r\n        depsMap.set(key, (dep = new Set()));\r\n    }\r\n    if (!dep.has(activeEffect)) {\r\n        dep.add(activeEffect);\r\n        activeEffect.deps.push(dep);\r\n        if ((process.env.NODE_ENV !== 'production') && activeEffect.options.onTrack) {\r\n            activeEffect.options.onTrack({\r\n                effect: activeEffect,\r\n                target,\r\n                type,\r\n                key\r\n            });\r\n        }\r\n    }\r\n}\r\nfunction trigger(target, type, key, newValue, oldValue, oldTarget) {\r\n    const depsMap = targetMap.get(target);\r\n    if (!depsMap) {\r\n        // never been tracked\r\n        return;\r\n    }\r\n    const effects = new Set();\r\n    const add = (effectsToAdd) => {\r\n        if (effectsToAdd) {\r\n            effectsToAdd.forEach(effect => {\r\n                if (effect !== activeEffect || effect.allowRecurse) {\r\n                    effects.add(effect);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    if (type === \"clear\" /* CLEAR */) {\r\n        // collection being cleared\r\n        // trigger all effects for target\r\n        depsMap.forEach(add);\r\n    }\r\n    else if (key === 'length' && isArray(target)) {\r\n        depsMap.forEach((dep, key) => {\r\n            if (key === 'length' || key >= newValue) {\r\n                add(dep);\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        // schedule runs for SET | ADD | DELETE\r\n        if (key !== void 0) {\r\n            add(depsMap.get(key));\r\n        }\r\n        // also run for iteration key on ADD | DELETE | Map.SET\r\n        switch (type) {\r\n            case \"add\" /* ADD */:\r\n                if (!isArray(target)) {\r\n                    add(depsMap.get(ITERATE_KEY));\r\n                    if (isMap(target)) {\r\n                        add(depsMap.get(MAP_KEY_ITERATE_KEY));\r\n                    }\r\n                }\r\n                else if (isIntegerKey(key)) {\r\n                    // new index added to array -> length changes\r\n                    add(depsMap.get('length'));\r\n                }\r\n                break;\r\n            case \"delete\" /* DELETE */:\r\n                if (!isArray(target)) {\r\n                    add(depsMap.get(ITERATE_KEY));\r\n                    if (isMap(target)) {\r\n                        add(depsMap.get(MAP_KEY_ITERATE_KEY));\r\n                    }\r\n                }\r\n                break;\r\n            case \"set\" /* SET */:\r\n                if (isMap(target)) {\r\n                    add(depsMap.get(ITERATE_KEY));\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    const run = (effect) => {\r\n        if ((process.env.NODE_ENV !== 'production') && effect.options.onTrigger) {\r\n            effect.options.onTrigger({\r\n                effect,\r\n                target,\r\n                key,\r\n                type,\r\n                newValue,\r\n                oldValue,\r\n                oldTarget\r\n            });\r\n        }\r\n        if (effect.options.scheduler) {\r\n            effect.options.scheduler(effect);\r\n        }\r\n        else {\r\n            effect();\r\n        }\r\n    };\r\n    effects.forEach(run);\r\n}\n\nconst builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol)\r\n    .map(key => Symbol[key])\r\n    .filter(isSymbol));\r\nconst get = /*#__PURE__*/ createGetter();\r\nconst shallowGet = /*#__PURE__*/ createGetter(false, true);\r\nconst readonlyGet = /*#__PURE__*/ createGetter(true);\r\nconst shallowReadonlyGet = /*#__PURE__*/ createGetter(true, true);\r\nconst arrayInstrumentations = {};\r\n['includes', 'indexOf', 'lastIndexOf'].forEach(key => {\r\n    const method = Array.prototype[key];\r\n    arrayInstrumentations[key] = function (...args) {\r\n        const arr = toRaw(this);\r\n        for (let i = 0, l = this.length; i < l; i++) {\r\n            track(arr, \"get\" /* GET */, i + '');\r\n        }\r\n        // we run the method using the original args first (which may be reactive)\r\n        const res = method.apply(arr, args);\r\n        if (res === -1 || res === false) {\r\n            // if that didn't work, run it again using raw values.\r\n            return method.apply(arr, args.map(toRaw));\r\n        }\r\n        else {\r\n            return res;\r\n        }\r\n    };\r\n});\r\n['push', 'pop', 'shift', 'unshift', 'splice'].forEach(key => {\r\n    const method = Array.prototype[key];\r\n    arrayInstrumentations[key] = function (...args) {\r\n        pauseTracking();\r\n        const res = method.apply(this, args);\r\n        resetTracking();\r\n        return res;\r\n    };\r\n});\r\nfunction createGetter(isReadonly = false, shallow = false) {\r\n    return function get(target, key, receiver) {\r\n        if (key === \"__v_isReactive\" /* IS_REACTIVE */) {\r\n            return !isReadonly;\r\n        }\r\n        else if (key === \"__v_isReadonly\" /* IS_READONLY */) {\r\n            return isReadonly;\r\n        }\r\n        else if (key === \"__v_raw\" /* RAW */ &&\r\n            receiver === (isReadonly ? readonlyMap : reactiveMap).get(target)) {\r\n            return target;\r\n        }\r\n        const targetIsArray = isArray(target);\r\n        if (targetIsArray && hasOwn(arrayInstrumentations, key)) {\r\n            return Reflect.get(arrayInstrumentations, key, receiver);\r\n        }\r\n        const res = Reflect.get(target, key, receiver);\r\n        if (isSymbol(key)\r\n            ? builtInSymbols.has(key)\r\n            : key === `__proto__` || key === `__v_isRef`) {\r\n            return res;\r\n        }\r\n        if (!isReadonly) {\r\n            track(target, \"get\" /* GET */, key);\r\n        }\r\n        if (shallow) {\r\n            return res;\r\n        }\r\n        if (isRef(res)) {\r\n            // ref unwrapping - does not apply for Array + integer key.\r\n            const shouldUnwrap = !targetIsArray || !isIntegerKey(key);\r\n            return shouldUnwrap ? res.value : res;\r\n        }\r\n        if (isObject(res)) {\r\n            // Convert returned value into a proxy as well. we do the isObject check\r\n            // here to avoid invalid value warning. Also need to lazy access readonly\r\n            // and reactive here to avoid circular dependency.\r\n            return isReadonly ? readonly(res) : reactive(res);\r\n        }\r\n        return res;\r\n    };\r\n}\r\nconst set = /*#__PURE__*/ createSetter();\r\nconst shallowSet = /*#__PURE__*/ createSetter(true);\r\nfunction createSetter(shallow = false) {\r\n    return function set(target, key, value, receiver) {\r\n        const oldValue = target[key];\r\n        if (!shallow) {\r\n            value = toRaw(value);\r\n            if (!isArray(target) && isRef(oldValue) && !isRef(value)) {\r\n                oldValue.value = value;\r\n                return true;\r\n            }\r\n        }\r\n        const hadKey = isArray(target) && isIntegerKey(key)\r\n            ? Number(key) < target.length\r\n            : hasOwn(target, key);\r\n        const result = Reflect.set(target, key, value, receiver);\r\n        // don't trigger if target is something up in the prototype chain of original\r\n        if (target === toRaw(receiver)) {\r\n            if (!hadKey) {\r\n                trigger(target, \"add\" /* ADD */, key, value);\r\n            }\r\n            else if (hasChanged(value, oldValue)) {\r\n                trigger(target, \"set\" /* SET */, key, value, oldValue);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n}\r\nfunction deleteProperty(target, key) {\r\n    const hadKey = hasOwn(target, key);\r\n    const oldValue = target[key];\r\n    const result = Reflect.deleteProperty(target, key);\r\n    if (result && hadKey) {\r\n        trigger(target, \"delete\" /* DELETE */, key, undefined, oldValue);\r\n    }\r\n    return result;\r\n}\r\nfunction has(target, key) {\r\n    const result = Reflect.has(target, key);\r\n    if (!isSymbol(key) || !builtInSymbols.has(key)) {\r\n        track(target, \"has\" /* HAS */, key);\r\n    }\r\n    return result;\r\n}\r\nfunction ownKeys(target) {\r\n    track(target, \"iterate\" /* ITERATE */, isArray(target) ? 'length' : ITERATE_KEY);\r\n    return Reflect.ownKeys(target);\r\n}\r\nconst mutableHandlers = {\r\n    get,\r\n    set,\r\n    deleteProperty,\r\n    has,\r\n    ownKeys\r\n};\r\nconst readonlyHandlers = {\r\n    get: readonlyGet,\r\n    set(target, key) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            console.warn(`Set operation on key \"${String(key)}\" failed: target is readonly.`, target);\r\n        }\r\n        return true;\r\n    },\r\n    deleteProperty(target, key) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            console.warn(`Delete operation on key \"${String(key)}\" failed: target is readonly.`, target);\r\n        }\r\n        return true;\r\n    }\r\n};\r\nconst shallowReactiveHandlers = extend({}, mutableHandlers, {\r\n    get: shallowGet,\r\n    set: shallowSet\r\n});\r\n// Props handlers are special in the sense that it should not unwrap top-level\r\n// refs (in order to allow refs to be explicitly passed down), but should\r\n// retain the reactivity of the normal readonly object.\r\nconst shallowReadonlyHandlers = extend({}, readonlyHandlers, {\r\n    get: shallowReadonlyGet\r\n});\n\nconst toReactive = (value) => isObject(value) ? reactive(value) : value;\r\nconst toReadonly = (value) => isObject(value) ? readonly(value) : value;\r\nconst toShallow = (value) => value;\r\nconst getProto = (v) => Reflect.getPrototypeOf(v);\r\nfunction get$1(target, key, isReadonly = false, isShallow = false) {\r\n    // #1772: readonly(reactive(Map)) should return readonly + reactive version\r\n    // of the value\r\n    target = target[\"__v_raw\" /* RAW */];\r\n    const rawTarget = toRaw(target);\r\n    const rawKey = toRaw(key);\r\n    if (key !== rawKey) {\r\n        !isReadonly && track(rawTarget, \"get\" /* GET */, key);\r\n    }\r\n    !isReadonly && track(rawTarget, \"get\" /* GET */, rawKey);\r\n    const { has } = getProto(rawTarget);\r\n    const wrap = isReadonly ? toReadonly : isShallow ? toShallow : toReactive;\r\n    if (has.call(rawTarget, key)) {\r\n        return wrap(target.get(key));\r\n    }\r\n    else if (has.call(rawTarget, rawKey)) {\r\n        return wrap(target.get(rawKey));\r\n    }\r\n}\r\nfunction has$1(key, isReadonly = false) {\r\n    const target = this[\"__v_raw\" /* RAW */];\r\n    const rawTarget = toRaw(target);\r\n    const rawKey = toRaw(key);\r\n    if (key !== rawKey) {\r\n        !isReadonly && track(rawTarget, \"has\" /* HAS */, key);\r\n    }\r\n    !isReadonly && track(rawTarget, \"has\" /* HAS */, rawKey);\r\n    return key === rawKey\r\n        ? target.has(key)\r\n        : target.has(key) || target.has(rawKey);\r\n}\r\nfunction size(target, isReadonly = false) {\r\n    target = target[\"__v_raw\" /* RAW */];\r\n    !isReadonly && track(toRaw(target), \"iterate\" /* ITERATE */, ITERATE_KEY);\r\n    return Reflect.get(target, 'size', target);\r\n}\r\nfunction add(value) {\r\n    value = toRaw(value);\r\n    const target = toRaw(this);\r\n    const proto = getProto(target);\r\n    const hadKey = proto.has.call(target, value);\r\n    const result = target.add(value);\r\n    if (!hadKey) {\r\n        trigger(target, \"add\" /* ADD */, value, value);\r\n    }\r\n    return result;\r\n}\r\nfunction set$1(key, value) {\r\n    value = toRaw(value);\r\n    const target = toRaw(this);\r\n    const { has, get } = getProto(target);\r\n    let hadKey = has.call(target, key);\r\n    if (!hadKey) {\r\n        key = toRaw(key);\r\n        hadKey = has.call(target, key);\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        checkIdentityKeys(target, has, key);\r\n    }\r\n    const oldValue = get.call(target, key);\r\n    const result = target.set(key, value);\r\n    if (!hadKey) {\r\n        trigger(target, \"add\" /* ADD */, key, value);\r\n    }\r\n    else if (hasChanged(value, oldValue)) {\r\n        trigger(target, \"set\" /* SET */, key, value, oldValue);\r\n    }\r\n    return result;\r\n}\r\nfunction deleteEntry(key) {\r\n    const target = toRaw(this);\r\n    const { has, get } = getProto(target);\r\n    let hadKey = has.call(target, key);\r\n    if (!hadKey) {\r\n        key = toRaw(key);\r\n        hadKey = has.call(target, key);\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        checkIdentityKeys(target, has, key);\r\n    }\r\n    const oldValue = get ? get.call(target, key) : undefined;\r\n    // forward the operation before queueing reactions\r\n    const result = target.delete(key);\r\n    if (hadKey) {\r\n        trigger(target, \"delete\" /* DELETE */, key, undefined, oldValue);\r\n    }\r\n    return result;\r\n}\r\nfunction clear() {\r\n    const target = toRaw(this);\r\n    const hadItems = target.size !== 0;\r\n    const oldTarget = (process.env.NODE_ENV !== 'production')\r\n        ? isMap(target)\r\n            ? new Map(target)\r\n            : new Set(target)\r\n        : undefined;\r\n    // forward the operation before queueing reactions\r\n    const result = target.clear();\r\n    if (hadItems) {\r\n        trigger(target, \"clear\" /* CLEAR */, undefined, undefined, oldTarget);\r\n    }\r\n    return result;\r\n}\r\nfunction createForEach(isReadonly, isShallow) {\r\n    return function forEach(callback, thisArg) {\r\n        const observed = this;\r\n        const target = observed[\"__v_raw\" /* RAW */];\r\n        const rawTarget = toRaw(target);\r\n        const wrap = isReadonly ? toReadonly : isShallow ? toShallow : toReactive;\r\n        !isReadonly && track(rawTarget, \"iterate\" /* ITERATE */, ITERATE_KEY);\r\n        return target.forEach((value, key) => {\r\n            // important: make sure the callback is\r\n            // 1. invoked with the reactive map as `this` and 3rd arg\r\n            // 2. the value received should be a corresponding reactive/readonly.\r\n            return callback.call(thisArg, wrap(value), wrap(key), observed);\r\n        });\r\n    };\r\n}\r\nfunction createIterableMethod(method, isReadonly, isShallow) {\r\n    return function (...args) {\r\n        const target = this[\"__v_raw\" /* RAW */];\r\n        const rawTarget = toRaw(target);\r\n        const targetIsMap = isMap(rawTarget);\r\n        const isPair = method === 'entries' || (method === Symbol.iterator && targetIsMap);\r\n        const isKeyOnly = method === 'keys' && targetIsMap;\r\n        const innerIterator = target[method](...args);\r\n        const wrap = isReadonly ? toReadonly : isShallow ? toShallow : toReactive;\r\n        !isReadonly &&\r\n            track(rawTarget, \"iterate\" /* ITERATE */, isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);\r\n        // return a wrapped iterator which returns observed versions of the\r\n        // values emitted from the real iterator\r\n        return {\r\n            // iterator protocol\r\n            next() {\r\n                const { value, done } = innerIterator.next();\r\n                return done\r\n                    ? { value, done }\r\n                    : {\r\n                        value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),\r\n                        done\r\n                    };\r\n            },\r\n            // iterable protocol\r\n            [Symbol.iterator]() {\r\n                return this;\r\n            }\r\n        };\r\n    };\r\n}\r\nfunction createReadonlyMethod(type) {\r\n    return function (...args) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            const key = args[0] ? `on key \"${args[0]}\" ` : ``;\r\n            console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));\r\n        }\r\n        return type === \"delete\" /* DELETE */ ? false : this;\r\n    };\r\n}\r\nconst mutableInstrumentations = {\r\n    get(key) {\r\n        return get$1(this, key);\r\n    },\r\n    get size() {\r\n        return size(this);\r\n    },\r\n    has: has$1,\r\n    add,\r\n    set: set$1,\r\n    delete: deleteEntry,\r\n    clear,\r\n    forEach: createForEach(false, false)\r\n};\r\nconst shallowInstrumentations = {\r\n    get(key) {\r\n        return get$1(this, key, false, true);\r\n    },\r\n    get size() {\r\n        return size(this);\r\n    },\r\n    has: has$1,\r\n    add,\r\n    set: set$1,\r\n    delete: deleteEntry,\r\n    clear,\r\n    forEach: createForEach(false, true)\r\n};\r\nconst readonlyInstrumentations = {\r\n    get(key) {\r\n        return get$1(this, key, true);\r\n    },\r\n    get size() {\r\n        return size(this, true);\r\n    },\r\n    has(key) {\r\n        return has$1.call(this, key, true);\r\n    },\r\n    add: createReadonlyMethod(\"add\" /* ADD */),\r\n    set: createReadonlyMethod(\"set\" /* SET */),\r\n    delete: createReadonlyMethod(\"delete\" /* DELETE */),\r\n    clear: createReadonlyMethod(\"clear\" /* CLEAR */),\r\n    forEach: createForEach(true, false)\r\n};\r\nconst iteratorMethods = ['keys', 'values', 'entries', Symbol.iterator];\r\niteratorMethods.forEach(method => {\r\n    mutableInstrumentations[method] = createIterableMethod(method, false, false);\r\n    readonlyInstrumentations[method] = createIterableMethod(method, true, false);\r\n    shallowInstrumentations[method] = createIterableMethod(method, false, true);\r\n});\r\nfunction createInstrumentationGetter(isReadonly, shallow) {\r\n    const instrumentations = shallow\r\n        ? shallowInstrumentations\r\n        : isReadonly\r\n            ? readonlyInstrumentations\r\n            : mutableInstrumentations;\r\n    return (target, key, receiver) => {\r\n        if (key === \"__v_isReactive\" /* IS_REACTIVE */) {\r\n            return !isReadonly;\r\n        }\r\n        else if (key === \"__v_isReadonly\" /* IS_READONLY */) {\r\n            return isReadonly;\r\n        }\r\n        else if (key === \"__v_raw\" /* RAW */) {\r\n            return target;\r\n        }\r\n        return Reflect.get(hasOwn(instrumentations, key) && key in target\r\n            ? instrumentations\r\n            : target, key, receiver);\r\n    };\r\n}\r\nconst mutableCollectionHandlers = {\r\n    get: createInstrumentationGetter(false, false)\r\n};\r\nconst shallowCollectionHandlers = {\r\n    get: createInstrumentationGetter(false, true)\r\n};\r\nconst readonlyCollectionHandlers = {\r\n    get: createInstrumentationGetter(true, false)\r\n};\r\nfunction checkIdentityKeys(target, has, key) {\r\n    const rawKey = toRaw(key);\r\n    if (rawKey !== key && has.call(target, rawKey)) {\r\n        const type = toRawType(target);\r\n        console.warn(`Reactive ${type} contains both the raw and reactive ` +\r\n            `versions of the same object${type === `Map` ? ` as keys` : ``}, ` +\r\n            `which can lead to inconsistencies. ` +\r\n            `Avoid differentiating between the raw and reactive versions ` +\r\n            `of an object and only use the reactive version if possible.`);\r\n    }\r\n}\n\nconst reactiveMap = new WeakMap();\r\nconst readonlyMap = new WeakMap();\r\nfunction targetTypeMap(rawType) {\r\n    switch (rawType) {\r\n        case 'Object':\r\n        case 'Array':\r\n            return 1 /* COMMON */;\r\n        case 'Map':\r\n        case 'Set':\r\n        case 'WeakMap':\r\n        case 'WeakSet':\r\n            return 2 /* COLLECTION */;\r\n        default:\r\n            return 0 /* INVALID */;\r\n    }\r\n}\r\nfunction getTargetType(value) {\r\n    return value[\"__v_skip\" /* SKIP */] || !Object.isExtensible(value)\r\n        ? 0 /* INVALID */\r\n        : targetTypeMap(toRawType(value));\r\n}\r\nfunction reactive(target) {\r\n    // if trying to observe a readonly proxy, return the readonly version.\r\n    if (target && target[\"__v_isReadonly\" /* IS_READONLY */]) {\r\n        return target;\r\n    }\r\n    return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers);\r\n}\r\n// Return a reactive-copy of the original object, where only the root level\r\n// properties are reactive, and does NOT unwrap refs nor recursively convert\r\n// returned properties.\r\nfunction shallowReactive(target) {\r\n    return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers);\r\n}\r\nfunction readonly(target) {\r\n    return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers);\r\n}\r\n// Return a reactive-copy of the original object, where only the root level\r\n// properties are readonly, and does NOT unwrap refs nor recursively convert\r\n// returned properties.\r\n// This is used for creating the props proxy object for stateful components.\r\nfunction shallowReadonly(target) {\r\n    return createReactiveObject(target, true, shallowReadonlyHandlers, readonlyCollectionHandlers);\r\n}\r\nfunction createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers) {\r\n    if (!isObject(target)) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            console.warn(`value cannot be made reactive: ${String(target)}`);\r\n        }\r\n        return target;\r\n    }\r\n    // target is already a Proxy, return it.\r\n    // exception: calling readonly() on a reactive object\r\n    if (target[\"__v_raw\" /* RAW */] &&\r\n        !(isReadonly && target[\"__v_isReactive\" /* IS_REACTIVE */])) {\r\n        return target;\r\n    }\r\n    // target already has corresponding Proxy\r\n    const proxyMap = isReadonly ? readonlyMap : reactiveMap;\r\n    const existingProxy = proxyMap.get(target);\r\n    if (existingProxy) {\r\n        return existingProxy;\r\n    }\r\n    // only a whitelist of value types can be observed.\r\n    const targetType = getTargetType(target);\r\n    if (targetType === 0 /* INVALID */) {\r\n        return target;\r\n    }\r\n    const proxy = new Proxy(target, targetType === 2 /* COLLECTION */ ? collectionHandlers : baseHandlers);\r\n    proxyMap.set(target, proxy);\r\n    return proxy;\r\n}\r\nfunction isReactive(value) {\r\n    if (isReadonly(value)) {\r\n        return isReactive(value[\"__v_raw\" /* RAW */]);\r\n    }\r\n    return !!(value && value[\"__v_isReactive\" /* IS_REACTIVE */]);\r\n}\r\nfunction isReadonly(value) {\r\n    return !!(value && value[\"__v_isReadonly\" /* IS_READONLY */]);\r\n}\r\nfunction isProxy(value) {\r\n    return isReactive(value) || isReadonly(value);\r\n}\r\nfunction toRaw(observed) {\r\n    return ((observed && toRaw(observed[\"__v_raw\" /* RAW */])) || observed);\r\n}\r\nfunction markRaw(value) {\r\n    def(value, \"__v_skip\" /* SKIP */, true);\r\n    return value;\r\n}\n\nconst convert = (val) => isObject(val) ? reactive(val) : val;\r\nfunction isRef(r) {\r\n    return Boolean(r && r.__v_isRef === true);\r\n}\r\nfunction ref(value) {\r\n    return createRef(value);\r\n}\r\nfunction shallowRef(value) {\r\n    return createRef(value, true);\r\n}\r\nclass RefImpl {\r\n    constructor(_rawValue, _shallow = false) {\r\n        this._rawValue = _rawValue;\r\n        this._shallow = _shallow;\r\n        this.__v_isRef = true;\r\n        this._value = _shallow ? _rawValue : convert(_rawValue);\r\n    }\r\n    get value() {\r\n        track(toRaw(this), \"get\" /* GET */, 'value');\r\n        return this._value;\r\n    }\r\n    set value(newVal) {\r\n        if (hasChanged(toRaw(newVal), this._rawValue)) {\r\n            this._rawValue = newVal;\r\n            this._value = this._shallow ? newVal : convert(newVal);\r\n            trigger(toRaw(this), \"set\" /* SET */, 'value', newVal);\r\n        }\r\n    }\r\n}\r\nfunction createRef(rawValue, shallow = false) {\r\n    if (isRef(rawValue)) {\r\n        return rawValue;\r\n    }\r\n    return new RefImpl(rawValue, shallow);\r\n}\r\nfunction triggerRef(ref) {\r\n    trigger(toRaw(ref), \"set\" /* SET */, 'value', (process.env.NODE_ENV !== 'production') ? ref.value : void 0);\r\n}\r\nfunction unref(ref) {\r\n    return isRef(ref) ? ref.value : ref;\r\n}\r\nconst shallowUnwrapHandlers = {\r\n    get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),\r\n    set: (target, key, value, receiver) => {\r\n        const oldValue = target[key];\r\n        if (isRef(oldValue) && !isRef(value)) {\r\n            oldValue.value = value;\r\n            return true;\r\n        }\r\n        else {\r\n            return Reflect.set(target, key, value, receiver);\r\n        }\r\n    }\r\n};\r\nfunction proxyRefs(objectWithRefs) {\r\n    return isReactive(objectWithRefs)\r\n        ? objectWithRefs\r\n        : new Proxy(objectWithRefs, shallowUnwrapHandlers);\r\n}\r\nclass CustomRefImpl {\r\n    constructor(factory) {\r\n        this.__v_isRef = true;\r\n        const { get, set } = factory(() => track(this, \"get\" /* GET */, 'value'), () => trigger(this, \"set\" /* SET */, 'value'));\r\n        this._get = get;\r\n        this._set = set;\r\n    }\r\n    get value() {\r\n        return this._get();\r\n    }\r\n    set value(newVal) {\r\n        this._set(newVal);\r\n    }\r\n}\r\nfunction customRef(factory) {\r\n    return new CustomRefImpl(factory);\r\n}\r\nfunction toRefs(object) {\r\n    if ((process.env.NODE_ENV !== 'production') && !isProxy(object)) {\r\n        console.warn(`toRefs() expects a reactive object but received a plain one.`);\r\n    }\r\n    const ret = isArray(object) ? new Array(object.length) : {};\r\n    for (const key in object) {\r\n        ret[key] = toRef(object, key);\r\n    }\r\n    return ret;\r\n}\r\nclass ObjectRefImpl {\r\n    constructor(_object, _key) {\r\n        this._object = _object;\r\n        this._key = _key;\r\n        this.__v_isRef = true;\r\n    }\r\n    get value() {\r\n        return this._object[this._key];\r\n    }\r\n    set value(newVal) {\r\n        this._object[this._key] = newVal;\r\n    }\r\n}\r\nfunction toRef(object, key) {\r\n    return isRef(object[key])\r\n        ? object[key]\r\n        : new ObjectRefImpl(object, key);\r\n}\n\nclass ComputedRefImpl {\r\n    constructor(getter, _setter, isReadonly) {\r\n        this._setter = _setter;\r\n        this._dirty = true;\r\n        this.__v_isRef = true;\r\n        this.effect = effect(getter, {\r\n            lazy: true,\r\n            scheduler: () => {\r\n                if (!this._dirty) {\r\n                    this._dirty = true;\r\n                    trigger(toRaw(this), \"set\" /* SET */, 'value');\r\n                }\r\n            }\r\n        });\r\n        this[\"__v_isReadonly\" /* IS_READONLY */] = isReadonly;\r\n    }\r\n    get value() {\r\n        if (this._dirty) {\r\n            this._value = this.effect();\r\n            this._dirty = false;\r\n        }\r\n        track(toRaw(this), \"get\" /* GET */, 'value');\r\n        return this._value;\r\n    }\r\n    set value(newValue) {\r\n        this._setter(newValue);\r\n    }\r\n}\r\nfunction computed(getterOrOptions) {\r\n    let getter;\r\n    let setter;\r\n    if (isFunction(getterOrOptions)) {\r\n        getter = getterOrOptions;\r\n        setter = (process.env.NODE_ENV !== 'production')\r\n            ? () => {\r\n                console.warn('Write operation failed: computed value is readonly');\r\n            }\r\n            : NOOP;\r\n    }\r\n    else {\r\n        getter = getterOrOptions.get;\r\n        setter = getterOrOptions.set;\r\n    }\r\n    return new ComputedRefImpl(getter, setter, isFunction(getterOrOptions) || !getterOrOptions.set);\r\n}\n\nexport { ITERATE_KEY, computed, customRef, effect, enableTracking, isProxy, isReactive, isReadonly, isRef, markRaw, pauseTracking, proxyRefs, reactive, readonly, ref, resetTracking, shallowReactive, shallowReadonly, shallowRef, stop, toRaw, toRef, toRefs, track, trigger, triggerRef, unref };\n","import { pauseTracking, resetTracking, isRef, toRaw, shallowReactive, trigger, isReactive, effect, stop, isProxy, reactive, shallowReadonly, track, proxyRefs, computed as computed$1, ref, isReadonly } from '@vue/reactivity';\nexport { customRef, isProxy, isReactive, isReadonly, isRef, markRaw, proxyRefs, reactive, readonly, ref, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, triggerRef, unref } from '@vue/reactivity';\nimport { isString, isFunction, isPromise, isArray, extend, EMPTY_OBJ, toHandlerKey, toNumber, hyphenate, camelize, isOn, hasOwn, isModelListener, def, isReservedProp, EMPTY_ARR, isObject, capitalize, toRawType, makeMap, remove, NOOP, hasChanged, isSet, isMap, invokeArrayFns, NO, getGlobalThis, normalizeClass, normalizeStyle, isGloballyWhitelisted } from '@vue/shared';\nexport { camelize, capitalize, toDisplayString, toHandlerKey } from '@vue/shared';\n\nconst stack = [];\r\nfunction pushWarningContext(vnode) {\r\n    stack.push(vnode);\r\n}\r\nfunction popWarningContext() {\r\n    stack.pop();\r\n}\r\nfunction warn(msg, ...args) {\r\n    // avoid props formatting or warn handler tracking deps that might be mutated\r\n    // during patch, leading to infinite recursion.\r\n    pauseTracking();\r\n    const instance = stack.length ? stack[stack.length - 1].component : null;\r\n    const appWarnHandler = instance && instance.appContext.config.warnHandler;\r\n    const trace = getComponentTrace();\r\n    if (appWarnHandler) {\r\n        callWithErrorHandling(appWarnHandler, instance, 11 /* APP_WARN_HANDLER */, [\r\n            msg + args.join(''),\r\n            instance && instance.proxy,\r\n            trace\r\n                .map(({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`)\r\n                .join('\\n'),\r\n            trace\r\n        ]);\r\n    }\r\n    else {\r\n        const warnArgs = [`[Vue warn]: ${msg}`, ...args];\r\n        /* istanbul ignore if */\r\n        if (trace.length &&\r\n            // avoid spamming console during tests\r\n            !false) {\r\n            warnArgs.push(`\\n`, ...formatTrace(trace));\r\n        }\r\n        console.warn(...warnArgs);\r\n    }\r\n    resetTracking();\r\n}\r\nfunction getComponentTrace() {\r\n    let currentVNode = stack[stack.length - 1];\r\n    if (!currentVNode) {\r\n        return [];\r\n    }\r\n    // we can't just use the stack because it will be incomplete during updates\r\n    // that did not start from the root. Re-construct the parent chain using\r\n    // instance parent pointers.\r\n    const normalizedStack = [];\r\n    while (currentVNode) {\r\n        const last = normalizedStack[0];\r\n        if (last && last.vnode === currentVNode) {\r\n            last.recurseCount++;\r\n        }\r\n        else {\r\n            normalizedStack.push({\r\n                vnode: currentVNode,\r\n                recurseCount: 0\r\n            });\r\n        }\r\n        const parentInstance = currentVNode.component && currentVNode.component.parent;\r\n        currentVNode = parentInstance && parentInstance.vnode;\r\n    }\r\n    return normalizedStack;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatTrace(trace) {\r\n    const logs = [];\r\n    trace.forEach((entry, i) => {\r\n        logs.push(...(i === 0 ? [] : [`\\n`]), ...formatTraceEntry(entry));\r\n    });\r\n    return logs;\r\n}\r\nfunction formatTraceEntry({ vnode, recurseCount }) {\r\n    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;\r\n    const isRoot = vnode.component ? vnode.component.parent == null : false;\r\n    const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;\r\n    const close = `>` + postfix;\r\n    return vnode.props\r\n        ? [open, ...formatProps(vnode.props), close]\r\n        : [open + close];\r\n}\r\n/* istanbul ignore next */\r\nfunction formatProps(props) {\r\n    const res = [];\r\n    const keys = Object.keys(props);\r\n    keys.slice(0, 3).forEach(key => {\r\n        res.push(...formatProp(key, props[key]));\r\n    });\r\n    if (keys.length > 3) {\r\n        res.push(` ...`);\r\n    }\r\n    return res;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatProp(key, value, raw) {\r\n    if (isString(value)) {\r\n        value = JSON.stringify(value);\r\n        return raw ? value : [`${key}=${value}`];\r\n    }\r\n    else if (typeof value === 'number' ||\r\n        typeof value === 'boolean' ||\r\n        value == null) {\r\n        return raw ? value : [`${key}=${value}`];\r\n    }\r\n    else if (isRef(value)) {\r\n        value = formatProp(key, toRaw(value.value), true);\r\n        return raw ? value : [`${key}=Ref<`, value, `>`];\r\n    }\r\n    else if (isFunction(value)) {\r\n        return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];\r\n    }\r\n    else {\r\n        value = toRaw(value);\r\n        return raw ? value : [`${key}=`, value];\r\n    }\r\n}\n\nconst ErrorTypeStrings = {\r\n    [\"bc\" /* BEFORE_CREATE */]: 'beforeCreate hook',\r\n    [\"c\" /* CREATED */]: 'created hook',\r\n    [\"bm\" /* BEFORE_MOUNT */]: 'beforeMount hook',\r\n    [\"m\" /* MOUNTED */]: 'mounted hook',\r\n    [\"bu\" /* BEFORE_UPDATE */]: 'beforeUpdate hook',\r\n    [\"u\" /* UPDATED */]: 'updated',\r\n    [\"bum\" /* BEFORE_UNMOUNT */]: 'beforeUnmount hook',\r\n    [\"um\" /* UNMOUNTED */]: 'unmounted hook',\r\n    [\"a\" /* ACTIVATED */]: 'activated hook',\r\n    [\"da\" /* DEACTIVATED */]: 'deactivated hook',\r\n    [\"ec\" /* ERROR_CAPTURED */]: 'errorCaptured hook',\r\n    [\"rtc\" /* RENDER_TRACKED */]: 'renderTracked hook',\r\n    [\"rtg\" /* RENDER_TRIGGERED */]: 'renderTriggered hook',\r\n    [0 /* SETUP_FUNCTION */]: 'setup function',\r\n    [1 /* RENDER_FUNCTION */]: 'render function',\r\n    [2 /* WATCH_GETTER */]: 'watcher getter',\r\n    [3 /* WATCH_CALLBACK */]: 'watcher callback',\r\n    [4 /* WATCH_CLEANUP */]: 'watcher cleanup function',\r\n    [5 /* NATIVE_EVENT_HANDLER */]: 'native event handler',\r\n    [6 /* COMPONENT_EVENT_HANDLER */]: 'component event handler',\r\n    [7 /* VNODE_HOOK */]: 'vnode hook',\r\n    [8 /* DIRECTIVE_HOOK */]: 'directive hook',\r\n    [9 /* TRANSITION_HOOK */]: 'transition hook',\r\n    [10 /* APP_ERROR_HANDLER */]: 'app errorHandler',\r\n    [11 /* APP_WARN_HANDLER */]: 'app warnHandler',\r\n    [12 /* FUNCTION_REF */]: 'ref function',\r\n    [13 /* ASYNC_COMPONENT_LOADER */]: 'async component loader',\r\n    [14 /* SCHEDULER */]: 'scheduler flush. This is likely a Vue internals bug. ' +\r\n        'Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-next'\r\n};\r\nfunction callWithErrorHandling(fn, instance, type, args) {\r\n    let res;\r\n    try {\r\n        res = args ? fn(...args) : fn();\r\n    }\r\n    catch (err) {\r\n        handleError(err, instance, type);\r\n    }\r\n    return res;\r\n}\r\nfunction callWithAsyncErrorHandling(fn, instance, type, args) {\r\n    if (isFunction(fn)) {\r\n        const res = callWithErrorHandling(fn, instance, type, args);\r\n        if (res && isPromise(res)) {\r\n            res.catch(err => {\r\n                handleError(err, instance, type);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n    const values = [];\r\n    for (let i = 0; i < fn.length; i++) {\r\n        values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));\r\n    }\r\n    return values;\r\n}\r\nfunction handleError(err, instance, type, throwInDev = true) {\r\n    const contextVNode = instance ? instance.vnode : null;\r\n    if (instance) {\r\n        let cur = instance.parent;\r\n        // the exposed instance is the render proxy to keep it consistent with 2.x\r\n        const exposedInstance = instance.proxy;\r\n        // in production the hook receives only the error code\r\n        const errorInfo = (process.env.NODE_ENV !== 'production') ? ErrorTypeStrings[type] : type;\r\n        while (cur) {\r\n            const errorCapturedHooks = cur.ec;\r\n            if (errorCapturedHooks) {\r\n                for (let i = 0; i < errorCapturedHooks.length; i++) {\r\n                    if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            cur = cur.parent;\r\n        }\r\n        // app-level handling\r\n        const appErrorHandler = instance.appContext.config.errorHandler;\r\n        if (appErrorHandler) {\r\n            callWithErrorHandling(appErrorHandler, null, 10 /* APP_ERROR_HANDLER */, [err, exposedInstance, errorInfo]);\r\n            return;\r\n        }\r\n    }\r\n    logError(err, type, contextVNode, throwInDev);\r\n}\r\nfunction logError(err, type, contextVNode, throwInDev = true) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const info = ErrorTypeStrings[type];\r\n        if (contextVNode) {\r\n            pushWarningContext(contextVNode);\r\n        }\r\n        warn(`Unhandled error${info ? ` during execution of ${info}` : ``}`);\r\n        if (contextVNode) {\r\n            popWarningContext();\r\n        }\r\n        // crash in dev by default so it's more noticeable\r\n        if (throwInDev) {\r\n            throw err;\r\n        }\r\n        else {\r\n            console.error(err);\r\n        }\r\n    }\r\n    else {\r\n        // recover in prod to reduce the impact on end-user\r\n        console.error(err);\r\n    }\r\n}\n\nlet isFlushing = false;\r\nlet isFlushPending = false;\r\nconst queue = [];\r\nlet flushIndex = 0;\r\nconst pendingPreFlushCbs = [];\r\nlet activePreFlushCbs = null;\r\nlet preFlushIndex = 0;\r\nconst pendingPostFlushCbs = [];\r\nlet activePostFlushCbs = null;\r\nlet postFlushIndex = 0;\r\nconst resolvedPromise = Promise.resolve();\r\nlet currentFlushPromise = null;\r\nlet currentPreFlushParentJob = null;\r\nconst RECURSION_LIMIT = 100;\r\nfunction nextTick(fn) {\r\n    const p = currentFlushPromise || resolvedPromise;\r\n    return fn ? p.then(this ? fn.bind(this) : fn) : p;\r\n}\r\nfunction queueJob(job) {\r\n    // the dedupe search uses the startIndex argument of Array.includes()\r\n    // by default the search index includes the current job that is being run\r\n    // so it cannot recursively trigger itself again.\r\n    // if the job is a watch() callback, the search will start with a +1 index to\r\n    // allow it recursively trigger itself - it is the user's responsibility to\r\n    // ensure it doesn't end up in an infinite loop.\r\n    if ((!queue.length ||\r\n        !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) &&\r\n        job !== currentPreFlushParentJob) {\r\n        queue.push(job);\r\n        queueFlush();\r\n    }\r\n}\r\nfunction queueFlush() {\r\n    if (!isFlushing && !isFlushPending) {\r\n        isFlushPending = true;\r\n        currentFlushPromise = resolvedPromise.then(flushJobs);\r\n    }\r\n}\r\nfunction invalidateJob(job) {\r\n    const i = queue.indexOf(job);\r\n    if (i > -1) {\r\n        queue[i] = null;\r\n    }\r\n}\r\nfunction queueCb(cb, activeQueue, pendingQueue, index) {\r\n    if (!isArray(cb)) {\r\n        if (!activeQueue ||\r\n            !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) {\r\n            pendingQueue.push(cb);\r\n        }\r\n    }\r\n    else {\r\n        // if cb is an array, it is a component lifecycle hook which can only be\r\n        // triggered by a job, which is already deduped in the main queue, so\r\n        // we can skip duplicate check here to improve perf\r\n        pendingQueue.push(...cb);\r\n    }\r\n    queueFlush();\r\n}\r\nfunction queuePreFlushCb(cb) {\r\n    queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);\r\n}\r\nfunction queuePostFlushCb(cb) {\r\n    queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);\r\n}\r\nfunction flushPreFlushCbs(seen, parentJob = null) {\r\n    if (pendingPreFlushCbs.length) {\r\n        currentPreFlushParentJob = parentJob;\r\n        activePreFlushCbs = [...new Set(pendingPreFlushCbs)];\r\n        pendingPreFlushCbs.length = 0;\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            seen = seen || new Map();\r\n        }\r\n        for (preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                checkRecursiveUpdates(seen, activePreFlushCbs[preFlushIndex]);\r\n            }\r\n            activePreFlushCbs[preFlushIndex]();\r\n        }\r\n        activePreFlushCbs = null;\r\n        preFlushIndex = 0;\r\n        currentPreFlushParentJob = null;\r\n        // recursively flush until it drains\r\n        flushPreFlushCbs(seen, parentJob);\r\n    }\r\n}\r\nfunction flushPostFlushCbs(seen) {\r\n    if (pendingPostFlushCbs.length) {\r\n        const deduped = [...new Set(pendingPostFlushCbs)];\r\n        pendingPostFlushCbs.length = 0;\r\n        // #1947 already has active queue, nested flushPostFlushCbs call\r\n        if (activePostFlushCbs) {\r\n            activePostFlushCbs.push(...deduped);\r\n            return;\r\n        }\r\n        activePostFlushCbs = deduped;\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            seen = seen || new Map();\r\n        }\r\n        activePostFlushCbs.sort((a, b) => getId(a) - getId(b));\r\n        for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex]);\r\n            }\r\n            activePostFlushCbs[postFlushIndex]();\r\n        }\r\n        activePostFlushCbs = null;\r\n        postFlushIndex = 0;\r\n    }\r\n}\r\nconst getId = (job) => job.id == null ? Infinity : job.id;\r\nfunction flushJobs(seen) {\r\n    isFlushPending = false;\r\n    isFlushing = true;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        seen = seen || new Map();\r\n    }\r\n    flushPreFlushCbs(seen);\r\n    // Sort queue before flush.\r\n    // This ensures that:\r\n    // 1. Components are updated from parent to child. (because parent is always\r\n    //    created before the child so its render effect will have smaller\r\n    //    priority number)\r\n    // 2. If a component is unmounted during a parent component's update,\r\n    //    its update can be skipped.\r\n    // Jobs can never be null before flush starts, since they are only invalidated\r\n    // during execution of another flushed job.\r\n    queue.sort((a, b) => getId(a) - getId(b));\r\n    try {\r\n        for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {\r\n            const job = queue[flushIndex];\r\n            if (job) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    checkRecursiveUpdates(seen, job);\r\n                }\r\n                callWithErrorHandling(job, null, 14 /* SCHEDULER */);\r\n            }\r\n        }\r\n    }\r\n    finally {\r\n        flushIndex = 0;\r\n        queue.length = 0;\r\n        flushPostFlushCbs(seen);\r\n        isFlushing = false;\r\n        currentFlushPromise = null;\r\n        // some postFlushCb queued jobs!\r\n        // keep flushing until it drains.\r\n        if (queue.length || pendingPostFlushCbs.length) {\r\n            flushJobs(seen);\r\n        }\r\n    }\r\n}\r\nfunction checkRecursiveUpdates(seen, fn) {\r\n    if (!seen.has(fn)) {\r\n        seen.set(fn, 1);\r\n    }\r\n    else {\r\n        const count = seen.get(fn);\r\n        if (count > RECURSION_LIMIT) {\r\n            throw new Error(`Maximum recursive updates exceeded. ` +\r\n                `This means you have a reactive effect that is mutating its own ` +\r\n                `dependencies and thus recursively triggering itself. Possible sources ` +\r\n                `include component template, render function, updated hook or ` +\r\n                `watcher source function.`);\r\n        }\r\n        else {\r\n            seen.set(fn, count + 1);\r\n        }\r\n    }\r\n}\n\n/* eslint-disable no-restricted-globals */\r\nlet isHmrUpdating = false;\r\nconst hmrDirtyComponents = new Set();\r\n// Expose the HMR runtime on the global object\r\n// This makes it entirely tree-shakable without polluting the exports and makes\r\n// it easier to be used in toolings like vue-loader\r\n// Note: for a component to be eligible for HMR it also needs the __hmrId option\r\n// to be set so that its instances can be registered / removed.\r\nif ((process.env.NODE_ENV !== 'production') && (true )) {\r\n    const globalObject = typeof global !== 'undefined'\r\n        ? global\r\n        : typeof self !== 'undefined'\r\n            ? self\r\n            : typeof window !== 'undefined'\r\n                ? window\r\n                : {};\r\n    globalObject.__VUE_HMR_RUNTIME__ = {\r\n        createRecord: tryWrap(createRecord),\r\n        rerender: tryWrap(rerender),\r\n        reload: tryWrap(reload)\r\n    };\r\n}\r\nconst map = new Map();\r\nfunction registerHMR(instance) {\r\n    const id = instance.type.__hmrId;\r\n    let record = map.get(id);\r\n    if (!record) {\r\n        createRecord(id);\r\n        record = map.get(id);\r\n    }\r\n    record.add(instance);\r\n}\r\nfunction unregisterHMR(instance) {\r\n    map.get(instance.type.__hmrId).delete(instance);\r\n}\r\nfunction createRecord(id) {\r\n    if (map.has(id)) {\r\n        return false;\r\n    }\r\n    map.set(id, new Set());\r\n    return true;\r\n}\r\nfunction rerender(id, newRender) {\r\n    const record = map.get(id);\r\n    if (!record)\r\n        return;\r\n    // Array.from creates a snapshot which avoids the set being mutated during\r\n    // updates\r\n    Array.from(record).forEach(instance => {\r\n        if (newRender) {\r\n            instance.render = newRender;\r\n        }\r\n        instance.renderCache = [];\r\n        // this flag forces child components with slot content to update\r\n        isHmrUpdating = true;\r\n        instance.update();\r\n        isHmrUpdating = false;\r\n    });\r\n}\r\nfunction reload(id, newComp) {\r\n    const record = map.get(id);\r\n    if (!record)\r\n        return;\r\n    // Array.from creates a snapshot which avoids the set being mutated during\r\n    // updates\r\n    Array.from(record).forEach(instance => {\r\n        const comp = instance.type;\r\n        if (!hmrDirtyComponents.has(comp)) {\r\n            // 1. Update existing comp definition to match new one\r\n            newComp = isClassComponent(newComp) ? newComp.__vccOpts : newComp;\r\n            extend(comp, newComp);\r\n            for (const key in comp) {\r\n                if (!(key in newComp)) {\r\n                    delete comp[key];\r\n                }\r\n            }\r\n            // 2. Mark component dirty. This forces the renderer to replace the component\r\n            // on patch.\r\n            hmrDirtyComponents.add(comp);\r\n            // 3. Make sure to unmark the component after the reload.\r\n            queuePostFlushCb(() => {\r\n                hmrDirtyComponents.delete(comp);\r\n            });\r\n        }\r\n        if (instance.parent) {\r\n            // 4. Force the parent instance to re-render. This will cause all updated\r\n            // components to be unmounted and re-mounted. Queue the update so that we\r\n            // don't end up forcing the same parent to re-render multiple times.\r\n            queueJob(instance.parent.update);\r\n        }\r\n        else if (instance.appContext.reload) {\r\n            // root instance mounted via createApp() has a reload method\r\n            instance.appContext.reload();\r\n        }\r\n        else if (typeof window !== 'undefined') {\r\n            // root instance inside tree created via raw render(). Force reload.\r\n            window.location.reload();\r\n        }\r\n        else {\r\n            console.warn('[HMR] Root or manually mounted instance modified. Full reload required.');\r\n        }\r\n    });\r\n}\r\nfunction tryWrap(fn) {\r\n    return (id, arg) => {\r\n        try {\r\n            return fn(id, arg);\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n            console.warn(`[HMR] Something went wrong during Vue component hot-reload. ` +\r\n                `Full reload required.`);\r\n        }\r\n    };\r\n}\n\nlet devtools;\r\nfunction setDevtoolsHook(hook) {\r\n    devtools = hook;\r\n}\r\nfunction devtoolsInitApp(app, version) {\r\n    // TODO queue if devtools is undefined\r\n    if (!devtools)\r\n        return;\r\n    devtools.emit(\"app:init\" /* APP_INIT */, app, version, {\r\n        Fragment,\r\n        Text,\r\n        Comment,\r\n        Static\r\n    });\r\n}\r\nfunction devtoolsUnmountApp(app) {\r\n    if (!devtools)\r\n        return;\r\n    devtools.emit(\"app:unmount\" /* APP_UNMOUNT */, app);\r\n}\r\nconst devtoolsComponentAdded = /*#__PURE__*/ createDevtoolsComponentHook(\"component:added\" /* COMPONENT_ADDED */);\r\nconst devtoolsComponentUpdated = /*#__PURE__*/ createDevtoolsComponentHook(\"component:updated\" /* COMPONENT_UPDATED */);\r\nconst devtoolsComponentRemoved = /*#__PURE__*/ createDevtoolsComponentHook(\"component:removed\" /* COMPONENT_REMOVED */);\r\nfunction createDevtoolsComponentHook(hook) {\r\n    return (component) => {\r\n        if (!devtools)\r\n            return;\r\n        devtools.emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : undefined);\r\n    };\r\n}\r\nfunction devtoolsComponentEmit(component, event, params) {\r\n    if (!devtools)\r\n        return;\r\n    devtools.emit(\"component:emit\" /* COMPONENT_EMIT */, component.appContext.app, component, event, params);\r\n}\n\nfunction emit(instance, event, ...rawArgs) {\r\n    const props = instance.vnode.props || EMPTY_OBJ;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const { emitsOptions, propsOptions: [propsOptions] } = instance;\r\n        if (emitsOptions) {\r\n            if (!(event in emitsOptions)) {\r\n                if (!propsOptions || !(toHandlerKey(event) in propsOptions)) {\r\n                    warn(`Component emitted event \"${event}\" but it is neither declared in ` +\r\n                        `the emits option nor as an \"${toHandlerKey(event)}\" prop.`);\r\n                }\r\n            }\r\n            else {\r\n                const validator = emitsOptions[event];\r\n                if (isFunction(validator)) {\r\n                    const isValid = validator(...rawArgs);\r\n                    if (!isValid) {\r\n                        warn(`Invalid event arguments: event validation failed for event \"${event}\".`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    let args = rawArgs;\r\n    const isModelListener = event.startsWith('update:');\r\n    // for v-model update:xxx events, apply modifiers on args\r\n    const modelArg = isModelListener && event.slice(7);\r\n    if (modelArg && modelArg in props) {\r\n        const modifiersKey = `${modelArg === 'modelValue' ? 'model' : modelArg}Modifiers`;\r\n        const { number, trim } = props[modifiersKey] || EMPTY_OBJ;\r\n        if (trim) {\r\n            args = rawArgs.map(a => a.trim());\r\n        }\r\n        else if (number) {\r\n            args = rawArgs.map(toNumber);\r\n        }\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n        devtoolsComponentEmit(instance, event, args);\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const lowerCaseEvent = event.toLowerCase();\r\n        if (lowerCaseEvent !== event && props[toHandlerKey(lowerCaseEvent)]) {\r\n            warn(`Event \"${lowerCaseEvent}\" is emitted in component ` +\r\n                `${formatComponentName(instance, instance.type)} but the handler is registered for \"${event}\". ` +\r\n                `Note that HTML attributes are case-insensitive and you cannot use ` +\r\n                `v-on to listen to camelCase events when using in-DOM templates. ` +\r\n                `You should probably use \"${hyphenate(event)}\" instead of \"${event}\".`);\r\n        }\r\n    }\r\n    // convert handler name to camelCase. See issue #2249\r\n    let handlerName = toHandlerKey(camelize(event));\r\n    let handler = props[handlerName];\r\n    // for v-model update:xxx events, also trigger kebab-case equivalent\r\n    // for props passed via kebab-case\r\n    if (!handler && isModelListener) {\r\n        handlerName = toHandlerKey(hyphenate(event));\r\n        handler = props[handlerName];\r\n    }\r\n    if (handler) {\r\n        callWithAsyncErrorHandling(handler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args);\r\n    }\r\n    const onceHandler = props[handlerName + `Once`];\r\n    if (onceHandler) {\r\n        if (!instance.emitted) {\r\n            (instance.emitted = {})[handlerName] = true;\r\n        }\r\n        else if (instance.emitted[handlerName]) {\r\n            return;\r\n        }\r\n        callWithAsyncErrorHandling(onceHandler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args);\r\n    }\r\n}\r\nfunction normalizeEmitsOptions(comp, appContext, asMixin = false) {\r\n    if (!appContext.deopt && comp.__emits !== undefined) {\r\n        return comp.__emits;\r\n    }\r\n    const raw = comp.emits;\r\n    let normalized = {};\r\n    // apply mixin/extends props\r\n    let hasExtends = false;\r\n    if (__VUE_OPTIONS_API__ && !isFunction(comp)) {\r\n        const extendEmits = (raw) => {\r\n            hasExtends = true;\r\n            extend(normalized, normalizeEmitsOptions(raw, appContext, true));\r\n        };\r\n        if (!asMixin && appContext.mixins.length) {\r\n            appContext.mixins.forEach(extendEmits);\r\n        }\r\n        if (comp.extends) {\r\n            extendEmits(comp.extends);\r\n        }\r\n        if (comp.mixins) {\r\n            comp.mixins.forEach(extendEmits);\r\n        }\r\n    }\r\n    if (!raw && !hasExtends) {\r\n        return (comp.__emits = null);\r\n    }\r\n    if (isArray(raw)) {\r\n        raw.forEach(key => (normalized[key] = null));\r\n    }\r\n    else {\r\n        extend(normalized, raw);\r\n    }\r\n    return (comp.__emits = normalized);\r\n}\r\n// Check if an incoming prop key is a declared emit event listener.\r\n// e.g. With `emits: { click: null }`, props named `onClick` and `onclick` are\r\n// both considered matched listeners.\r\nfunction isEmitListener(options, key) {\r\n    if (!options || !isOn(key)) {\r\n        return false;\r\n    }\r\n    key = key.replace(/Once$/, '');\r\n    return (hasOwn(options, key[2].toLowerCase() + key.slice(3)) ||\r\n        hasOwn(options, key.slice(2)));\r\n}\n\n// mark the current rendering instance for asset resolution (e.g.\r\n// resolveComponent, resolveDirective) during render\r\nlet currentRenderingInstance = null;\r\nfunction setCurrentRenderingInstance(instance) {\r\n    currentRenderingInstance = instance;\r\n}\r\n// dev only flag to track whether $attrs was used during render.\r\n// If $attrs was used during render then the warning for failed attrs\r\n// fallthrough can be suppressed.\r\nlet accessedAttrs = false;\r\nfunction markAttrsAccessed() {\r\n    accessedAttrs = true;\r\n}\r\nfunction renderComponentRoot(instance) {\r\n    const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit, render, renderCache, data, setupState, ctx } = instance;\r\n    let result;\r\n    currentRenderingInstance = instance;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        accessedAttrs = false;\r\n    }\r\n    try {\r\n        let fallthroughAttrs;\r\n        if (vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */) {\r\n            // withProxy is a proxy with a different `has` trap only for\r\n            // runtime-compiled render functions using `with` block.\r\n            const proxyToUse = withProxy || proxy;\r\n            result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));\r\n            fallthroughAttrs = attrs;\r\n        }\r\n        else {\r\n            // functional\r\n            const render = Component;\r\n            // in dev, mark attrs accessed if optional props (attrs === props)\r\n            if ((process.env.NODE_ENV !== 'production') && attrs === props) {\r\n                markAttrsAccessed();\r\n            }\r\n            result = normalizeVNode(render.length > 1\r\n                ? render(props, (process.env.NODE_ENV !== 'production')\r\n                    ? {\r\n                        get attrs() {\r\n                            markAttrsAccessed();\r\n                            return attrs;\r\n                        },\r\n                        slots,\r\n                        emit\r\n                    }\r\n                    : { attrs, slots, emit })\r\n                : render(props, null /* we know it doesn't need it */));\r\n            fallthroughAttrs = Component.props\r\n                ? attrs\r\n                : getFunctionalFallthrough(attrs);\r\n        }\r\n        // attr merging\r\n        // in dev mode, comments are preserved, and it's possible for a template\r\n        // to have comments along side the root element which makes it a fragment\r\n        let root = result;\r\n        let setRoot = undefined;\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            ;\r\n            [root, setRoot] = getChildRoot(result);\r\n        }\r\n        if (Component.inheritAttrs !== false && fallthroughAttrs) {\r\n            const keys = Object.keys(fallthroughAttrs);\r\n            const { shapeFlag } = root;\r\n            if (keys.length) {\r\n                if (shapeFlag & 1 /* ELEMENT */ ||\r\n                    shapeFlag & 6 /* COMPONENT */) {\r\n                    if (propsOptions && keys.some(isModelListener)) {\r\n                        // If a v-model listener (onUpdate:xxx) has a corresponding declared\r\n                        // prop, it indicates this component expects to handle v-model and\r\n                        // it should not fallthrough.\r\n                        // related: #1543, #1643, #1989\r\n                        fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);\r\n                    }\r\n                    root = cloneVNode(root, fallthroughAttrs);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production') && !accessedAttrs && root.type !== Comment) {\r\n                    const allAttrs = Object.keys(attrs);\r\n                    const eventAttrs = [];\r\n                    const extraAttrs = [];\r\n                    for (let i = 0, l = allAttrs.length; i < l; i++) {\r\n                        const key = allAttrs[i];\r\n                        if (isOn(key)) {\r\n                            // ignore v-model handlers when they fail to fallthrough\r\n                            if (!isModelListener(key)) {\r\n                                // remove `on`, lowercase first letter to reflect event casing\r\n                                // accurately\r\n                                eventAttrs.push(key[2].toLowerCase() + key.slice(3));\r\n                            }\r\n                        }\r\n                        else {\r\n                            extraAttrs.push(key);\r\n                        }\r\n                    }\r\n                    if (extraAttrs.length) {\r\n                        warn(`Extraneous non-props attributes (` +\r\n                            `${extraAttrs.join(', ')}) ` +\r\n                            `were passed to component but could not be automatically inherited ` +\r\n                            `because component renders fragment or text root nodes.`);\r\n                    }\r\n                    if (eventAttrs.length) {\r\n                        warn(`Extraneous non-emits event listeners (` +\r\n                            `${eventAttrs.join(', ')}) ` +\r\n                            `were passed to component but could not be automatically inherited ` +\r\n                            `because component renders fragment or text root nodes. ` +\r\n                            `If the listener is intended to be a component custom event listener only, ` +\r\n                            `declare it using the \"emits\" option.`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // inherit directives\r\n        if (vnode.dirs) {\r\n            if ((process.env.NODE_ENV !== 'production') && !isElementRoot(root)) {\r\n                warn(`Runtime directive used on component with non-element root node. ` +\r\n                    `The directives will not function as intended.`);\r\n            }\r\n            root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;\r\n        }\r\n        // inherit transition data\r\n        if (vnode.transition) {\r\n            if ((process.env.NODE_ENV !== 'production') && !isElementRoot(root)) {\r\n                warn(`Component inside <Transition> renders non-element root node ` +\r\n                    `that cannot be animated.`);\r\n            }\r\n            root.transition = vnode.transition;\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && setRoot) {\r\n            setRoot(root);\r\n        }\r\n        else {\r\n            result = root;\r\n        }\r\n    }\r\n    catch (err) {\r\n        handleError(err, instance, 1 /* RENDER_FUNCTION */);\r\n        result = createVNode(Comment);\r\n    }\r\n    currentRenderingInstance = null;\r\n    return result;\r\n}\r\n/**\r\n * dev only\r\n * In dev mode, template root level comments are rendered, which turns the\r\n * template into a fragment root, but we need to locate the single element\r\n * root for attrs and scope id processing.\r\n */\r\nconst getChildRoot = (vnode) => {\r\n    if (vnode.type !== Fragment) {\r\n        return [vnode, undefined];\r\n    }\r\n    const rawChildren = vnode.children;\r\n    const dynamicChildren = vnode.dynamicChildren;\r\n    const childRoot = filterSingleRoot(rawChildren);\r\n    if (!childRoot) {\r\n        return [vnode, undefined];\r\n    }\r\n    const index = rawChildren.indexOf(childRoot);\r\n    const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;\r\n    const setRoot = (updatedRoot) => {\r\n        rawChildren[index] = updatedRoot;\r\n        if (dynamicChildren) {\r\n            if (dynamicIndex > -1) {\r\n                dynamicChildren[dynamicIndex] = updatedRoot;\r\n            }\r\n            else if (updatedRoot.patchFlag > 0) {\r\n                vnode.dynamicChildren = [...dynamicChildren, updatedRoot];\r\n            }\r\n        }\r\n    };\r\n    return [normalizeVNode(childRoot), setRoot];\r\n};\r\n/**\r\n * dev only\r\n */\r\nfunction filterSingleRoot(children) {\r\n    const filtered = children.filter(child => {\r\n        return !(isVNode(child) &&\r\n            child.type === Comment &&\r\n            child.children !== 'v-if');\r\n    });\r\n    return filtered.length === 1 && isVNode(filtered[0]) ? filtered[0] : null;\r\n}\r\nconst getFunctionalFallthrough = (attrs) => {\r\n    let res;\r\n    for (const key in attrs) {\r\n        if (key === 'class' || key === 'style' || isOn(key)) {\r\n            (res || (res = {}))[key] = attrs[key];\r\n        }\r\n    }\r\n    return res;\r\n};\r\nconst filterModelListeners = (attrs, props) => {\r\n    const res = {};\r\n    for (const key in attrs) {\r\n        if (!isModelListener(key) || !(key.slice(9) in props)) {\r\n            res[key] = attrs[key];\r\n        }\r\n    }\r\n    return res;\r\n};\r\nconst isElementRoot = (vnode) => {\r\n    return (vnode.shapeFlag & 6 /* COMPONENT */ ||\r\n        vnode.shapeFlag & 1 /* ELEMENT */ ||\r\n        vnode.type === Comment // potential v-if branch switch\r\n    );\r\n};\r\nfunction shouldUpdateComponent(prevVNode, nextVNode, optimized) {\r\n    const { props: prevProps, children: prevChildren, component } = prevVNode;\r\n    const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;\r\n    const emits = component.emitsOptions;\r\n    // Parent component's render function was hot-updated. Since this may have\r\n    // caused the child component's slots content to have changed, we need to\r\n    // force the child to update as well.\r\n    if ((process.env.NODE_ENV !== 'production') && (prevChildren || nextChildren) && isHmrUpdating) {\r\n        return true;\r\n    }\r\n    // force child update for runtime directive or transition on component vnode.\r\n    if (nextVNode.dirs || nextVNode.transition) {\r\n        return true;\r\n    }\r\n    if (optimized && patchFlag > 0) {\r\n        if (patchFlag & 1024 /* DYNAMIC_SLOTS */) {\r\n            // slot content that references values that might have changed,\r\n            // e.g. in a v-for\r\n            return true;\r\n        }\r\n        if (patchFlag & 16 /* FULL_PROPS */) {\r\n            if (!prevProps) {\r\n                return !!nextProps;\r\n            }\r\n            // presence of this flag indicates props are always non-null\r\n            return hasPropsChanged(prevProps, nextProps, emits);\r\n        }\r\n        else if (patchFlag & 8 /* PROPS */) {\r\n            const dynamicProps = nextVNode.dynamicProps;\r\n            for (let i = 0; i < dynamicProps.length; i++) {\r\n                const key = dynamicProps[i];\r\n                if (nextProps[key] !== prevProps[key] &&\r\n                    !isEmitListener(emits, key)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // this path is only taken by manually written render functions\r\n        // so presence of any children leads to a forced update\r\n        if (prevChildren || nextChildren) {\r\n            if (!nextChildren || !nextChildren.$stable) {\r\n                return true;\r\n            }\r\n        }\r\n        if (prevProps === nextProps) {\r\n            return false;\r\n        }\r\n        if (!prevProps) {\r\n            return !!nextProps;\r\n        }\r\n        if (!nextProps) {\r\n            return true;\r\n        }\r\n        return hasPropsChanged(prevProps, nextProps, emits);\r\n    }\r\n    return false;\r\n}\r\nfunction hasPropsChanged(prevProps, nextProps, emitsOptions) {\r\n    const nextKeys = Object.keys(nextProps);\r\n    if (nextKeys.length !== Object.keys(prevProps).length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < nextKeys.length; i++) {\r\n        const key = nextKeys[i];\r\n        if (nextProps[key] !== prevProps[key] &&\r\n            !isEmitListener(emitsOptions, key)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction updateHOCHostEl({ vnode, parent }, el // HostNode\r\n) {\r\n    while (parent && parent.subTree === vnode) {\r\n        (vnode = parent.vnode).el = el;\r\n        parent = parent.parent;\r\n    }\r\n}\n\nconst isSuspense = (type) => type.__isSuspense;\r\n// Suspense exposes a component-like API, and is treated like a component\r\n// in the compiler, but internally it's a special built-in type that hooks\r\n// directly into the renderer.\r\nconst SuspenseImpl = {\r\n    // In order to make Suspense tree-shakable, we need to avoid importing it\r\n    // directly in the renderer. The renderer checks for the __isSuspense flag\r\n    // on a vnode's type and calls the `process` method, passing in renderer\r\n    // internals.\r\n    __isSuspense: true,\r\n    process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, \r\n    // platform-specific impl passed from renderer\r\n    rendererInternals) {\r\n        if (n1 == null) {\r\n            mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, rendererInternals);\r\n        }\r\n        else {\r\n            patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, rendererInternals);\r\n        }\r\n    },\r\n    hydrate: hydrateSuspense,\r\n    create: createSuspenseBoundary\r\n};\r\n// Force-casted public typing for h and TSX props inference\r\nconst Suspense = ( SuspenseImpl\r\n    );\r\nfunction mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, optimized, rendererInternals) {\r\n    const { p: patch, o: { createElement } } = rendererInternals;\r\n    const hiddenContainer = createElement('div');\r\n    const suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, optimized, rendererInternals));\r\n    // start mounting the content subtree in an off-dom container\r\n    patch(null, (suspense.pendingBranch = vnode.ssContent), hiddenContainer, null, parentComponent, suspense, isSVG);\r\n    // now check if we have encountered any async deps\r\n    if (suspense.deps > 0) {\r\n        // has async\r\n        // mount the fallback tree\r\n        patch(null, vnode.ssFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n        isSVG);\r\n        setActiveBranch(suspense, vnode.ssFallback);\r\n    }\r\n    else {\r\n        // Suspense has no async deps. Just resolve.\r\n        suspense.resolve();\r\n    }\r\n}\r\nfunction patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, { p: patch, um: unmount, o: { createElement } }) {\r\n    const suspense = (n2.suspense = n1.suspense);\r\n    suspense.vnode = n2;\r\n    n2.el = n1.el;\r\n    const newBranch = n2.ssContent;\r\n    const newFallback = n2.ssFallback;\r\n    const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;\r\n    if (pendingBranch) {\r\n        suspense.pendingBranch = newBranch;\r\n        if (isSameVNodeType(newBranch, pendingBranch)) {\r\n            // same root type but content may have changed.\r\n            patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG);\r\n            if (suspense.deps <= 0) {\r\n                suspense.resolve();\r\n            }\r\n            else if (isInFallback) {\r\n                patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                isSVG);\r\n                setActiveBranch(suspense, newFallback);\r\n            }\r\n        }\r\n        else {\r\n            // toggled before pending tree is resolved\r\n            suspense.pendingId++;\r\n            if (isHydrating) {\r\n                // if toggled before hydration is finished, the current DOM tree is\r\n                // no longer valid. set it as the active branch so it will be unmounted\r\n                // when resolved\r\n                suspense.isHydrating = false;\r\n                suspense.activeBranch = pendingBranch;\r\n            }\r\n            else {\r\n                unmount(pendingBranch, parentComponent, suspense);\r\n            }\r\n            // increment pending ID. this is used to invalidate async callbacks\r\n            // reset suspense state\r\n            suspense.deps = 0;\r\n            // discard effects from pending branch\r\n            suspense.effects.length = 0;\r\n            // discard previous container\r\n            suspense.hiddenContainer = createElement('div');\r\n            if (isInFallback) {\r\n                // already in fallback state\r\n                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG);\r\n                if (suspense.deps <= 0) {\r\n                    suspense.resolve();\r\n                }\r\n                else {\r\n                    patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                    isSVG);\r\n                    setActiveBranch(suspense, newFallback);\r\n                }\r\n            }\r\n            else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {\r\n                // toggled \"back\" to current active branch\r\n                patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG);\r\n                // force resolve\r\n                suspense.resolve(true);\r\n            }\r\n            else {\r\n                // switched to a 3rd branch\r\n                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG);\r\n                if (suspense.deps <= 0) {\r\n                    suspense.resolve();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {\r\n            // root did not change, just normal patch\r\n            patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG);\r\n            setActiveBranch(suspense, newBranch);\r\n        }\r\n        else {\r\n            // root node toggled\r\n            // invoke @pending event\r\n            const onPending = n2.props && n2.props.onPending;\r\n            if (isFunction(onPending)) {\r\n                onPending();\r\n            }\r\n            // mount pending branch in off-dom container\r\n            suspense.pendingBranch = newBranch;\r\n            suspense.pendingId++;\r\n            patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG);\r\n            if (suspense.deps <= 0) {\r\n                // incoming branch has no async deps, resolve now.\r\n                suspense.resolve();\r\n            }\r\n            else {\r\n                const { timeout, pendingId } = suspense;\r\n                if (timeout > 0) {\r\n                    setTimeout(() => {\r\n                        if (suspense.pendingId === pendingId) {\r\n                            suspense.fallback(newFallback);\r\n                        }\r\n                    }, timeout);\r\n                }\r\n                else if (timeout === 0) {\r\n                    suspense.fallback(newFallback);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nlet hasWarned = false;\r\nfunction createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, optimized, rendererInternals, isHydrating = false) {\r\n    /* istanbul ignore if */\r\n    if ((process.env.NODE_ENV !== 'production') && !false && !hasWarned) {\r\n        hasWarned = true;\r\n        // @ts-ignore `console.info` cannot be null error\r\n        console[console.info ? 'info' : 'log'](`<Suspense> is an experimental feature and its API will likely change.`);\r\n    }\r\n    const { p: patch, m: move, um: unmount, n: next, o: { parentNode, remove } } = rendererInternals;\r\n    const timeout = toNumber(vnode.props && vnode.props.timeout);\r\n    const suspense = {\r\n        vnode,\r\n        parent,\r\n        parentComponent,\r\n        isSVG,\r\n        container,\r\n        hiddenContainer,\r\n        anchor,\r\n        deps: 0,\r\n        pendingId: 0,\r\n        timeout: typeof timeout === 'number' ? timeout : -1,\r\n        activeBranch: null,\r\n        pendingBranch: null,\r\n        isInFallback: true,\r\n        isHydrating,\r\n        isUnmounted: false,\r\n        effects: [],\r\n        resolve(resume = false) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                if (!resume && !suspense.pendingBranch) {\r\n                    throw new Error(`suspense.resolve() is called without a pending branch.`);\r\n                }\r\n                if (suspense.isUnmounted) {\r\n                    throw new Error(`suspense.resolve() is called on an already unmounted suspense boundary.`);\r\n                }\r\n            }\r\n            const { vnode, activeBranch, pendingBranch, pendingId, effects, parentComponent, container } = suspense;\r\n            if (suspense.isHydrating) {\r\n                suspense.isHydrating = false;\r\n            }\r\n            else if (!resume) {\r\n                const delayEnter = activeBranch &&\r\n                    pendingBranch.transition &&\r\n                    pendingBranch.transition.mode === 'out-in';\r\n                if (delayEnter) {\r\n                    activeBranch.transition.afterLeave = () => {\r\n                        if (pendingId === suspense.pendingId) {\r\n                            move(pendingBranch, container, anchor, 0 /* ENTER */);\r\n                        }\r\n                    };\r\n                }\r\n                // this is initial anchor on mount\r\n                let { anchor } = suspense;\r\n                // unmount current active tree\r\n                if (activeBranch) {\r\n                    // if the fallback tree was mounted, it may have been moved\r\n                    // as part of a parent suspense. get the latest anchor for insertion\r\n                    anchor = next(activeBranch);\r\n                    unmount(activeBranch, parentComponent, suspense, true);\r\n                }\r\n                if (!delayEnter) {\r\n                    // move content from off-dom container to actual container\r\n                    move(pendingBranch, container, anchor, 0 /* ENTER */);\r\n                }\r\n            }\r\n            setActiveBranch(suspense, pendingBranch);\r\n            suspense.pendingBranch = null;\r\n            suspense.isInFallback = false;\r\n            // flush buffered effects\r\n            // check if there is a pending parent suspense\r\n            let parent = suspense.parent;\r\n            let hasUnresolvedAncestor = false;\r\n            while (parent) {\r\n                if (parent.pendingBranch) {\r\n                    // found a pending parent suspense, merge buffered post jobs\r\n                    // into that parent\r\n                    parent.effects.push(...effects);\r\n                    hasUnresolvedAncestor = true;\r\n                    break;\r\n                }\r\n                parent = parent.parent;\r\n            }\r\n            // no pending parent suspense, flush all jobs\r\n            if (!hasUnresolvedAncestor) {\r\n                queuePostFlushCb(effects);\r\n            }\r\n            suspense.effects = [];\r\n            // invoke @resolve event\r\n            const onResolve = vnode.props && vnode.props.onResolve;\r\n            if (isFunction(onResolve)) {\r\n                onResolve();\r\n            }\r\n        },\r\n        fallback(fallbackVNode) {\r\n            if (!suspense.pendingBranch) {\r\n                return;\r\n            }\r\n            const { vnode, activeBranch, parentComponent, container, isSVG } = suspense;\r\n            // invoke @fallback event\r\n            const onFallback = vnode.props && vnode.props.onFallback;\r\n            if (isFunction(onFallback)) {\r\n                onFallback();\r\n            }\r\n            const anchor = next(activeBranch);\r\n            const mountFallback = () => {\r\n                if (!suspense.isInFallback) {\r\n                    return;\r\n                }\r\n                // mount the fallback tree\r\n                patch(null, fallbackVNode, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                isSVG);\r\n                setActiveBranch(suspense, fallbackVNode);\r\n            };\r\n            const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === 'out-in';\r\n            if (delayEnter) {\r\n                activeBranch.transition.afterLeave = mountFallback;\r\n            }\r\n            // unmount current active branch\r\n            unmount(activeBranch, parentComponent, null, // no suspense so unmount hooks fire now\r\n            true // shouldRemove\r\n            );\r\n            suspense.isInFallback = true;\r\n            if (!delayEnter) {\r\n                mountFallback();\r\n            }\r\n        },\r\n        move(container, anchor, type) {\r\n            suspense.activeBranch &&\r\n                move(suspense.activeBranch, container, anchor, type);\r\n            suspense.container = container;\r\n        },\r\n        next() {\r\n            return suspense.activeBranch && next(suspense.activeBranch);\r\n        },\r\n        registerDep(instance, setupRenderEffect) {\r\n            if (!suspense.pendingBranch) {\r\n                return;\r\n            }\r\n            const hydratedEl = instance.vnode.el;\r\n            suspense.deps++;\r\n            instance\r\n                .asyncDep.catch(err => {\r\n                handleError(err, instance, 0 /* SETUP_FUNCTION */);\r\n            })\r\n                .then(asyncSetupResult => {\r\n                // retry when the setup() promise resolves.\r\n                // component may have been unmounted before resolve.\r\n                if (instance.isUnmounted ||\r\n                    suspense.isUnmounted ||\r\n                    suspense.pendingId !== instance.suspenseId) {\r\n                    return;\r\n                }\r\n                suspense.deps--;\r\n                // retry from this component\r\n                instance.asyncResolved = true;\r\n                const { vnode } = instance;\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    pushWarningContext(vnode);\r\n                }\r\n                handleSetupResult(instance, asyncSetupResult);\r\n                if (hydratedEl) {\r\n                    // vnode may have been replaced if an update happened before the\r\n                    // async dep is resolved.\r\n                    vnode.el = hydratedEl;\r\n                }\r\n                const placeholder = !hydratedEl && instance.subTree.el;\r\n                setupRenderEffect(instance, vnode, \r\n                // component may have been moved before resolve.\r\n                // if this is not a hydration, instance.subTree will be the comment\r\n                // placeholder.\r\n                parentNode(hydratedEl || instance.subTree.el), \r\n                // anchor will not be used if this is hydration, so only need to\r\n                // consider the comment placeholder case.\r\n                hydratedEl ? null : next(instance.subTree), suspense, isSVG, optimized);\r\n                if (placeholder) {\r\n                    remove(placeholder);\r\n                }\r\n                updateHOCHostEl(instance, vnode.el);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    popWarningContext();\r\n                }\r\n                if (suspense.deps === 0) {\r\n                    suspense.resolve();\r\n                }\r\n            });\r\n        },\r\n        unmount(parentSuspense, doRemove) {\r\n            suspense.isUnmounted = true;\r\n            if (suspense.activeBranch) {\r\n                unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);\r\n            }\r\n            if (suspense.pendingBranch) {\r\n                unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);\r\n            }\r\n        }\r\n    };\r\n    return suspense;\r\n}\r\nfunction hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, optimized, rendererInternals, hydrateNode) {\r\n    /* eslint-disable no-restricted-globals */\r\n    const suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement('div'), null, isSVG, optimized, rendererInternals, true /* hydrating */));\r\n    // there are two possible scenarios for server-rendered suspense:\r\n    // - success: ssr content should be fully resolved\r\n    // - failure: ssr content should be the fallback branch.\r\n    // however, on the client we don't really know if it has failed or not\r\n    // attempt to hydrate the DOM assuming it has succeeded, but we still\r\n    // need to construct a suspense boundary first\r\n    const result = hydrateNode(node, (suspense.pendingBranch = vnode.ssContent), parentComponent, suspense, optimized);\r\n    if (suspense.deps === 0) {\r\n        suspense.resolve();\r\n    }\r\n    return result;\r\n    /* eslint-enable no-restricted-globals */\r\n}\r\nfunction normalizeSuspenseChildren(vnode) {\r\n    const { shapeFlag, children } = vnode;\r\n    let content;\r\n    let fallback;\r\n    if (shapeFlag & 32 /* SLOTS_CHILDREN */) {\r\n        content = normalizeSuspenseSlot(children.default);\r\n        fallback = normalizeSuspenseSlot(children.fallback);\r\n    }\r\n    else {\r\n        content = normalizeSuspenseSlot(children);\r\n        fallback = normalizeVNode(null);\r\n    }\r\n    return {\r\n        content,\r\n        fallback\r\n    };\r\n}\r\nfunction normalizeSuspenseSlot(s) {\r\n    if (isFunction(s)) {\r\n        s = s();\r\n    }\r\n    if (isArray(s)) {\r\n        const singleChild = filterSingleRoot(s);\r\n        if ((process.env.NODE_ENV !== 'production') && !singleChild) {\r\n            warn(`<Suspense> slots expect a single root node.`);\r\n        }\r\n        s = singleChild;\r\n    }\r\n    return normalizeVNode(s);\r\n}\r\nfunction queueEffectWithSuspense(fn, suspense) {\r\n    if (suspense && suspense.pendingBranch) {\r\n        if (isArray(fn)) {\r\n            suspense.effects.push(...fn);\r\n        }\r\n        else {\r\n            suspense.effects.push(fn);\r\n        }\r\n    }\r\n    else {\r\n        queuePostFlushCb(fn);\r\n    }\r\n}\r\nfunction setActiveBranch(suspense, branch) {\r\n    suspense.activeBranch = branch;\r\n    const { vnode, parentComponent } = suspense;\r\n    const el = (vnode.el = branch.el);\r\n    // in case suspense is the root node of a component,\r\n    // recursively update the HOC el\r\n    if (parentComponent && parentComponent.subTree === vnode) {\r\n        parentComponent.vnode.el = el;\r\n        updateHOCHostEl(parentComponent, el);\r\n    }\r\n}\n\nlet isRenderingCompiledSlot = 0;\r\nconst setCompiledSlotRendering = (n) => (isRenderingCompiledSlot += n);\r\n/**\r\n * Compiler runtime helper for rendering `<slot/>`\r\n * @private\r\n */\r\nfunction renderSlot(slots, name, props = {}, \r\n// this is not a user-facing function, so the fallback is always generated by\r\n// the compiler and guaranteed to be a function returning an array\r\nfallback) {\r\n    let slot = slots[name];\r\n    if ((process.env.NODE_ENV !== 'production') && slot && slot.length > 1) {\r\n        warn(`SSR-optimized slot function detected in a non-SSR-optimized render ` +\r\n            `function. You need to mark this component with $dynamic-slots in the ` +\r\n            `parent template.`);\r\n        slot = () => [];\r\n    }\r\n    // a compiled slot disables block tracking by default to avoid manual\r\n    // invocation interfering with template-based block tracking, but in\r\n    // `renderSlot` we can be sure that it's template-based so we can force\r\n    // enable it.\r\n    isRenderingCompiledSlot++;\r\n    const rendered = (openBlock(),\r\n        createBlock(Fragment, { key: props.key }, slot ? slot(props) : fallback ? fallback() : [], slots._ === 1 /* STABLE */\r\n            ? 64 /* STABLE_FRAGMENT */\r\n            : -2 /* BAIL */));\r\n    isRenderingCompiledSlot--;\r\n    return rendered;\r\n}\n\n/**\r\n * Wrap a slot function to memoize current rendering instance\r\n * @private\r\n */\r\nfunction withCtx(fn, ctx = currentRenderingInstance) {\r\n    if (!ctx)\r\n        return fn;\r\n    const renderFnWithContext = (...args) => {\r\n        // If a user calls a compiled slot inside a template expression (#1745), it\r\n        // can mess up block tracking, so by default we need to push a null block to\r\n        // avoid that. This isn't necessary if rendering a compiled `<slot>`.\r\n        if (!isRenderingCompiledSlot) {\r\n            openBlock(true /* null block that disables tracking */);\r\n        }\r\n        const owner = currentRenderingInstance;\r\n        setCurrentRenderingInstance(ctx);\r\n        const res = fn(...args);\r\n        setCurrentRenderingInstance(owner);\r\n        if (!isRenderingCompiledSlot) {\r\n            closeBlock();\r\n        }\r\n        return res;\r\n    };\r\n    renderFnWithContext._c = true;\r\n    return renderFnWithContext;\r\n}\n\n// SFC scoped style ID management.\r\nlet currentScopeId = null;\r\nconst scopeIdStack = [];\r\n/**\r\n * @private\r\n */\r\nfunction pushScopeId(id) {\r\n    scopeIdStack.push((currentScopeId = id));\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction popScopeId() {\r\n    scopeIdStack.pop();\r\n    currentScopeId = scopeIdStack[scopeIdStack.length - 1] || null;\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction withScopeId(id) {\r\n    return ((fn) => withCtx(function () {\r\n        pushScopeId(id);\r\n        const res = fn.apply(this, arguments);\r\n        popScopeId();\r\n        return res;\r\n    }));\r\n}\n\nfunction initProps(instance, rawProps, isStateful, // result of bitwise flag comparison\r\nisSSR = false) {\r\n    const props = {};\r\n    const attrs = {};\r\n    def(attrs, InternalObjectKey, 1);\r\n    setFullProps(instance, rawProps, props, attrs);\r\n    // validation\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        validateProps(props, instance);\r\n    }\r\n    if (isStateful) {\r\n        // stateful\r\n        instance.props = isSSR ? props : shallowReactive(props);\r\n    }\r\n    else {\r\n        if (!instance.type.props) {\r\n            // functional w/ optional props, props === attrs\r\n            instance.props = attrs;\r\n        }\r\n        else {\r\n            // functional w/ declared props\r\n            instance.props = props;\r\n        }\r\n    }\r\n    instance.attrs = attrs;\r\n}\r\nfunction updateProps(instance, rawProps, rawPrevProps, optimized) {\r\n    const { props, attrs, vnode: { patchFlag } } = instance;\r\n    const rawCurrentProps = toRaw(props);\r\n    const [options] = instance.propsOptions;\r\n    if (\r\n    // always force full diff in dev\r\n    // - #1942 if hmr is enabled with sfc component\r\n    // - vite#872 non-sfc component used by sfc component\r\n    !((process.env.NODE_ENV !== 'production') &&\r\n        (instance.type.__hmrId ||\r\n            (instance.parent && instance.parent.type.__hmrId))) &&\r\n        (optimized || patchFlag > 0) &&\r\n        !(patchFlag & 16 /* FULL_PROPS */)) {\r\n        if (patchFlag & 8 /* PROPS */) {\r\n            // Compiler-generated props & no keys change, just set the updated\r\n            // the props.\r\n            const propsToUpdate = instance.vnode.dynamicProps;\r\n            for (let i = 0; i < propsToUpdate.length; i++) {\r\n                const key = propsToUpdate[i];\r\n                // PROPS flag guarantees rawProps to be non-null\r\n                const value = rawProps[key];\r\n                if (options) {\r\n                    // attr / props separation was done on init and will be consistent\r\n                    // in this code path, so just check if attrs have it.\r\n                    if (hasOwn(attrs, key)) {\r\n                        attrs[key] = value;\r\n                    }\r\n                    else {\r\n                        const camelizedKey = camelize(key);\r\n                        props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance);\r\n                    }\r\n                }\r\n                else {\r\n                    attrs[key] = value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // full props update.\r\n        setFullProps(instance, rawProps, props, attrs);\r\n        // in case of dynamic props, check if we need to delete keys from\r\n        // the props object\r\n        let kebabKey;\r\n        for (const key in rawCurrentProps) {\r\n            if (!rawProps ||\r\n                // for camelCase\r\n                (!hasOwn(rawProps, key) &&\r\n                    // it's possible the original props was passed in as kebab-case\r\n                    // and converted to camelCase (#955)\r\n                    ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey)))) {\r\n                if (options) {\r\n                    if (rawPrevProps &&\r\n                        // for camelCase\r\n                        (rawPrevProps[key] !== undefined ||\r\n                            // for kebab-case\r\n                            rawPrevProps[kebabKey] !== undefined)) {\r\n                        props[key] = resolvePropValue(options, rawProps || EMPTY_OBJ, key, undefined, instance);\r\n                    }\r\n                }\r\n                else {\r\n                    delete props[key];\r\n                }\r\n            }\r\n        }\r\n        // in the case of functional component w/o props declaration, props and\r\n        // attrs point to the same object so it should already have been updated.\r\n        if (attrs !== rawCurrentProps) {\r\n            for (const key in attrs) {\r\n                if (!rawProps || !hasOwn(rawProps, key)) {\r\n                    delete attrs[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // trigger updates for $attrs in case it's used in component slots\r\n    trigger(instance, \"set\" /* SET */, '$attrs');\r\n    if ((process.env.NODE_ENV !== 'production') && rawProps) {\r\n        validateProps(props, instance);\r\n    }\r\n}\r\nfunction setFullProps(instance, rawProps, props, attrs) {\r\n    const [options, needCastKeys] = instance.propsOptions;\r\n    if (rawProps) {\r\n        for (const key in rawProps) {\r\n            const value = rawProps[key];\r\n            // key, ref are reserved and never passed down\r\n            if (isReservedProp(key)) {\r\n                continue;\r\n            }\r\n            // prop option names are camelized during normalization, so to support\r\n            // kebab -> camel conversion here we need to camelize the key.\r\n            let camelKey;\r\n            if (options && hasOwn(options, (camelKey = camelize(key)))) {\r\n                props[camelKey] = value;\r\n            }\r\n            else if (!isEmitListener(instance.emitsOptions, key)) {\r\n                // Any non-declared (either as a prop or an emitted event) props are put\r\n                // into a separate `attrs` object for spreading. Make sure to preserve\r\n                // original key casing\r\n                attrs[key] = value;\r\n            }\r\n        }\r\n    }\r\n    if (needCastKeys) {\r\n        const rawCurrentProps = toRaw(props);\r\n        for (let i = 0; i < needCastKeys.length; i++) {\r\n            const key = needCastKeys[i];\r\n            props[key] = resolvePropValue(options, rawCurrentProps, key, rawCurrentProps[key], instance);\r\n        }\r\n    }\r\n}\r\nfunction resolvePropValue(options, props, key, value, instance) {\r\n    const opt = options[key];\r\n    if (opt != null) {\r\n        const hasDefault = hasOwn(opt, 'default');\r\n        // default values\r\n        if (hasDefault && value === undefined) {\r\n            const defaultValue = opt.default;\r\n            if (opt.type !== Function && isFunction(defaultValue)) {\r\n                setCurrentInstance(instance);\r\n                value = defaultValue(props);\r\n                setCurrentInstance(null);\r\n            }\r\n            else {\r\n                value = defaultValue;\r\n            }\r\n        }\r\n        // boolean casting\r\n        if (opt[0 /* shouldCast */]) {\r\n            if (!hasOwn(props, key) && !hasDefault) {\r\n                value = false;\r\n            }\r\n            else if (opt[1 /* shouldCastTrue */] &&\r\n                (value === '' || value === hyphenate(key))) {\r\n                value = true;\r\n            }\r\n        }\r\n    }\r\n    return value;\r\n}\r\nfunction normalizePropsOptions(comp, appContext, asMixin = false) {\r\n    if (!appContext.deopt && comp.__props) {\r\n        return comp.__props;\r\n    }\r\n    const raw = comp.props;\r\n    const normalized = {};\r\n    const needCastKeys = [];\r\n    // apply mixin/extends props\r\n    let hasExtends = false;\r\n    if (__VUE_OPTIONS_API__ && !isFunction(comp)) {\r\n        const extendProps = (raw) => {\r\n            hasExtends = true;\r\n            const [props, keys] = normalizePropsOptions(raw, appContext, true);\r\n            extend(normalized, props);\r\n            if (keys)\r\n                needCastKeys.push(...keys);\r\n        };\r\n        if (!asMixin && appContext.mixins.length) {\r\n            appContext.mixins.forEach(extendProps);\r\n        }\r\n        if (comp.extends) {\r\n            extendProps(comp.extends);\r\n        }\r\n        if (comp.mixins) {\r\n            comp.mixins.forEach(extendProps);\r\n        }\r\n    }\r\n    if (!raw && !hasExtends) {\r\n        return (comp.__props = EMPTY_ARR);\r\n    }\r\n    if (isArray(raw)) {\r\n        for (let i = 0; i < raw.length; i++) {\r\n            if ((process.env.NODE_ENV !== 'production') && !isString(raw[i])) {\r\n                warn(`props must be strings when using array syntax.`, raw[i]);\r\n            }\r\n            const normalizedKey = camelize(raw[i]);\r\n            if (validatePropName(normalizedKey)) {\r\n                normalized[normalizedKey] = EMPTY_OBJ;\r\n            }\r\n        }\r\n    }\r\n    else if (raw) {\r\n        if ((process.env.NODE_ENV !== 'production') && !isObject(raw)) {\r\n            warn(`invalid props options`, raw);\r\n        }\r\n        for (const key in raw) {\r\n            const normalizedKey = camelize(key);\r\n            if (validatePropName(normalizedKey)) {\r\n                const opt = raw[key];\r\n                const prop = (normalized[normalizedKey] =\r\n                    isArray(opt) || isFunction(opt) ? { type: opt } : opt);\r\n                if (prop) {\r\n                    const booleanIndex = getTypeIndex(Boolean, prop.type);\r\n                    const stringIndex = getTypeIndex(String, prop.type);\r\n                    prop[0 /* shouldCast */] = booleanIndex > -1;\r\n                    prop[1 /* shouldCastTrue */] =\r\n                        stringIndex < 0 || booleanIndex < stringIndex;\r\n                    // if the prop needs boolean casting or default value\r\n                    if (booleanIndex > -1 || hasOwn(prop, 'default')) {\r\n                        needCastKeys.push(normalizedKey);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return (comp.__props = [normalized, needCastKeys]);\r\n}\r\nfunction validatePropName(key) {\r\n    if (key[0] !== '$') {\r\n        return true;\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`Invalid prop name: \"${key}\" is a reserved property.`);\r\n    }\r\n    return false;\r\n}\r\n// use function string name to check type constructors\r\n// so that it works across vms / iframes.\r\nfunction getType(ctor) {\r\n    const match = ctor && ctor.toString().match(/^\\s*function (\\w+)/);\r\n    return match ? match[1] : '';\r\n}\r\nfunction isSameType(a, b) {\r\n    return getType(a) === getType(b);\r\n}\r\nfunction getTypeIndex(type, expectedTypes) {\r\n    if (isArray(expectedTypes)) {\r\n        for (let i = 0, len = expectedTypes.length; i < len; i++) {\r\n            if (isSameType(expectedTypes[i], type)) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    else if (isFunction(expectedTypes)) {\r\n        return isSameType(expectedTypes, type) ? 0 : -1;\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction validateProps(props, instance) {\r\n    const rawValues = toRaw(props);\r\n    const options = instance.propsOptions[0];\r\n    for (const key in options) {\r\n        let opt = options[key];\r\n        if (opt == null)\r\n            continue;\r\n        validateProp(key, rawValues[key], opt, !hasOwn(rawValues, key));\r\n    }\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction validateProp(name, value, prop, isAbsent) {\r\n    const { type, required, validator } = prop;\r\n    // required!\r\n    if (required && isAbsent) {\r\n        warn('Missing required prop: \"' + name + '\"');\r\n        return;\r\n    }\r\n    // missing but optional\r\n    if (value == null && !prop.required) {\r\n        return;\r\n    }\r\n    // type check\r\n    if (type != null && type !== true) {\r\n        let isValid = false;\r\n        const types = isArray(type) ? type : [type];\r\n        const expectedTypes = [];\r\n        // value is valid as long as one of the specified types match\r\n        for (let i = 0; i < types.length && !isValid; i++) {\r\n            const { valid, expectedType } = assertType(value, types[i]);\r\n            expectedTypes.push(expectedType || '');\r\n            isValid = valid;\r\n        }\r\n        if (!isValid) {\r\n            warn(getInvalidTypeMessage(name, value, expectedTypes));\r\n            return;\r\n        }\r\n    }\r\n    // custom validator\r\n    if (validator && !validator(value)) {\r\n        warn('Invalid prop: custom validator check failed for prop \"' + name + '\".');\r\n    }\r\n}\r\nconst isSimpleType = /*#__PURE__*/ makeMap('String,Number,Boolean,Function,Symbol');\r\n/**\r\n * dev only\r\n */\r\nfunction assertType(value, type) {\r\n    let valid;\r\n    const expectedType = getType(type);\r\n    if (isSimpleType(expectedType)) {\r\n        const t = typeof value;\r\n        valid = t === expectedType.toLowerCase();\r\n        // for primitive wrapper objects\r\n        if (!valid && t === 'object') {\r\n            valid = value instanceof type;\r\n        }\r\n    }\r\n    else if (expectedType === 'Object') {\r\n        valid = isObject(value);\r\n    }\r\n    else if (expectedType === 'Array') {\r\n        valid = isArray(value);\r\n    }\r\n    else {\r\n        valid = value instanceof type;\r\n    }\r\n    return {\r\n        valid,\r\n        expectedType\r\n    };\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction getInvalidTypeMessage(name, value, expectedTypes) {\r\n    let message = `Invalid prop: type check failed for prop \"${name}\".` +\r\n        ` Expected ${expectedTypes.map(capitalize).join(', ')}`;\r\n    const expectedType = expectedTypes[0];\r\n    const receivedType = toRawType(value);\r\n    const expectedValue = styleValue(value, expectedType);\r\n    const receivedValue = styleValue(value, receivedType);\r\n    // check if we need to specify expected value\r\n    if (expectedTypes.length === 1 &&\r\n        isExplicable(expectedType) &&\r\n        !isBoolean(expectedType, receivedType)) {\r\n        message += ` with value ${expectedValue}`;\r\n    }\r\n    message += `, got ${receivedType} `;\r\n    // check if we need to specify received value\r\n    if (isExplicable(receivedType)) {\r\n        message += `with value ${receivedValue}.`;\r\n    }\r\n    return message;\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction styleValue(value, type) {\r\n    if (type === 'String') {\r\n        return `\"${value}\"`;\r\n    }\r\n    else if (type === 'Number') {\r\n        return `${Number(value)}`;\r\n    }\r\n    else {\r\n        return `${value}`;\r\n    }\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction isExplicable(type) {\r\n    const explicitTypes = ['string', 'number', 'boolean'];\r\n    return explicitTypes.some(elem => type.toLowerCase() === elem);\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction isBoolean(...args) {\r\n    return args.some(elem => elem.toLowerCase() === 'boolean');\r\n}\n\nfunction injectHook(type, hook, target = currentInstance, prepend = false) {\r\n    if (target) {\r\n        const hooks = target[type] || (target[type] = []);\r\n        // cache the error handling wrapper for injected hooks so the same hook\r\n        // can be properly deduped by the scheduler. \"__weh\" stands for \"with error\r\n        // handling\".\r\n        const wrappedHook = hook.__weh ||\r\n            (hook.__weh = (...args) => {\r\n                if (target.isUnmounted) {\r\n                    return;\r\n                }\r\n                // disable tracking inside all lifecycle hooks\r\n                // since they can potentially be called inside effects.\r\n                pauseTracking();\r\n                // Set currentInstance during hook invocation.\r\n                // This assumes the hook does not synchronously trigger other hooks, which\r\n                // can only be false when the user does something really funky.\r\n                setCurrentInstance(target);\r\n                const res = callWithAsyncErrorHandling(hook, target, type, args);\r\n                setCurrentInstance(null);\r\n                resetTracking();\r\n                return res;\r\n            });\r\n        if (prepend) {\r\n            hooks.unshift(wrappedHook);\r\n        }\r\n        else {\r\n            hooks.push(wrappedHook);\r\n        }\r\n        return wrappedHook;\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        const apiName = toHandlerKey(ErrorTypeStrings[type].replace(/ hook$/, ''));\r\n        warn(`${apiName} is called when there is no active component instance to be ` +\r\n            `associated with. ` +\r\n            `Lifecycle injection APIs can only be used during execution of setup().` +\r\n            ( ` If you are using async setup(), make sure to register lifecycle ` +\r\n                    `hooks before the first await statement.`\r\n                ));\r\n    }\r\n}\r\nconst createHook = (lifecycle) => (hook, target = currentInstance) => \r\n// post-create lifecycle registrations are noops during SSR\r\n!isInSSRComponentSetup && injectHook(lifecycle, hook, target);\r\nconst onBeforeMount = createHook(\"bm\" /* BEFORE_MOUNT */);\r\nconst onMounted = createHook(\"m\" /* MOUNTED */);\r\nconst onBeforeUpdate = createHook(\"bu\" /* BEFORE_UPDATE */);\r\nconst onUpdated = createHook(\"u\" /* UPDATED */);\r\nconst onBeforeUnmount = createHook(\"bum\" /* BEFORE_UNMOUNT */);\r\nconst onUnmounted = createHook(\"um\" /* UNMOUNTED */);\r\nconst onRenderTriggered = createHook(\"rtg\" /* RENDER_TRIGGERED */);\r\nconst onRenderTracked = createHook(\"rtc\" /* RENDER_TRACKED */);\r\nconst onErrorCaptured = (hook, target = currentInstance) => {\r\n    injectHook(\"ec\" /* ERROR_CAPTURED */, hook, target);\r\n};\n\n// Simple effect.\r\nfunction watchEffect(effect, options) {\r\n    return doWatch(effect, null, options);\r\n}\r\n// initial value for watchers to trigger on undefined initial values\r\nconst INITIAL_WATCHER_VALUE = {};\r\n// implementation\r\nfunction watch(source, cb, options) {\r\n    if ((process.env.NODE_ENV !== 'production') && !isFunction(cb)) {\r\n        warn(`\\`watch(fn, options?)\\` signature has been moved to a separate API. ` +\r\n            `Use \\`watchEffect(fn, options?)\\` instead. \\`watch\\` now only ` +\r\n            `supports \\`watch(source, cb, options?) signature.`);\r\n    }\r\n    return doWatch(source, cb, options);\r\n}\r\nfunction doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ, instance = currentInstance) {\r\n    if ((process.env.NODE_ENV !== 'production') && !cb) {\r\n        if (immediate !== undefined) {\r\n            warn(`watch() \"immediate\" option is only respected when using the ` +\r\n                `watch(source, callback, options?) signature.`);\r\n        }\r\n        if (deep !== undefined) {\r\n            warn(`watch() \"deep\" option is only respected when using the ` +\r\n                `watch(source, callback, options?) signature.`);\r\n        }\r\n    }\r\n    const warnInvalidSource = (s) => {\r\n        warn(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, ` +\r\n            `a reactive object, or an array of these types.`);\r\n    };\r\n    let getter;\r\n    let forceTrigger = false;\r\n    if (isRef(source)) {\r\n        getter = () => source.value;\r\n        forceTrigger = !!source._shallow;\r\n    }\r\n    else if (isReactive(source)) {\r\n        getter = () => source;\r\n        deep = true;\r\n    }\r\n    else if (isArray(source)) {\r\n        getter = () => source.map(s => {\r\n            if (isRef(s)) {\r\n                return s.value;\r\n            }\r\n            else if (isReactive(s)) {\r\n                return traverse(s);\r\n            }\r\n            else if (isFunction(s)) {\r\n                return callWithErrorHandling(s, instance, 2 /* WATCH_GETTER */);\r\n            }\r\n            else {\r\n                (process.env.NODE_ENV !== 'production') && warnInvalidSource(s);\r\n            }\r\n        });\r\n    }\r\n    else if (isFunction(source)) {\r\n        if (cb) {\r\n            // getter with cb\r\n            getter = () => callWithErrorHandling(source, instance, 2 /* WATCH_GETTER */);\r\n        }\r\n        else {\r\n            // no cb -> simple effect\r\n            getter = () => {\r\n                if (instance && instance.isUnmounted) {\r\n                    return;\r\n                }\r\n                if (cleanup) {\r\n                    cleanup();\r\n                }\r\n                return callWithErrorHandling(source, instance, 3 /* WATCH_CALLBACK */, [onInvalidate]);\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        getter = NOOP;\r\n        (process.env.NODE_ENV !== 'production') && warnInvalidSource(source);\r\n    }\r\n    if (cb && deep) {\r\n        const baseGetter = getter;\r\n        getter = () => traverse(baseGetter());\r\n    }\r\n    let cleanup;\r\n    const onInvalidate = (fn) => {\r\n        cleanup = runner.options.onStop = () => {\r\n            callWithErrorHandling(fn, instance, 4 /* WATCH_CLEANUP */);\r\n        };\r\n    };\r\n    let oldValue = isArray(source) ? [] : INITIAL_WATCHER_VALUE;\r\n    const job = () => {\r\n        if (!runner.active) {\r\n            return;\r\n        }\r\n        if (cb) {\r\n            // watch(source, cb)\r\n            const newValue = runner();\r\n            if (deep || forceTrigger || hasChanged(newValue, oldValue)) {\r\n                // cleanup before running cb again\r\n                if (cleanup) {\r\n                    cleanup();\r\n                }\r\n                callWithAsyncErrorHandling(cb, instance, 3 /* WATCH_CALLBACK */, [\r\n                    newValue,\r\n                    // pass undefined as the old value when it's changed for the first time\r\n                    oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue,\r\n                    onInvalidate\r\n                ]);\r\n                oldValue = newValue;\r\n            }\r\n        }\r\n        else {\r\n            // watchEffect\r\n            runner();\r\n        }\r\n    };\r\n    // important: mark the job as a watcher callback so that scheduler knows\r\n    // it is allowed to self-trigger (#1727)\r\n    job.allowRecurse = !!cb;\r\n    let scheduler;\r\n    if (flush === 'sync') {\r\n        scheduler = job;\r\n    }\r\n    else if (flush === 'post') {\r\n        scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);\r\n    }\r\n    else {\r\n        // default: 'pre'\r\n        scheduler = () => {\r\n            if (!instance || instance.isMounted) {\r\n                queuePreFlushCb(job);\r\n            }\r\n            else {\r\n                // with 'pre' option, the first call must happen before\r\n                // the component is mounted so it is called synchronously.\r\n                job();\r\n            }\r\n        };\r\n    }\r\n    const runner = effect(getter, {\r\n        lazy: true,\r\n        onTrack,\r\n        onTrigger,\r\n        scheduler\r\n    });\r\n    recordInstanceBoundEffect(runner);\r\n    // initial run\r\n    if (cb) {\r\n        if (immediate) {\r\n            job();\r\n        }\r\n        else {\r\n            oldValue = runner();\r\n        }\r\n    }\r\n    else if (flush === 'post') {\r\n        queuePostRenderEffect(runner, instance && instance.suspense);\r\n    }\r\n    else {\r\n        runner();\r\n    }\r\n    return () => {\r\n        stop(runner);\r\n        if (instance) {\r\n            remove(instance.effects, runner);\r\n        }\r\n    };\r\n}\r\n// this.$watch\r\nfunction instanceWatch(source, cb, options) {\r\n    const publicThis = this.proxy;\r\n    const getter = isString(source)\r\n        ? () => publicThis[source]\r\n        : source.bind(publicThis);\r\n    return doWatch(getter, cb.bind(publicThis), options, this);\r\n}\r\nfunction traverse(value, seen = new Set()) {\r\n    if (!isObject(value) || seen.has(value)) {\r\n        return value;\r\n    }\r\n    seen.add(value);\r\n    if (isRef(value)) {\r\n        traverse(value.value, seen);\r\n    }\r\n    else if (isArray(value)) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            traverse(value[i], seen);\r\n        }\r\n    }\r\n    else if (isSet(value) || isMap(value)) {\r\n        value.forEach((v) => {\r\n            traverse(v, seen);\r\n        });\r\n    }\r\n    else {\r\n        for (const key in value) {\r\n            traverse(value[key], seen);\r\n        }\r\n    }\r\n    return value;\r\n}\n\nfunction useTransitionState() {\r\n    const state = {\r\n        isMounted: false,\r\n        isLeaving: false,\r\n        isUnmounting: false,\r\n        leavingVNodes: new Map()\r\n    };\r\n    onMounted(() => {\r\n        state.isMounted = true;\r\n    });\r\n    onBeforeUnmount(() => {\r\n        state.isUnmounting = true;\r\n    });\r\n    return state;\r\n}\r\nconst TransitionHookValidator = [Function, Array];\r\nconst BaseTransitionImpl = {\r\n    name: `BaseTransition`,\r\n    props: {\r\n        mode: String,\r\n        appear: Boolean,\r\n        persisted: Boolean,\r\n        // enter\r\n        onBeforeEnter: TransitionHookValidator,\r\n        onEnter: TransitionHookValidator,\r\n        onAfterEnter: TransitionHookValidator,\r\n        onEnterCancelled: TransitionHookValidator,\r\n        // leave\r\n        onBeforeLeave: TransitionHookValidator,\r\n        onLeave: TransitionHookValidator,\r\n        onAfterLeave: TransitionHookValidator,\r\n        onLeaveCancelled: TransitionHookValidator,\r\n        // appear\r\n        onBeforeAppear: TransitionHookValidator,\r\n        onAppear: TransitionHookValidator,\r\n        onAfterAppear: TransitionHookValidator,\r\n        onAppearCancelled: TransitionHookValidator\r\n    },\r\n    setup(props, { slots }) {\r\n        const instance = getCurrentInstance();\r\n        const state = useTransitionState();\r\n        let prevTransitionKey;\r\n        return () => {\r\n            const children = slots.default && getTransitionRawChildren(slots.default(), true);\r\n            if (!children || !children.length) {\r\n                return;\r\n            }\r\n            // warn multiple elements\r\n            if ((process.env.NODE_ENV !== 'production') && children.length > 1) {\r\n                warn('<transition> can only be used on a single element or component. Use ' +\r\n                    '<transition-group> for lists.');\r\n            }\r\n            // there's no need to track reactivity for these props so use the raw\r\n            // props for a bit better perf\r\n            const rawProps = toRaw(props);\r\n            const { mode } = rawProps;\r\n            // check mode\r\n            if ((process.env.NODE_ENV !== 'production') && mode && !['in-out', 'out-in', 'default'].includes(mode)) {\r\n                warn(`invalid <transition> mode: ${mode}`);\r\n            }\r\n            // at this point children has a guaranteed length of 1.\r\n            const child = children[0];\r\n            if (state.isLeaving) {\r\n                return emptyPlaceholder(child);\r\n            }\r\n            // in the case of <transition><keep-alive/></transition>, we need to\r\n            // compare the type of the kept-alive children.\r\n            const innerChild = getKeepAliveChild(child);\r\n            if (!innerChild) {\r\n                return emptyPlaceholder(child);\r\n            }\r\n            const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);\r\n            setTransitionHooks(innerChild, enterHooks);\r\n            const oldChild = instance.subTree;\r\n            const oldInnerChild = oldChild && getKeepAliveChild(oldChild);\r\n            let transitionKeyChanged = false;\r\n            const { getTransitionKey } = innerChild.type;\r\n            if (getTransitionKey) {\r\n                const key = getTransitionKey();\r\n                if (prevTransitionKey === undefined) {\r\n                    prevTransitionKey = key;\r\n                }\r\n                else if (key !== prevTransitionKey) {\r\n                    prevTransitionKey = key;\r\n                    transitionKeyChanged = true;\r\n                }\r\n            }\r\n            // handle mode\r\n            if (oldInnerChild &&\r\n                oldInnerChild.type !== Comment &&\r\n                (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {\r\n                const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);\r\n                // update old tree's hooks in case of dynamic transition\r\n                setTransitionHooks(oldInnerChild, leavingHooks);\r\n                // switching between different views\r\n                if (mode === 'out-in') {\r\n                    state.isLeaving = true;\r\n                    // return placeholder node and queue update when leave finishes\r\n                    leavingHooks.afterLeave = () => {\r\n                        state.isLeaving = false;\r\n                        instance.update();\r\n                    };\r\n                    return emptyPlaceholder(child);\r\n                }\r\n                else if (mode === 'in-out') {\r\n                    leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {\r\n                        const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);\r\n                        leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;\r\n                        // early removal callback\r\n                        el._leaveCb = () => {\r\n                            earlyRemove();\r\n                            el._leaveCb = undefined;\r\n                            delete enterHooks.delayedLeave;\r\n                        };\r\n                        enterHooks.delayedLeave = delayedLeave;\r\n                    };\r\n                }\r\n            }\r\n            return child;\r\n        };\r\n    }\r\n};\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\nconst BaseTransition = BaseTransitionImpl;\r\nfunction getLeavingNodesForType(state, vnode) {\r\n    const { leavingVNodes } = state;\r\n    let leavingVNodesCache = leavingVNodes.get(vnode.type);\r\n    if (!leavingVNodesCache) {\r\n        leavingVNodesCache = Object.create(null);\r\n        leavingVNodes.set(vnode.type, leavingVNodesCache);\r\n    }\r\n    return leavingVNodesCache;\r\n}\r\n// The transition hooks are attached to the vnode as vnode.transition\r\n// and will be called at appropriate timing in the renderer.\r\nfunction resolveTransitionHooks(vnode, props, state, instance) {\r\n    const { appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;\r\n    const key = String(vnode.key);\r\n    const leavingVNodesCache = getLeavingNodesForType(state, vnode);\r\n    const callHook = (hook, args) => {\r\n        hook &&\r\n            callWithAsyncErrorHandling(hook, instance, 9 /* TRANSITION_HOOK */, args);\r\n    };\r\n    const hooks = {\r\n        mode,\r\n        persisted,\r\n        beforeEnter(el) {\r\n            let hook = onBeforeEnter;\r\n            if (!state.isMounted) {\r\n                if (appear) {\r\n                    hook = onBeforeAppear || onBeforeEnter;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n            // for same element (v-show)\r\n            if (el._leaveCb) {\r\n                el._leaveCb(true /* cancelled */);\r\n            }\r\n            // for toggled element with same key (v-if)\r\n            const leavingVNode = leavingVNodesCache[key];\r\n            if (leavingVNode &&\r\n                isSameVNodeType(vnode, leavingVNode) &&\r\n                leavingVNode.el._leaveCb) {\r\n                // force early removal (not cancelled)\r\n                leavingVNode.el._leaveCb();\r\n            }\r\n            callHook(hook, [el]);\r\n        },\r\n        enter(el) {\r\n            let hook = onEnter;\r\n            let afterHook = onAfterEnter;\r\n            let cancelHook = onEnterCancelled;\r\n            if (!state.isMounted) {\r\n                if (appear) {\r\n                    hook = onAppear || onEnter;\r\n                    afterHook = onAfterAppear || onAfterEnter;\r\n                    cancelHook = onAppearCancelled || onEnterCancelled;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n            let called = false;\r\n            const done = (el._enterCb = (cancelled) => {\r\n                if (called)\r\n                    return;\r\n                called = true;\r\n                if (cancelled) {\r\n                    callHook(cancelHook, [el]);\r\n                }\r\n                else {\r\n                    callHook(afterHook, [el]);\r\n                }\r\n                if (hooks.delayedLeave) {\r\n                    hooks.delayedLeave();\r\n                }\r\n                el._enterCb = undefined;\r\n            });\r\n            if (hook) {\r\n                hook(el, done);\r\n                if (hook.length <= 1) {\r\n                    done();\r\n                }\r\n            }\r\n            else {\r\n                done();\r\n            }\r\n        },\r\n        leave(el, remove) {\r\n            const key = String(vnode.key);\r\n            if (el._enterCb) {\r\n                el._enterCb(true /* cancelled */);\r\n            }\r\n            if (state.isUnmounting) {\r\n                return remove();\r\n            }\r\n            callHook(onBeforeLeave, [el]);\r\n            let called = false;\r\n            const done = (el._leaveCb = (cancelled) => {\r\n                if (called)\r\n                    return;\r\n                called = true;\r\n                remove();\r\n                if (cancelled) {\r\n                    callHook(onLeaveCancelled, [el]);\r\n                }\r\n                else {\r\n                    callHook(onAfterLeave, [el]);\r\n                }\r\n                el._leaveCb = undefined;\r\n                if (leavingVNodesCache[key] === vnode) {\r\n                    delete leavingVNodesCache[key];\r\n                }\r\n            });\r\n            leavingVNodesCache[key] = vnode;\r\n            if (onLeave) {\r\n                onLeave(el, done);\r\n                if (onLeave.length <= 1) {\r\n                    done();\r\n                }\r\n            }\r\n            else {\r\n                done();\r\n            }\r\n        },\r\n        clone(vnode) {\r\n            return resolveTransitionHooks(vnode, props, state, instance);\r\n        }\r\n    };\r\n    return hooks;\r\n}\r\n// the placeholder really only handles one special case: KeepAlive\r\n// in the case of a KeepAlive in a leave phase we need to return a KeepAlive\r\n// placeholder with empty content to avoid the KeepAlive instance from being\r\n// unmounted.\r\nfunction emptyPlaceholder(vnode) {\r\n    if (isKeepAlive(vnode)) {\r\n        vnode = cloneVNode(vnode);\r\n        vnode.children = null;\r\n        return vnode;\r\n    }\r\n}\r\nfunction getKeepAliveChild(vnode) {\r\n    return isKeepAlive(vnode)\r\n        ? vnode.children\r\n            ? vnode.children[0]\r\n            : undefined\r\n        : vnode;\r\n}\r\nfunction setTransitionHooks(vnode, hooks) {\r\n    if (vnode.shapeFlag & 6 /* COMPONENT */ && vnode.component) {\r\n        setTransitionHooks(vnode.component.subTree, hooks);\r\n    }\r\n    else if ( vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n        vnode.ssContent.transition = hooks.clone(vnode.ssContent);\r\n        vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);\r\n    }\r\n    else {\r\n        vnode.transition = hooks;\r\n    }\r\n}\r\nfunction getTransitionRawChildren(children, keepComment = false) {\r\n    let ret = [];\r\n    let keyedFragmentCount = 0;\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        // handle fragment children case, e.g. v-for\r\n        if (child.type === Fragment) {\r\n            if (child.patchFlag & 128 /* KEYED_FRAGMENT */)\r\n                keyedFragmentCount++;\r\n            ret = ret.concat(getTransitionRawChildren(child.children, keepComment));\r\n        }\r\n        // comment placeholders should be skipped, e.g. v-if\r\n        else if (keepComment || child.type !== Comment) {\r\n            ret.push(child);\r\n        }\r\n    }\r\n    // #1126 if a transition children list contains multiple sub fragments, these\r\n    // fragments will be merged into a flat children array. Since each v-for\r\n    // fragment may contain different static bindings inside, we need to de-top\r\n    // these children to force full diffs to ensure correct behavior.\r\n    if (keyedFragmentCount > 1) {\r\n        for (let i = 0; i < ret.length; i++) {\r\n            ret[i].patchFlag = -2 /* BAIL */;\r\n        }\r\n    }\r\n    return ret;\r\n}\n\nconst isKeepAlive = (vnode) => vnode.type.__isKeepAlive;\r\nconst KeepAliveImpl = {\r\n    name: `KeepAlive`,\r\n    // Marker for special handling inside the renderer. We are not using a ===\r\n    // check directly on KeepAlive in the renderer, because importing it directly\r\n    // would prevent it from being tree-shaken.\r\n    __isKeepAlive: true,\r\n    inheritRef: true,\r\n    props: {\r\n        include: [String, RegExp, Array],\r\n        exclude: [String, RegExp, Array],\r\n        max: [String, Number]\r\n    },\r\n    setup(props, { slots }) {\r\n        const cache = new Map();\r\n        const keys = new Set();\r\n        let current = null;\r\n        const instance = getCurrentInstance();\r\n        const parentSuspense = instance.suspense;\r\n        // KeepAlive communicates with the instantiated renderer via the\r\n        // ctx where the renderer passes in its internals,\r\n        // and the KeepAlive instance exposes activate/deactivate implementations.\r\n        // The whole point of this is to avoid importing KeepAlive directly in the\r\n        // renderer to facilitate tree-shaking.\r\n        const sharedContext = instance.ctx;\r\n        const { renderer: { p: patch, m: move, um: _unmount, o: { createElement } } } = sharedContext;\r\n        const storageContainer = createElement('div');\r\n        sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {\r\n            const instance = vnode.component;\r\n            move(vnode, container, anchor, 0 /* ENTER */, parentSuspense);\r\n            // in case props have changed\r\n            patch(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, optimized);\r\n            queuePostRenderEffect(() => {\r\n                instance.isDeactivated = false;\r\n                if (instance.a) {\r\n                    invokeArrayFns(instance.a);\r\n                }\r\n                const vnodeHook = vnode.props && vnode.props.onVnodeMounted;\r\n                if (vnodeHook) {\r\n                    invokeVNodeHook(vnodeHook, instance.parent, vnode);\r\n                }\r\n            }, parentSuspense);\r\n        };\r\n        sharedContext.deactivate = (vnode) => {\r\n            const instance = vnode.component;\r\n            move(vnode, storageContainer, null, 1 /* LEAVE */, parentSuspense);\r\n            queuePostRenderEffect(() => {\r\n                if (instance.da) {\r\n                    invokeArrayFns(instance.da);\r\n                }\r\n                const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;\r\n                if (vnodeHook) {\r\n                    invokeVNodeHook(vnodeHook, instance.parent, vnode);\r\n                }\r\n                instance.isDeactivated = true;\r\n            }, parentSuspense);\r\n        };\r\n        function unmount(vnode) {\r\n            // reset the shapeFlag so it can be properly unmounted\r\n            resetShapeFlag(vnode);\r\n            _unmount(vnode, instance, parentSuspense);\r\n        }\r\n        function pruneCache(filter) {\r\n            cache.forEach((vnode, key) => {\r\n                const name = getName(vnode.type);\r\n                if (name && (!filter || !filter(name))) {\r\n                    pruneCacheEntry(key);\r\n                }\r\n            });\r\n        }\r\n        function pruneCacheEntry(key) {\r\n            const cached = cache.get(key);\r\n            if (!current || cached.type !== current.type) {\r\n                unmount(cached);\r\n            }\r\n            else if (current) {\r\n                // current active instance should no longer be kept-alive.\r\n                // we can't unmount it now but it might be later, so reset its flag now.\r\n                resetShapeFlag(current);\r\n            }\r\n            cache.delete(key);\r\n            keys.delete(key);\r\n        }\r\n        // prune cache on include/exclude prop change\r\n        watch(() => [props.include, props.exclude], ([include, exclude]) => {\r\n            include && pruneCache(name => matches(include, name));\r\n            exclude && pruneCache(name => !matches(exclude, name));\r\n        }, \r\n        // prune post-render after `current` has been updated\r\n        { flush: 'post' });\r\n        // cache sub tree after render\r\n        let pendingCacheKey = null;\r\n        const cacheSubtree = () => {\r\n            // fix #1621, the pendingCacheKey could be 0\r\n            if (pendingCacheKey != null) {\r\n                cache.set(pendingCacheKey, getInnerChild(instance.subTree));\r\n            }\r\n        };\r\n        onMounted(cacheSubtree);\r\n        onUpdated(cacheSubtree);\r\n        onBeforeUnmount(() => {\r\n            cache.forEach(cached => {\r\n                const { subTree, suspense } = instance;\r\n                const vnode = getInnerChild(subTree);\r\n                if (cached.type === vnode.type) {\r\n                    // current instance will be unmounted as part of keep-alive's unmount\r\n                    resetShapeFlag(vnode);\r\n                    // but invoke its deactivated hook here\r\n                    const da = vnode.component.da;\r\n                    da && queuePostRenderEffect(da, suspense);\r\n                    return;\r\n                }\r\n                unmount(cached);\r\n            });\r\n        });\r\n        return () => {\r\n            pendingCacheKey = null;\r\n            if (!slots.default) {\r\n                return null;\r\n            }\r\n            const children = slots.default();\r\n            const rawVNode = children[0];\r\n            if (children.length > 1) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`KeepAlive should contain exactly one component child.`);\r\n                }\r\n                current = null;\r\n                return children;\r\n            }\r\n            else if (!isVNode(rawVNode) ||\r\n                (!(rawVNode.shapeFlag & 4 /* STATEFUL_COMPONENT */) &&\r\n                    !(rawVNode.shapeFlag & 128 /* SUSPENSE */))) {\r\n                current = null;\r\n                return rawVNode;\r\n            }\r\n            let vnode = getInnerChild(rawVNode);\r\n            const comp = vnode.type;\r\n            const name = getName(comp);\r\n            const { include, exclude, max } = props;\r\n            if ((include && (!name || !matches(include, name))) ||\r\n                (exclude && name && matches(exclude, name))) {\r\n                current = vnode;\r\n                return rawVNode;\r\n            }\r\n            const key = vnode.key == null ? comp : vnode.key;\r\n            const cachedVNode = cache.get(key);\r\n            // clone vnode if it's reused because we are going to mutate it\r\n            if (vnode.el) {\r\n                vnode = cloneVNode(vnode);\r\n                if (rawVNode.shapeFlag & 128 /* SUSPENSE */) {\r\n                    rawVNode.ssContent = vnode;\r\n                }\r\n            }\r\n            // #1513 it's possible for the returned vnode to be cloned due to attr\r\n            // fallthrough or scopeId, so the vnode here may not be the final vnode\r\n            // that is mounted. Instead of caching it directly, we store the pending\r\n            // key and cache `instance.subTree` (the normalized vnode) in\r\n            // beforeMount/beforeUpdate hooks.\r\n            pendingCacheKey = key;\r\n            if (cachedVNode) {\r\n                // copy over mounted state\r\n                vnode.el = cachedVNode.el;\r\n                vnode.component = cachedVNode.component;\r\n                if (vnode.transition) {\r\n                    // recursively update transition hooks on subTree\r\n                    setTransitionHooks(vnode, vnode.transition);\r\n                }\r\n                // avoid vnode being mounted as fresh\r\n                vnode.shapeFlag |= 512 /* COMPONENT_KEPT_ALIVE */;\r\n                // make this key the freshest\r\n                keys.delete(key);\r\n                keys.add(key);\r\n            }\r\n            else {\r\n                keys.add(key);\r\n                // prune oldest entry\r\n                if (max && keys.size > parseInt(max, 10)) {\r\n                    pruneCacheEntry(keys.values().next().value);\r\n                }\r\n            }\r\n            // avoid vnode being unmounted\r\n            vnode.shapeFlag |= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */;\r\n            current = vnode;\r\n            return rawVNode;\r\n        };\r\n    }\r\n};\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\nconst KeepAlive = KeepAliveImpl;\r\nfunction getName(comp) {\r\n    return comp.displayName || comp.name;\r\n}\r\nfunction matches(pattern, name) {\r\n    if (isArray(pattern)) {\r\n        return pattern.some((p) => matches(p, name));\r\n    }\r\n    else if (isString(pattern)) {\r\n        return pattern.split(',').indexOf(name) > -1;\r\n    }\r\n    else if (pattern.test) {\r\n        return pattern.test(name);\r\n    }\r\n    /* istanbul ignore next */\r\n    return false;\r\n}\r\nfunction onActivated(hook, target) {\r\n    registerKeepAliveHook(hook, \"a\" /* ACTIVATED */, target);\r\n}\r\nfunction onDeactivated(hook, target) {\r\n    registerKeepAliveHook(hook, \"da\" /* DEACTIVATED */, target);\r\n}\r\nfunction registerKeepAliveHook(hook, type, target = currentInstance) {\r\n    // cache the deactivate branch check wrapper for injected hooks so the same\r\n    // hook can be properly deduped by the scheduler. \"__wdc\" stands for \"with\r\n    // deactivation check\".\r\n    const wrappedHook = hook.__wdc ||\r\n        (hook.__wdc = () => {\r\n            // only fire the hook if the target instance is NOT in a deactivated branch.\r\n            let current = target;\r\n            while (current) {\r\n                if (current.isDeactivated) {\r\n                    return;\r\n                }\r\n                current = current.parent;\r\n            }\r\n            hook();\r\n        });\r\n    injectHook(type, wrappedHook, target);\r\n    // In addition to registering it on the target instance, we walk up the parent\r\n    // chain and register it on all ancestor instances that are keep-alive roots.\r\n    // This avoids the need to walk the entire component tree when invoking these\r\n    // hooks, and more importantly, avoids the need to track child components in\r\n    // arrays.\r\n    if (target) {\r\n        let current = target.parent;\r\n        while (current && current.parent) {\r\n            if (isKeepAlive(current.parent.vnode)) {\r\n                injectToKeepAliveRoot(wrappedHook, type, target, current);\r\n            }\r\n            current = current.parent;\r\n        }\r\n    }\r\n}\r\nfunction injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {\r\n    // injectHook wraps the original for error handling, so make sure to remove\r\n    // the wrapped version.\r\n    const injected = injectHook(type, hook, keepAliveRoot, true /* prepend */);\r\n    onUnmounted(() => {\r\n        remove(keepAliveRoot[type], injected);\r\n    }, target);\r\n}\r\nfunction resetShapeFlag(vnode) {\r\n    let shapeFlag = vnode.shapeFlag;\r\n    if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n        shapeFlag -= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */;\r\n    }\r\n    if (shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */) {\r\n        shapeFlag -= 512 /* COMPONENT_KEPT_ALIVE */;\r\n    }\r\n    vnode.shapeFlag = shapeFlag;\r\n}\r\nfunction getInnerChild(vnode) {\r\n    return vnode.shapeFlag & 128 /* SUSPENSE */ ? vnode.ssContent : vnode;\r\n}\n\nconst isInternalKey = (key) => key[0] === '_' || key === '$stable';\r\nconst normalizeSlotValue = (value) => isArray(value)\r\n    ? value.map(normalizeVNode)\r\n    : [normalizeVNode(value)];\r\nconst normalizeSlot = (key, rawSlot, ctx) => withCtx((props) => {\r\n    if ((process.env.NODE_ENV !== 'production') && currentInstance) {\r\n        warn(`Slot \"${key}\" invoked outside of the render function: ` +\r\n            `this will not track dependencies used in the slot. ` +\r\n            `Invoke the slot function inside the render function instead.`);\r\n    }\r\n    return normalizeSlotValue(rawSlot(props));\r\n}, ctx);\r\nconst normalizeObjectSlots = (rawSlots, slots) => {\r\n    const ctx = rawSlots._ctx;\r\n    for (const key in rawSlots) {\r\n        if (isInternalKey(key))\r\n            continue;\r\n        const value = rawSlots[key];\r\n        if (isFunction(value)) {\r\n            slots[key] = normalizeSlot(key, value, ctx);\r\n        }\r\n        else if (value != null) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                warn(`Non-function value encountered for slot \"${key}\". ` +\r\n                    `Prefer function slots for better performance.`);\r\n            }\r\n            const normalized = normalizeSlotValue(value);\r\n            slots[key] = () => normalized;\r\n        }\r\n    }\r\n};\r\nconst normalizeVNodeSlots = (instance, children) => {\r\n    if ((process.env.NODE_ENV !== 'production') && !isKeepAlive(instance.vnode)) {\r\n        warn(`Non-function value encountered for default slot. ` +\r\n            `Prefer function slots for better performance.`);\r\n    }\r\n    const normalized = normalizeSlotValue(children);\r\n    instance.slots.default = () => normalized;\r\n};\r\nconst initSlots = (instance, children) => {\r\n    if (instance.vnode.shapeFlag & 32 /* SLOTS_CHILDREN */) {\r\n        const type = children._;\r\n        if (type) {\r\n            instance.slots = children;\r\n            // make compiler marker non-enumerable\r\n            def(children, '_', type);\r\n        }\r\n        else {\r\n            normalizeObjectSlots(children, (instance.slots = {}));\r\n        }\r\n    }\r\n    else {\r\n        instance.slots = {};\r\n        if (children) {\r\n            normalizeVNodeSlots(instance, children);\r\n        }\r\n    }\r\n    def(instance.slots, InternalObjectKey, 1);\r\n};\r\nconst updateSlots = (instance, children) => {\r\n    const { vnode, slots } = instance;\r\n    let needDeletionCheck = true;\r\n    let deletionComparisonTarget = EMPTY_OBJ;\r\n    if (vnode.shapeFlag & 32 /* SLOTS_CHILDREN */) {\r\n        const type = children._;\r\n        if (type) {\r\n            // compiled slots.\r\n            if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n                // Parent was HMR updated so slot content may have changed.\r\n                // force update slots and mark instance for hmr as well\r\n                extend(slots, children);\r\n            }\r\n            else if (type === 1 /* STABLE */) {\r\n                // compiled AND stable.\r\n                // no need to update, and skip stale slots removal.\r\n                needDeletionCheck = false;\r\n            }\r\n            else {\r\n                // compiled but dynamic (v-if/v-for on slots) - update slots, but skip\r\n                // normalization.\r\n                extend(slots, children);\r\n            }\r\n        }\r\n        else {\r\n            needDeletionCheck = !children.$stable;\r\n            normalizeObjectSlots(children, slots);\r\n        }\r\n        deletionComparisonTarget = children;\r\n    }\r\n    else if (children) {\r\n        // non slot object children (direct value) passed to a component\r\n        normalizeVNodeSlots(instance, children);\r\n        deletionComparisonTarget = { default: 1 };\r\n    }\r\n    // delete stale slots\r\n    if (needDeletionCheck) {\r\n        for (const key in slots) {\r\n            if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {\r\n                delete slots[key];\r\n            }\r\n        }\r\n    }\r\n};\n\n/**\r\nRuntime helper for applying directives to a vnode. Example usage:\r\n\nconst comp = resolveComponent('comp')\r\nconst foo = resolveDirective('foo')\r\nconst bar = resolveDirective('bar')\r\n\nreturn withDirectives(h(comp), [\r\n  [foo, this.x],\r\n  [bar, this.y]\r\n])\r\n*/\r\nconst isBuiltInDirective = /*#__PURE__*/ makeMap('bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text');\r\nfunction validateDirectiveName(name) {\r\n    if (isBuiltInDirective(name)) {\r\n        warn('Do not use built-in directive ids as custom directive id: ' + name);\r\n    }\r\n}\r\n/**\r\n * Adds directives to a VNode.\r\n */\r\nfunction withDirectives(vnode, directives) {\r\n    const internalInstance = currentRenderingInstance;\r\n    if (internalInstance === null) {\r\n        (process.env.NODE_ENV !== 'production') && warn(`withDirectives can only be used inside render functions.`);\r\n        return vnode;\r\n    }\r\n    const instance = internalInstance.proxy;\r\n    const bindings = vnode.dirs || (vnode.dirs = []);\r\n    for (let i = 0; i < directives.length; i++) {\r\n        let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i];\r\n        if (isFunction(dir)) {\r\n            dir = {\r\n                mounted: dir,\r\n                updated: dir\r\n            };\r\n        }\r\n        bindings.push({\r\n            dir,\r\n            instance,\r\n            value,\r\n            oldValue: void 0,\r\n            arg,\r\n            modifiers\r\n        });\r\n    }\r\n    return vnode;\r\n}\r\nfunction invokeDirectiveHook(vnode, prevVNode, instance, name) {\r\n    const bindings = vnode.dirs;\r\n    const oldBindings = prevVNode && prevVNode.dirs;\r\n    for (let i = 0; i < bindings.length; i++) {\r\n        const binding = bindings[i];\r\n        if (oldBindings) {\r\n            binding.oldValue = oldBindings[i].value;\r\n        }\r\n        const hook = binding.dir[name];\r\n        if (hook) {\r\n            callWithAsyncErrorHandling(hook, instance, 8 /* DIRECTIVE_HOOK */, [\r\n                vnode.el,\r\n                binding,\r\n                vnode,\r\n                prevVNode\r\n            ]);\r\n        }\r\n    }\r\n}\n\nfunction createAppContext() {\r\n    return {\r\n        app: null,\r\n        config: {\r\n            isNativeTag: NO,\r\n            performance: false,\r\n            globalProperties: {},\r\n            optionMergeStrategies: {},\r\n            isCustomElement: NO,\r\n            errorHandler: undefined,\r\n            warnHandler: undefined\r\n        },\r\n        mixins: [],\r\n        components: {},\r\n        directives: {},\r\n        provides: Object.create(null)\r\n    };\r\n}\r\nlet uid = 0;\r\nfunction createAppAPI(render, hydrate) {\r\n    return function createApp(rootComponent, rootProps = null) {\r\n        if (rootProps != null && !isObject(rootProps)) {\r\n            (process.env.NODE_ENV !== 'production') && warn(`root props passed to app.mount() must be an object.`);\r\n            rootProps = null;\r\n        }\r\n        const context = createAppContext();\r\n        const installedPlugins = new Set();\r\n        let isMounted = false;\r\n        const app = (context.app = {\r\n            _uid: uid++,\r\n            _component: rootComponent,\r\n            _props: rootProps,\r\n            _container: null,\r\n            _context: context,\r\n            version,\r\n            get config() {\r\n                return context.config;\r\n            },\r\n            set config(v) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`app.config cannot be replaced. Modify individual options instead.`);\r\n                }\r\n            },\r\n            use(plugin, ...options) {\r\n                if (installedPlugins.has(plugin)) {\r\n                    (process.env.NODE_ENV !== 'production') && warn(`Plugin has already been applied to target app.`);\r\n                }\r\n                else if (plugin && isFunction(plugin.install)) {\r\n                    installedPlugins.add(plugin);\r\n                    plugin.install(app, ...options);\r\n                }\r\n                else if (isFunction(plugin)) {\r\n                    installedPlugins.add(plugin);\r\n                    plugin(app, ...options);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`A plugin must either be a function or an object with an \"install\" ` +\r\n                        `function.`);\r\n                }\r\n                return app;\r\n            },\r\n            mixin(mixin) {\r\n                if (__VUE_OPTIONS_API__) {\r\n                    if (!context.mixins.includes(mixin)) {\r\n                        context.mixins.push(mixin);\r\n                        // global mixin with props/emits de-optimizes props/emits\r\n                        // normalization caching.\r\n                        if (mixin.props || mixin.emits) {\r\n                            context.deopt = true;\r\n                        }\r\n                    }\r\n                    else if ((process.env.NODE_ENV !== 'production')) {\r\n                        warn('Mixin has already been applied to target app' +\r\n                            (mixin.name ? `: ${mixin.name}` : ''));\r\n                    }\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn('Mixins are only available in builds supporting Options API');\r\n                }\r\n                return app;\r\n            },\r\n            component(name, component) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    validateComponentName(name, context.config);\r\n                }\r\n                if (!component) {\r\n                    return context.components[name];\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && context.components[name]) {\r\n                    warn(`Component \"${name}\" has already been registered in target app.`);\r\n                }\r\n                context.components[name] = component;\r\n                return app;\r\n            },\r\n            directive(name, directive) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    validateDirectiveName(name);\r\n                }\r\n                if (!directive) {\r\n                    return context.directives[name];\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && context.directives[name]) {\r\n                    warn(`Directive \"${name}\" has already been registered in target app.`);\r\n                }\r\n                context.directives[name] = directive;\r\n                return app;\r\n            },\r\n            mount(rootContainer, isHydrate) {\r\n                if (!isMounted) {\r\n                    const vnode = createVNode(rootComponent, rootProps);\r\n                    // store app context on the root VNode.\r\n                    // this will be set on the root instance on initial mount.\r\n                    vnode.appContext = context;\r\n                    // HMR root reload\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        context.reload = () => {\r\n                            render(cloneVNode(vnode), rootContainer);\r\n                        };\r\n                    }\r\n                    if (isHydrate && hydrate) {\r\n                        hydrate(vnode, rootContainer);\r\n                    }\r\n                    else {\r\n                        render(vnode, rootContainer);\r\n                    }\r\n                    isMounted = true;\r\n                    app._container = rootContainer;\r\n                    rootContainer.__vue_app__ = app;\r\n                    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                        devtoolsInitApp(app, version);\r\n                    }\r\n                    return vnode.component.proxy;\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`App has already been mounted.\\n` +\r\n                        `If you want to remount the same app, move your app creation logic ` +\r\n                        `into a factory function and create fresh app instances for each ` +\r\n                        `mount - e.g. \\`const createMyApp = () => createApp(App)\\``);\r\n                }\r\n            },\r\n            unmount() {\r\n                if (isMounted) {\r\n                    render(null, app._container);\r\n                    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                        devtoolsUnmountApp(app);\r\n                    }\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`Cannot unmount an app that is not mounted.`);\r\n                }\r\n            },\r\n            provide(key, value) {\r\n                if ((process.env.NODE_ENV !== 'production') && key in context.provides) {\r\n                    warn(`App already provides property with key \"${String(key)}\". ` +\r\n                        `It will be overwritten with the new value.`);\r\n                }\r\n                // TypeScript doesn't allow symbols as index type\r\n                // https://github.com/Microsoft/TypeScript/issues/24587\r\n                context.provides[key] = value;\r\n                return app;\r\n            }\r\n        });\r\n        return app;\r\n    };\r\n}\n\nlet hasMismatch = false;\r\nconst isSVGContainer = (container) => /svg/.test(container.namespaceURI) && container.tagName !== 'foreignObject';\r\nconst isComment = (node) => node.nodeType === 8 /* COMMENT */;\r\n// Note: hydration is DOM-specific\r\n// But we have to place it in core due to tight coupling with core - splitting\r\n// it out creates a ton of unnecessary complexity.\r\n// Hydration also depends on some renderer internal logic which needs to be\r\n// passed in via arguments.\r\nfunction createHydrationFunctions(rendererInternals) {\r\n    const { mt: mountComponent, p: patch, o: { patchProp, nextSibling, parentNode, remove, insert, createComment } } = rendererInternals;\r\n    const hydrate = (vnode, container) => {\r\n        if ((process.env.NODE_ENV !== 'production') && !container.hasChildNodes()) {\r\n            warn(`Attempting to hydrate existing markup but container is empty. ` +\r\n                `Performing full mount instead.`);\r\n            patch(null, vnode, container);\r\n            return;\r\n        }\r\n        hasMismatch = false;\r\n        hydrateNode(container.firstChild, vnode, null, null);\r\n        flushPostFlushCbs();\r\n        if (hasMismatch && !false) {\r\n            // this error should show up in production\r\n            console.error(`Hydration completed but contains mismatches.`);\r\n        }\r\n    };\r\n    const hydrateNode = (node, vnode, parentComponent, parentSuspense, optimized = false) => {\r\n        const isFragmentStart = isComment(node) && node.data === '[';\r\n        const onMismatch = () => handleMismatch(node, vnode, parentComponent, parentSuspense, isFragmentStart);\r\n        const { type, ref, shapeFlag } = vnode;\r\n        const domType = node.nodeType;\r\n        vnode.el = node;\r\n        let nextNode = null;\r\n        switch (type) {\r\n            case Text:\r\n                if (domType !== 3 /* TEXT */) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    if (node.data !== vnode.children) {\r\n                        hasMismatch = true;\r\n                        (process.env.NODE_ENV !== 'production') &&\r\n                            warn(`Hydration text mismatch:` +\r\n                                `\\n- Client: ${JSON.stringify(node.data)}` +\r\n                                `\\n- Server: ${JSON.stringify(vnode.children)}`);\r\n                        node.data = vnode.children;\r\n                    }\r\n                    nextNode = nextSibling(node);\r\n                }\r\n                break;\r\n            case Comment:\r\n                if (domType !== 8 /* COMMENT */ || isFragmentStart) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    nextNode = nextSibling(node);\r\n                }\r\n                break;\r\n            case Static:\r\n                if (domType !== 1 /* ELEMENT */) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    // determine anchor, adopt content\r\n                    nextNode = node;\r\n                    // if the static vnode has its content stripped during build,\r\n                    // adopt it from the server-rendered HTML.\r\n                    const needToAdoptContent = !vnode.children.length;\r\n                    for (let i = 0; i < vnode.staticCount; i++) {\r\n                        if (needToAdoptContent)\r\n                            vnode.children += nextNode.outerHTML;\r\n                        if (i === vnode.staticCount - 1) {\r\n                            vnode.anchor = nextNode;\r\n                        }\r\n                        nextNode = nextSibling(nextNode);\r\n                    }\r\n                    return nextNode;\r\n                }\r\n                break;\r\n            case Fragment:\r\n                if (!isFragmentStart) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, optimized);\r\n                }\r\n                break;\r\n            default:\r\n                if (shapeFlag & 1 /* ELEMENT */) {\r\n                    if (domType !== 1 /* ELEMENT */ ||\r\n                        vnode.type !== node.tagName.toLowerCase()) {\r\n                        nextNode = onMismatch();\r\n                    }\r\n                    else {\r\n                        nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, optimized);\r\n                    }\r\n                }\r\n                else if (shapeFlag & 6 /* COMPONENT */) {\r\n                    // when setting up the render effect, if the initial vnode already\r\n                    // has .el set, the component will perform hydration instead of mount\r\n                    // on its sub-tree.\r\n                    const container = parentNode(node);\r\n                    const hydrateComponent = () => {\r\n                        mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);\r\n                    };\r\n                    // async component\r\n                    const loadAsync = vnode.type.__asyncLoader;\r\n                    if (loadAsync) {\r\n                        loadAsync().then(hydrateComponent);\r\n                    }\r\n                    else {\r\n                        hydrateComponent();\r\n                    }\r\n                    // component may be async, so in the case of fragments we cannot rely\r\n                    // on component's rendered output to determine the end of the fragment\r\n                    // instead, we do a lookahead to find the end anchor node.\r\n                    nextNode = isFragmentStart\r\n                        ? locateClosingAsyncAnchor(node)\r\n                        : nextSibling(node);\r\n                }\r\n                else if (shapeFlag & 64 /* TELEPORT */) {\r\n                    if (domType !== 8 /* COMMENT */) {\r\n                        nextNode = onMismatch();\r\n                    }\r\n                    else {\r\n                        nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, optimized, rendererInternals, hydrateChildren);\r\n                    }\r\n                }\r\n                else if ( shapeFlag & 128 /* SUSPENSE */) {\r\n                    nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), optimized, rendererInternals, hydrateNode);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn('Invalid HostVNode type:', type, `(${typeof type})`);\r\n                }\r\n        }\r\n        if (ref != null && parentComponent) {\r\n            setRef(ref, null, parentComponent, parentSuspense, vnode);\r\n        }\r\n        return nextNode;\r\n    };\r\n    const hydrateElement = (el, vnode, parentComponent, parentSuspense, optimized) => {\r\n        optimized = optimized || !!vnode.dynamicChildren;\r\n        const { props, patchFlag, shapeFlag, dirs } = vnode;\r\n        // skip props & children if this is hoisted static nodes\r\n        if (patchFlag !== -1 /* HOISTED */) {\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'created');\r\n            }\r\n            // props\r\n            if (props) {\r\n                if (!optimized ||\r\n                    (patchFlag & 16 /* FULL_PROPS */ ||\r\n                        patchFlag & 32 /* HYDRATE_EVENTS */)) {\r\n                    for (const key in props) {\r\n                        if (!isReservedProp(key) && isOn(key)) {\r\n                            patchProp(el, key, null, props[key]);\r\n                        }\r\n                    }\r\n                }\r\n                else if (props.onClick) {\r\n                    // Fast path for click listeners (which is most often) to avoid\r\n                    // iterating through props.\r\n                    patchProp(el, 'onClick', null, props.onClick);\r\n                }\r\n            }\r\n            // vnode / directive hooks\r\n            let vnodeHooks;\r\n            if ((vnodeHooks = props && props.onVnodeBeforeMount)) {\r\n                invokeVNodeHook(vnodeHooks, parentComponent, vnode);\r\n            }\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');\r\n            }\r\n            if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {\r\n                queueEffectWithSuspense(() => {\r\n                    vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);\r\n                    dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');\r\n                }, parentSuspense);\r\n            }\r\n            // children\r\n            if (shapeFlag & 16 /* ARRAY_CHILDREN */ &&\r\n                // skip if element has innerHTML / textContent\r\n                !(props && (props.innerHTML || props.textContent))) {\r\n                let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, optimized);\r\n                let hasWarned = false;\r\n                while (next) {\r\n                    hasMismatch = true;\r\n                    if ((process.env.NODE_ENV !== 'production') && !hasWarned) {\r\n                        warn(`Hydration children mismatch in <${vnode.type}>: ` +\r\n                            `server rendered element contains more child nodes than client vdom.`);\r\n                        hasWarned = true;\r\n                    }\r\n                    // The SSRed DOM contains more nodes than it should. Remove them.\r\n                    const cur = next;\r\n                    next = next.nextSibling;\r\n                    remove(cur);\r\n                }\r\n            }\r\n            else if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                if (el.textContent !== vnode.children) {\r\n                    hasMismatch = true;\r\n                    (process.env.NODE_ENV !== 'production') &&\r\n                        warn(`Hydration text content mismatch in <${vnode.type}>:\\n` +\r\n                            `- Client: ${el.textContent}\\n` +\r\n                            `- Server: ${vnode.children}`);\r\n                    el.textContent = vnode.children;\r\n                }\r\n            }\r\n        }\r\n        return el.nextSibling;\r\n    };\r\n    const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, optimized) => {\r\n        optimized = optimized || !!parentVNode.dynamicChildren;\r\n        const children = parentVNode.children;\r\n        const l = children.length;\r\n        let hasWarned = false;\r\n        for (let i = 0; i < l; i++) {\r\n            const vnode = optimized\r\n                ? children[i]\r\n                : (children[i] = normalizeVNode(children[i]));\r\n            if (node) {\r\n                node = hydrateNode(node, vnode, parentComponent, parentSuspense, optimized);\r\n            }\r\n            else {\r\n                hasMismatch = true;\r\n                if ((process.env.NODE_ENV !== 'production') && !hasWarned) {\r\n                    warn(`Hydration children mismatch in <${container.tagName.toLowerCase()}>: ` +\r\n                        `server rendered element contains fewer child nodes than client vdom.`);\r\n                    hasWarned = true;\r\n                }\r\n                // the SSRed DOM didn't contain enough nodes. Mount the missing ones.\r\n                patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container));\r\n            }\r\n        }\r\n        return node;\r\n    };\r\n    const hydrateFragment = (node, vnode, parentComponent, parentSuspense, optimized) => {\r\n        const container = parentNode(node);\r\n        const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, optimized);\r\n        if (next && isComment(next) && next.data === ']') {\r\n            return nextSibling((vnode.anchor = next));\r\n        }\r\n        else {\r\n            // fragment didn't hydrate successfully, since we didn't get a end anchor\r\n            // back. This should have led to node/children mismatch warnings.\r\n            hasMismatch = true;\r\n            // since the anchor is missing, we need to create one and insert it\r\n            insert((vnode.anchor = createComment(`]`)), container, next);\r\n            return next;\r\n        }\r\n    };\r\n    const handleMismatch = (node, vnode, parentComponent, parentSuspense, isFragment) => {\r\n        hasMismatch = true;\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn(`Hydration node mismatch:\\n- Client vnode:`, vnode.type, `\\n- Server rendered DOM:`, node, node.nodeType === 3 /* TEXT */\r\n                ? `(text)`\r\n                : isComment(node) && node.data === '['\r\n                    ? `(start of fragment)`\r\n                    : ``);\r\n        vnode.el = null;\r\n        if (isFragment) {\r\n            // remove excessive fragment nodes\r\n            const end = locateClosingAsyncAnchor(node);\r\n            while (true) {\r\n                const next = nextSibling(node);\r\n                if (next && next !== end) {\r\n                    remove(next);\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        const next = nextSibling(node);\r\n        const container = parentNode(node);\r\n        remove(node);\r\n        patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container));\r\n        return next;\r\n    };\r\n    const locateClosingAsyncAnchor = (node) => {\r\n        let match = 0;\r\n        while (node) {\r\n            node = nextSibling(node);\r\n            if (node && isComment(node)) {\r\n                if (node.data === '[')\r\n                    match++;\r\n                if (node.data === ']') {\r\n                    if (match === 0) {\r\n                        return nextSibling(node);\r\n                    }\r\n                    else {\r\n                        match--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return node;\r\n    };\r\n    return [hydrate, hydrateNode];\r\n}\n\nlet supported;\r\nlet perf;\r\nfunction startMeasure(instance, type) {\r\n    if (instance.appContext.config.performance && isSupported()) {\r\n        perf.mark(`vue-${type}-${instance.uid}`);\r\n    }\r\n}\r\nfunction endMeasure(instance, type) {\r\n    if (instance.appContext.config.performance && isSupported()) {\r\n        const startTag = `vue-${type}-${instance.uid}`;\r\n        const endTag = startTag + `:end`;\r\n        perf.mark(endTag);\r\n        perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);\r\n        perf.clearMarks(startTag);\r\n        perf.clearMarks(endTag);\r\n    }\r\n}\r\nfunction isSupported() {\r\n    if (supported !== undefined) {\r\n        return supported;\r\n    }\r\n    /* eslint-disable no-restricted-globals */\r\n    if (typeof window !== 'undefined' && window.performance) {\r\n        supported = true;\r\n        perf = window.performance;\r\n    }\r\n    else {\r\n        supported = false;\r\n    }\r\n    /* eslint-enable no-restricted-globals */\r\n    return supported;\r\n}\n\n/**\r\n * This is only called in esm-bundler builds.\r\n * It is called when a renderer is created, in `baseCreateRenderer` so that\r\n * importing runtime-core is side-effects free.\r\n *\r\n * istanbul-ignore-next\r\n */\r\nfunction initFeatureFlags() {\r\n    let needWarn = false;\r\n    if (typeof __VUE_OPTIONS_API__ !== 'boolean') {\r\n        needWarn = true;\r\n        getGlobalThis().__VUE_OPTIONS_API__ = true;\r\n    }\r\n    if (typeof __VUE_PROD_DEVTOOLS__ !== 'boolean') {\r\n        needWarn = true;\r\n        getGlobalThis().__VUE_PROD_DEVTOOLS__ = false;\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') && needWarn) {\r\n        console.warn(`You are running the esm-bundler build of Vue. It is recommended to ` +\r\n            `configure your bundler to explicitly replace feature flag globals ` +\r\n            `with boolean literals to get proper tree-shaking in the final bundle. ` +\r\n            `See http://link.vuejs.org/feature-flags for more details.`);\r\n    }\r\n}\n\nconst prodEffectOptions = {\r\n    scheduler: queueJob,\r\n    // #1801, #2043 component render effects should allow recursive updates\r\n    allowRecurse: true\r\n};\r\nfunction createDevEffectOptions(instance) {\r\n    return {\r\n        scheduler: queueJob,\r\n        allowRecurse: true,\r\n        onTrack: instance.rtc ? e => invokeArrayFns(instance.rtc, e) : void 0,\r\n        onTrigger: instance.rtg ? e => invokeArrayFns(instance.rtg, e) : void 0\r\n    };\r\n}\r\nconst queuePostRenderEffect =  queueEffectWithSuspense\r\n    ;\r\nconst setRef = (rawRef, oldRawRef, parentComponent, parentSuspense, vnode) => {\r\n    if (isArray(rawRef)) {\r\n        rawRef.forEach((r, i) => setRef(r, oldRawRef && (isArray(oldRawRef) ? oldRawRef[i] : oldRawRef), parentComponent, parentSuspense, vnode));\r\n        return;\r\n    }\r\n    let value;\r\n    if (!vnode) {\r\n        value = null;\r\n    }\r\n    else {\r\n        if (vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */) {\r\n            value = vnode.component.proxy;\r\n        }\r\n        else {\r\n            value = vnode.el;\r\n        }\r\n    }\r\n    const { i: owner, r: ref } = rawRef;\r\n    if ((process.env.NODE_ENV !== 'production') && !owner) {\r\n        warn(`Missing ref owner context. ref cannot be used on hoisted vnodes. ` +\r\n            `A vnode with ref must be created inside the render function.`);\r\n        return;\r\n    }\r\n    const oldRef = oldRawRef && oldRawRef.r;\r\n    const refs = owner.refs === EMPTY_OBJ ? (owner.refs = {}) : owner.refs;\r\n    const setupState = owner.setupState;\r\n    // unset old ref\r\n    if (oldRef != null && oldRef !== ref) {\r\n        if (isString(oldRef)) {\r\n            refs[oldRef] = null;\r\n            if (hasOwn(setupState, oldRef)) {\r\n                setupState[oldRef] = null;\r\n            }\r\n        }\r\n        else if (isRef(oldRef)) {\r\n            oldRef.value = null;\r\n        }\r\n    }\r\n    if (isString(ref)) {\r\n        const doSet = () => {\r\n            refs[ref] = value;\r\n            if (hasOwn(setupState, ref)) {\r\n                setupState[ref] = value;\r\n            }\r\n        };\r\n        // #1789: for non-null values, set them after render\r\n        // null values means this is unmount and it should not overwrite another\r\n        // ref with the same key\r\n        if (value) {\r\n            doSet.id = -1;\r\n            queuePostRenderEffect(doSet, parentSuspense);\r\n        }\r\n        else {\r\n            doSet();\r\n        }\r\n    }\r\n    else if (isRef(ref)) {\r\n        const doSet = () => {\r\n            ref.value = value;\r\n        };\r\n        if (value) {\r\n            doSet.id = -1;\r\n            queuePostRenderEffect(doSet, parentSuspense);\r\n        }\r\n        else {\r\n            doSet();\r\n        }\r\n    }\r\n    else if (isFunction(ref)) {\r\n        callWithErrorHandling(ref, parentComponent, 12 /* FUNCTION_REF */, [\r\n            value,\r\n            refs\r\n        ]);\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn('Invalid template ref type:', value, `(${typeof value})`);\r\n    }\r\n};\r\n/**\r\n * The createRenderer function accepts two generic arguments:\r\n * HostNode and HostElement, corresponding to Node and Element types in the\r\n * host environment. For example, for runtime-dom, HostNode would be the DOM\r\n * `Node` interface and HostElement would be the DOM `Element` interface.\r\n *\r\n * Custom renderers can pass in the platform specific types like this:\r\n *\r\n * ``` js\r\n * const { render, createApp } = createRenderer<Node, Element>({\r\n *   patchProp,\r\n *   ...nodeOps\r\n * })\r\n * ```\r\n */\r\nfunction createRenderer(options) {\r\n    return baseCreateRenderer(options);\r\n}\r\n// Separate API for creating hydration-enabled renderer.\r\n// Hydration logic is only used when calling this function, making it\r\n// tree-shakable.\r\nfunction createHydrationRenderer(options) {\r\n    return baseCreateRenderer(options, createHydrationFunctions);\r\n}\r\n// implementation\r\nfunction baseCreateRenderer(options, createHydrationFns) {\r\n    // compile-time feature flags check\r\n    {\r\n        initFeatureFlags();\r\n    }\r\n    const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, forcePatchProp: hostForcePatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, cloneNode: hostCloneNode, insertStaticContent: hostInsertStaticContent } = options;\r\n    // Note: functions inside this closure should use `const xxx = () => {}`\r\n    // style in order to prevent being inlined by minifiers.\r\n    const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, optimized = false) => {\r\n        // patching & not same type, unmount old tree\r\n        if (n1 && !isSameVNodeType(n1, n2)) {\r\n            anchor = getNextHostNode(n1);\r\n            unmount(n1, parentComponent, parentSuspense, true);\r\n            n1 = null;\r\n        }\r\n        if (n2.patchFlag === -2 /* BAIL */) {\r\n            optimized = false;\r\n            n2.dynamicChildren = null;\r\n        }\r\n        const { type, ref, shapeFlag } = n2;\r\n        switch (type) {\r\n            case Text:\r\n                processText(n1, n2, container, anchor);\r\n                break;\r\n            case Comment:\r\n                processCommentNode(n1, n2, container, anchor);\r\n                break;\r\n            case Static:\r\n                if (n1 == null) {\r\n                    mountStaticNode(n2, container, anchor, isSVG);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    patchStaticNode(n1, n2, container, isSVG);\r\n                }\r\n                break;\r\n            case Fragment:\r\n                processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                break;\r\n            default:\r\n                if (shapeFlag & 1 /* ELEMENT */) {\r\n                    processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                }\r\n                else if (shapeFlag & 6 /* COMPONENT */) {\r\n                    processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                }\r\n                else if (shapeFlag & 64 /* TELEPORT */) {\r\n                    type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, internals);\r\n                }\r\n                else if ( shapeFlag & 128 /* SUSPENSE */) {\r\n                    type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, internals);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn('Invalid VNode type:', type, `(${typeof type})`);\r\n                }\r\n        }\r\n        // set ref\r\n        if (ref != null && parentComponent) {\r\n            setRef(ref, n1 && n1.ref, parentComponent, parentSuspense, n2);\r\n        }\r\n    };\r\n    const processText = (n1, n2, container, anchor) => {\r\n        if (n1 == null) {\r\n            hostInsert((n2.el = hostCreateText(n2.children)), container, anchor);\r\n        }\r\n        else {\r\n            const el = (n2.el = n1.el);\r\n            if (n2.children !== n1.children) {\r\n                hostSetText(el, n2.children);\r\n            }\r\n        }\r\n    };\r\n    const processCommentNode = (n1, n2, container, anchor) => {\r\n        if (n1 == null) {\r\n            hostInsert((n2.el = hostCreateComment(n2.children || '')), container, anchor);\r\n        }\r\n        else {\r\n            // there's no support for dynamic comments\r\n            n2.el = n1.el;\r\n        }\r\n    };\r\n    const mountStaticNode = (n2, container, anchor, isSVG) => {\r\n        [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);\r\n    };\r\n    /**\r\n     * Dev / HMR only\r\n     */\r\n    const patchStaticNode = (n1, n2, container, isSVG) => {\r\n        // static nodes are only patched during dev for HMR\r\n        if (n2.children !== n1.children) {\r\n            const anchor = hostNextSibling(n1.anchor);\r\n            // remove existing\r\n            removeStaticNode(n1);\r\n            [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);\r\n        }\r\n        else {\r\n            n2.el = n1.el;\r\n            n2.anchor = n1.anchor;\r\n        }\r\n    };\r\n    /**\r\n     * Dev / HMR only\r\n     */\r\n    const moveStaticNode = (vnode, container, anchor) => {\r\n        let cur = vnode.el;\r\n        const end = vnode.anchor;\r\n        while (cur && cur !== end) {\r\n            const next = hostNextSibling(cur);\r\n            hostInsert(cur, container, anchor);\r\n            cur = next;\r\n        }\r\n        hostInsert(end, container, anchor);\r\n    };\r\n    /**\r\n     * Dev / HMR only\r\n     */\r\n    const removeStaticNode = (vnode) => {\r\n        let cur = vnode.el;\r\n        while (cur && cur !== vnode.anchor) {\r\n            const next = hostNextSibling(cur);\r\n            hostRemove(cur);\r\n            cur = next;\r\n        }\r\n        hostRemove(vnode.anchor);\r\n    };\r\n    const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\r\n        isSVG = isSVG || n2.type === 'svg';\r\n        if (n1 == null) {\r\n            mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n        }\r\n        else {\r\n            patchElement(n1, n2, parentComponent, parentSuspense, isSVG, optimized);\r\n        }\r\n    };\r\n    const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\r\n        let el;\r\n        let vnodeHook;\r\n        const { type, props, shapeFlag, transition, scopeId, patchFlag, dirs } = vnode;\r\n        if (!(process.env.NODE_ENV !== 'production') &&\r\n            vnode.el &&\r\n            hostCloneNode !== undefined &&\r\n            patchFlag === -1 /* HOISTED */) {\r\n            // If a vnode has non-null el, it means it's being reused.\r\n            // Only static vnodes can be reused, so its mounted DOM nodes should be\r\n            // exactly the same, and we can simply do a clone here.\r\n            // only do this in production since cloned trees cannot be HMR updated.\r\n            el = vnode.el = hostCloneNode(vnode.el);\r\n        }\r\n        else {\r\n            el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is);\r\n            // mount children first, since some props may rely on child content\r\n            // being already rendered, e.g. `<select value>`\r\n            if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                hostSetElementText(el, vnode.children);\r\n            }\r\n            else if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== 'foreignObject', optimized || !!vnode.dynamicChildren);\r\n            }\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'created');\r\n            }\r\n            // props\r\n            if (props) {\r\n                for (const key in props) {\r\n                    if (!isReservedProp(key)) {\r\n                        hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                    }\r\n                }\r\n                if ((vnodeHook = props.onVnodeBeforeMount)) {\r\n                    invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                }\r\n            }\r\n            // scopeId\r\n            setScopeId(el, scopeId, vnode, parentComponent);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            Object.defineProperty(el, '__vnode', {\r\n                value: vnode,\r\n                enumerable: false\r\n            });\r\n            Object.defineProperty(el, '__vueParentComponent', {\r\n                value: parentComponent,\r\n                enumerable: false\r\n            });\r\n        }\r\n        if (dirs) {\r\n            invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');\r\n        }\r\n        // #1583 For inside suspense + suspense not resolved case, enter hook should call when suspense resolved\r\n        // #1689 For inside suspense + suspense resolved case, just call it\r\n        const needCallTransitionHooks = (!parentSuspense || (parentSuspense && !parentSuspense.pendingBranch)) &&\r\n            transition &&\r\n            !transition.persisted;\r\n        if (needCallTransitionHooks) {\r\n            transition.beforeEnter(el);\r\n        }\r\n        hostInsert(el, container, anchor);\r\n        if ((vnodeHook = props && props.onVnodeMounted) ||\r\n            needCallTransitionHooks ||\r\n            dirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                needCallTransitionHooks && transition.enter(el);\r\n                dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    const setScopeId = (el, scopeId, vnode, parentComponent) => {\r\n        if (scopeId) {\r\n            hostSetScopeId(el, scopeId);\r\n        }\r\n        if (parentComponent) {\r\n            const treeOwnerId = parentComponent.type.__scopeId;\r\n            // vnode's own scopeId and the current patched component's scopeId is\r\n            // different - this is a slot content node.\r\n            if (treeOwnerId && treeOwnerId !== scopeId) {\r\n                hostSetScopeId(el, treeOwnerId + '-s');\r\n            }\r\n            let subTree = parentComponent.subTree;\r\n            if ((process.env.NODE_ENV !== 'production') && subTree.type === Fragment) {\r\n                subTree =\r\n                    filterSingleRoot(subTree.children) || subTree;\r\n            }\r\n            if (vnode === subTree) {\r\n                setScopeId(el, parentComponent.vnode.scopeId, parentComponent.vnode, parentComponent.parent);\r\n            }\r\n        }\r\n    };\r\n    const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, optimized, start = 0) => {\r\n        for (let i = start; i < children.length; i++) {\r\n            const child = (children[i] = optimized\r\n                ? cloneIfMounted(children[i])\r\n                : normalizeVNode(children[i]));\r\n            patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n        }\r\n    };\r\n    const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, optimized) => {\r\n        const el = (n2.el = n1.el);\r\n        let { patchFlag, dynamicChildren, dirs } = n2;\r\n        // #1426 take the old vnode's patch flag into account since user may clone a\r\n        // compiler-generated vnode, which de-opts to FULL_PROPS\r\n        patchFlag |= n1.patchFlag & 16 /* FULL_PROPS */;\r\n        const oldProps = n1.props || EMPTY_OBJ;\r\n        const newProps = n2.props || EMPTY_OBJ;\r\n        let vnodeHook;\r\n        if ((vnodeHook = newProps.onVnodeBeforeUpdate)) {\r\n            invokeVNodeHook(vnodeHook, parentComponent, n2, n1);\r\n        }\r\n        if (dirs) {\r\n            invokeDirectiveHook(n2, n1, parentComponent, 'beforeUpdate');\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && (true ) && isHmrUpdating) {\r\n            // HMR updated, force full diff\r\n            patchFlag = 0;\r\n            optimized = false;\r\n            dynamicChildren = null;\r\n        }\r\n        if (patchFlag > 0) {\r\n            // the presence of a patchFlag means this element's render code was\r\n            // generated by the compiler and can take the fast path.\r\n            // in this path old node and new node are guaranteed to have the same shape\r\n            // (i.e. at the exact same position in the source template)\r\n            if (patchFlag & 16 /* FULL_PROPS */) {\r\n                // element props contain dynamic keys, full diff needed\r\n                patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);\r\n            }\r\n            else {\r\n                // class\r\n                // this flag is matched when the element has dynamic class bindings.\r\n                if (patchFlag & 2 /* CLASS */) {\r\n                    if (oldProps.class !== newProps.class) {\r\n                        hostPatchProp(el, 'class', null, newProps.class, isSVG);\r\n                    }\r\n                }\r\n                // style\r\n                // this flag is matched when the element has dynamic style bindings\r\n                if (patchFlag & 4 /* STYLE */) {\r\n                    hostPatchProp(el, 'style', oldProps.style, newProps.style, isSVG);\r\n                }\r\n                // props\r\n                // This flag is matched when the element has dynamic prop/attr bindings\r\n                // other than class and style. The keys of dynamic prop/attrs are saved for\r\n                // faster iteration.\r\n                // Note dynamic keys like :[foo]=\"bar\" will cause this optimization to\r\n                // bail out and go through a full diff because we need to unset the old key\r\n                if (patchFlag & 8 /* PROPS */) {\r\n                    // if the flag is present then dynamicProps must be non-null\r\n                    const propsToUpdate = n2.dynamicProps;\r\n                    for (let i = 0; i < propsToUpdate.length; i++) {\r\n                        const key = propsToUpdate[i];\r\n                        const prev = oldProps[key];\r\n                        const next = newProps[key];\r\n                        if (next !== prev ||\r\n                            (hostForcePatchProp && hostForcePatchProp(el, key))) {\r\n                            hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // text\r\n            // This flag is matched when the element has only dynamic text children.\r\n            if (patchFlag & 1 /* TEXT */) {\r\n                if (n1.children !== n2.children) {\r\n                    hostSetElementText(el, n2.children);\r\n                }\r\n            }\r\n        }\r\n        else if (!optimized && dynamicChildren == null) {\r\n            // unoptimized, full diff\r\n            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);\r\n        }\r\n        const areChildrenSVG = isSVG && n2.type !== 'foreignObject';\r\n        if (dynamicChildren) {\r\n            patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG);\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                (true ) &&\r\n                parentComponent &&\r\n                parentComponent.type.__hmrId) {\r\n                traverseStaticChildren(n1, n2);\r\n            }\r\n        }\r\n        else if (!optimized) {\r\n            // full diff\r\n            patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG);\r\n        }\r\n        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);\r\n                dirs && invokeDirectiveHook(n2, n1, parentComponent, 'updated');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    // The fast path for blocks.\r\n    const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG) => {\r\n        for (let i = 0; i < newChildren.length; i++) {\r\n            const oldVNode = oldChildren[i];\r\n            const newVNode = newChildren[i];\r\n            // Determine the container (parent element) for the patch.\r\n            const container = \r\n            // - In the case of a Fragment, we need to provide the actual parent\r\n            // of the Fragment itself so it can move its children.\r\n            oldVNode.type === Fragment ||\r\n                // - In the case of different nodes, there is going to be a replacement\r\n                // which also requires the correct parent container\r\n                !isSameVNodeType(oldVNode, newVNode) ||\r\n                // - In the case of a component, it could contain anything.\r\n                oldVNode.shapeFlag & 6 /* COMPONENT */ ||\r\n                oldVNode.shapeFlag & 64 /* TELEPORT */\r\n                ? hostParentNode(oldVNode.el)\r\n                : // In other cases, the parent container is not actually used so we\r\n                    // just pass the block element here to avoid a DOM parentNode call.\r\n                    fallbackContainer;\r\n            patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, true);\r\n        }\r\n    };\r\n    const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {\r\n        if (oldProps !== newProps) {\r\n            for (const key in newProps) {\r\n                // empty string is not valid prop\r\n                if (isReservedProp(key))\r\n                    continue;\r\n                const next = newProps[key];\r\n                const prev = oldProps[key];\r\n                if (next !== prev ||\r\n                    (hostForcePatchProp && hostForcePatchProp(el, key))) {\r\n                    hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                }\r\n            }\r\n            if (oldProps !== EMPTY_OBJ) {\r\n                for (const key in oldProps) {\r\n                    if (!isReservedProp(key) && !(key in newProps)) {\r\n                        hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\r\n        const fragmentStartAnchor = (n2.el = n1 ? n1.el : hostCreateText(''));\r\n        const fragmentEndAnchor = (n2.anchor = n1 ? n1.anchor : hostCreateText(''));\r\n        let { patchFlag, dynamicChildren } = n2;\r\n        if (patchFlag > 0) {\r\n            optimized = true;\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n            // HMR updated, force full diff\r\n            patchFlag = 0;\r\n            optimized = false;\r\n            dynamicChildren = null;\r\n        }\r\n        if (n1 == null) {\r\n            hostInsert(fragmentStartAnchor, container, anchor);\r\n            hostInsert(fragmentEndAnchor, container, anchor);\r\n            // a fragment can only have array children\r\n            // since they are either generated by the compiler, or implicitly created\r\n            // from arrays.\r\n            mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, optimized);\r\n        }\r\n        else {\r\n            if (patchFlag > 0 &&\r\n                patchFlag & 64 /* STABLE_FRAGMENT */ &&\r\n                dynamicChildren) {\r\n                // a stable fragment (template root or <template v-for>) doesn't need to\r\n                // patch children order, but it may contain dynamicChildren.\r\n                patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG);\r\n                if ((process.env.NODE_ENV !== 'production') && parentComponent && parentComponent.type.__hmrId) {\r\n                    traverseStaticChildren(n1, n2);\r\n                }\r\n                else if (\r\n                // #2080 if the stable fragment has a key, it's a <template v-for> that may\r\n                //  get moved around. Make sure all root level vnodes inherit el.\r\n                // #2134 or if it's a component root, it may also get moved around\r\n                // as the component is being moved.\r\n                n2.key != null ||\r\n                    (parentComponent && n2 === parentComponent.subTree)) {\r\n                    traverseStaticChildren(n1, n2, true /* shallow */);\r\n                }\r\n            }\r\n            else {\r\n                // keyed / unkeyed, or manual fragments.\r\n                // for keyed & unkeyed, since they are compiler generated from v-for,\r\n                // each child is guaranteed to be a block so the fragment will never\r\n                // have dynamicChildren.\r\n                patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, optimized);\r\n            }\r\n        }\r\n    };\r\n    const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\r\n        if (n1 == null) {\r\n            if (n2.shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */) {\r\n                parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);\r\n            }\r\n            else {\r\n                mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n            }\r\n        }\r\n        else {\r\n            updateComponent(n1, n2, optimized);\r\n        }\r\n    };\r\n    const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\r\n        const instance = (initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense));\r\n        if ((process.env.NODE_ENV !== 'production') && (true ) && instance.type.__hmrId) {\r\n            registerHMR(instance);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            pushWarningContext(initialVNode);\r\n            startMeasure(instance, `mount`);\r\n        }\r\n        // inject renderer internals for keepAlive\r\n        if (isKeepAlive(initialVNode)) {\r\n            instance.ctx.renderer = internals;\r\n        }\r\n        // resolve props and slots for setup context\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            startMeasure(instance, `init`);\r\n        }\r\n        setupComponent(instance);\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            endMeasure(instance, `init`);\r\n        }\r\n        // setup() is async. This component relies on async logic to be resolved\r\n        // before proceeding\r\n        if ( instance.asyncDep) {\r\n            parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);\r\n            // Give it a placeholder if this is not hydration\r\n            // TODO handle self-defined fallback\r\n            if (!initialVNode.el) {\r\n                const placeholder = (instance.subTree = createVNode(Comment));\r\n                processCommentNode(null, placeholder, container, anchor);\r\n            }\r\n            return;\r\n        }\r\n        setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            popWarningContext();\r\n            endMeasure(instance, `mount`);\r\n        }\r\n    };\r\n    const updateComponent = (n1, n2, optimized) => {\r\n        const instance = (n2.component = n1.component);\r\n        if (shouldUpdateComponent(n1, n2, optimized)) {\r\n            if (\r\n                instance.asyncDep &&\r\n                !instance.asyncResolved) {\r\n                // async & still pending - just update props and slots\r\n                // since the component's reactive effect for render isn't set-up yet\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    pushWarningContext(n2);\r\n                }\r\n                updateComponentPreRender(instance, n2, optimized);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    popWarningContext();\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                // normal update\r\n                instance.next = n2;\r\n                // in case the child component is also queued, remove it to avoid\r\n                // double updating the same child component in the same flush.\r\n                invalidateJob(instance.update);\r\n                // instance.update is the reactive effect runner.\r\n                instance.update();\r\n            }\r\n        }\r\n        else {\r\n            // no update needed. just copy over properties\r\n            n2.component = n1.component;\r\n            n2.el = n1.el;\r\n            instance.vnode = n2;\r\n        }\r\n    };\r\n    const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {\r\n        // create reactive effect for rendering\r\n        instance.update = effect(function componentEffect() {\r\n            if (!instance.isMounted) {\r\n                let vnodeHook;\r\n                const { el, props } = initialVNode;\r\n                const { bm, m, parent } = instance;\r\n                // beforeMount hook\r\n                if (bm) {\r\n                    invokeArrayFns(bm);\r\n                }\r\n                // onVnodeBeforeMount\r\n                if ((vnodeHook = props && props.onVnodeBeforeMount)) {\r\n                    invokeVNodeHook(vnodeHook, parent, initialVNode);\r\n                }\r\n                // render\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    startMeasure(instance, `render`);\r\n                }\r\n                const subTree = (instance.subTree = renderComponentRoot(instance));\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    endMeasure(instance, `render`);\r\n                }\r\n                if (el && hydrateNode) {\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        startMeasure(instance, `hydrate`);\r\n                    }\r\n                    // vnode has adopted host node - perform hydration instead of mount.\r\n                    hydrateNode(initialVNode.el, subTree, instance, parentSuspense);\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        endMeasure(instance, `hydrate`);\r\n                    }\r\n                }\r\n                else {\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        startMeasure(instance, `patch`);\r\n                    }\r\n                    patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        endMeasure(instance, `patch`);\r\n                    }\r\n                    initialVNode.el = subTree.el;\r\n                }\r\n                // mounted hook\r\n                if (m) {\r\n                    queuePostRenderEffect(m, parentSuspense);\r\n                }\r\n                // onVnodeMounted\r\n                if ((vnodeHook = props && props.onVnodeMounted)) {\r\n                    queuePostRenderEffect(() => {\r\n                        invokeVNodeHook(vnodeHook, parent, initialVNode);\r\n                    }, parentSuspense);\r\n                }\r\n                // activated hook for keep-alive roots.\r\n                // #1742 activated hook must be accessed after first render\r\n                // since the hook may be injected by a child keep-alive\r\n                const { a } = instance;\r\n                if (a &&\r\n                    initialVNode.shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n                    queuePostRenderEffect(a, parentSuspense);\r\n                }\r\n                instance.isMounted = true;\r\n            }\r\n            else {\r\n                // updateComponent\r\n                // This is triggered by mutation of component's own state (next: null)\r\n                // OR parent calling processComponent (next: VNode)\r\n                let { next, bu, u, parent, vnode } = instance;\r\n                let originNext = next;\r\n                let vnodeHook;\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    pushWarningContext(next || instance.vnode);\r\n                }\r\n                if (next) {\r\n                    next.el = vnode.el;\r\n                    updateComponentPreRender(instance, next, optimized);\r\n                }\r\n                else {\r\n                    next = vnode;\r\n                }\r\n                // beforeUpdate hook\r\n                if (bu) {\r\n                    invokeArrayFns(bu);\r\n                }\r\n                // onVnodeBeforeUpdate\r\n                if ((vnodeHook = next.props && next.props.onVnodeBeforeUpdate)) {\r\n                    invokeVNodeHook(vnodeHook, parent, next, vnode);\r\n                }\r\n                // render\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    startMeasure(instance, `render`);\r\n                }\r\n                const nextTree = renderComponentRoot(instance);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    endMeasure(instance, `render`);\r\n                }\r\n                const prevTree = instance.subTree;\r\n                instance.subTree = nextTree;\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    startMeasure(instance, `patch`);\r\n                }\r\n                patch(prevTree, nextTree, \r\n                // parent may have changed if it's in a teleport\r\n                hostParentNode(prevTree.el), \r\n                // anchor may have changed if it's in a fragment\r\n                getNextHostNode(prevTree), instance, parentSuspense, isSVG);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    endMeasure(instance, `patch`);\r\n                }\r\n                next.el = nextTree.el;\r\n                if (originNext === null) {\r\n                    // self-triggered update. In case of HOC, update parent component\r\n                    // vnode el. HOC is indicated by parent instance's subTree pointing\r\n                    // to child component's vnode\r\n                    updateHOCHostEl(instance, nextTree.el);\r\n                }\r\n                // updated hook\r\n                if (u) {\r\n                    queuePostRenderEffect(u, parentSuspense);\r\n                }\r\n                // onVnodeUpdated\r\n                if ((vnodeHook = next.props && next.props.onVnodeUpdated)) {\r\n                    queuePostRenderEffect(() => {\r\n                        invokeVNodeHook(vnodeHook, parent, next, vnode);\r\n                    }, parentSuspense);\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                    devtoolsComponentUpdated(instance);\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    popWarningContext();\r\n                }\r\n            }\r\n        }, (process.env.NODE_ENV !== 'production') ? createDevEffectOptions(instance) : prodEffectOptions);\r\n    };\r\n    const updateComponentPreRender = (instance, nextVNode, optimized) => {\r\n        nextVNode.component = instance;\r\n        const prevProps = instance.vnode.props;\r\n        instance.vnode = nextVNode;\r\n        instance.next = null;\r\n        updateProps(instance, nextVNode.props, prevProps, optimized);\r\n        updateSlots(instance, nextVNode.children);\r\n        // props update may have triggered pre-flush watchers.\r\n        // flush them before the render update.\r\n        flushPreFlushCbs(undefined, instance.update);\r\n    };\r\n    const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized = false) => {\r\n        const c1 = n1 && n1.children;\r\n        const prevShapeFlag = n1 ? n1.shapeFlag : 0;\r\n        const c2 = n2.children;\r\n        const { patchFlag, shapeFlag } = n2;\r\n        // fast path\r\n        if (patchFlag > 0) {\r\n            if (patchFlag & 128 /* KEYED_FRAGMENT */) {\r\n                // this could be either fully-keyed or mixed (some keyed some not)\r\n                // presence of patchFlag means children are guaranteed to be arrays\r\n                patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                return;\r\n            }\r\n            else if (patchFlag & 256 /* UNKEYED_FRAGMENT */) {\r\n                // unkeyed\r\n                patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                return;\r\n            }\r\n        }\r\n        // children has 3 possibilities: text, array or no children.\r\n        if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n            // text children fast path\r\n            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                unmountChildren(c1, parentComponent, parentSuspense);\r\n            }\r\n            if (c2 !== c1) {\r\n                hostSetElementText(container, c2);\r\n            }\r\n        }\r\n        else {\r\n            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                // prev children was array\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    // two arrays, cannot assume anything, do full diff\r\n                    patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                }\r\n                else {\r\n                    // no new children, just unmount old\r\n                    unmountChildren(c1, parentComponent, parentSuspense, true);\r\n                }\r\n            }\r\n            else {\r\n                // prev children was text OR null\r\n                // new children is array OR null\r\n                if (prevShapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                    hostSetElementText(container, '');\r\n                }\r\n                // mount new if array\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\r\n        c1 = c1 || EMPTY_ARR;\r\n        c2 = c2 || EMPTY_ARR;\r\n        const oldLength = c1.length;\r\n        const newLength = c2.length;\r\n        const commonLength = Math.min(oldLength, newLength);\r\n        let i;\r\n        for (i = 0; i < commonLength; i++) {\r\n            const nextChild = (c2[i] = optimized\r\n                ? cloneIfMounted(c2[i])\r\n                : normalizeVNode(c2[i]));\r\n            patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, optimized);\r\n        }\r\n        if (oldLength > newLength) {\r\n            // remove old\r\n            unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);\r\n        }\r\n        else {\r\n            // mount new\r\n            mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, commonLength);\r\n        }\r\n    };\r\n    // can be all-keyed or mixed\r\n    const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized) => {\r\n        let i = 0;\r\n        const l2 = c2.length;\r\n        let e1 = c1.length - 1; // prev ending index\r\n        let e2 = l2 - 1; // next ending index\r\n        // 1. sync from start\r\n        // (a b) c\r\n        // (a b) d e\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[i];\r\n            const n2 = (c2[i] = optimized\r\n                ? cloneIfMounted(c2[i])\r\n                : normalizeVNode(c2[i]));\r\n            if (isSameVNodeType(n1, n2)) {\r\n                patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, optimized);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        // 2. sync from end\r\n        // a (b c)\r\n        // d e (b c)\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[e1];\r\n            const n2 = (c2[e2] = optimized\r\n                ? cloneIfMounted(c2[e2])\r\n                : normalizeVNode(c2[e2]));\r\n            if (isSameVNodeType(n1, n2)) {\r\n                patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, optimized);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            e1--;\r\n            e2--;\r\n        }\r\n        // 3. common sequence + mount\r\n        // (a b)\r\n        // (a b) c\r\n        // i = 2, e1 = 1, e2 = 2\r\n        // (a b)\r\n        // c (a b)\r\n        // i = 0, e1 = -1, e2 = 0\r\n        if (i > e1) {\r\n            if (i <= e2) {\r\n                const nextPos = e2 + 1;\r\n                const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;\r\n                while (i <= e2) {\r\n                    patch(null, (c2[i] = optimized\r\n                        ? cloneIfMounted(c2[i])\r\n                        : normalizeVNode(c2[i])), container, anchor, parentComponent, parentSuspense, isSVG);\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        // 4. common sequence + unmount\r\n        // (a b) c\r\n        // (a b)\r\n        // i = 2, e1 = 2, e2 = 1\r\n        // a (b c)\r\n        // (b c)\r\n        // i = 0, e1 = 0, e2 = -1\r\n        else if (i > e2) {\r\n            while (i <= e1) {\r\n                unmount(c1[i], parentComponent, parentSuspense, true);\r\n                i++;\r\n            }\r\n        }\r\n        // 5. unknown sequence\r\n        // [i ... e1 + 1]: a b [c d e] f g\r\n        // [i ... e2 + 1]: a b [e d c h] f g\r\n        // i = 2, e1 = 4, e2 = 5\r\n        else {\r\n            const s1 = i; // prev starting index\r\n            const s2 = i; // next starting index\r\n            // 5.1 build key:index map for newChildren\r\n            const keyToNewIndexMap = new Map();\r\n            for (i = s2; i <= e2; i++) {\r\n                const nextChild = (c2[i] = optimized\r\n                    ? cloneIfMounted(c2[i])\r\n                    : normalizeVNode(c2[i]));\r\n                if (nextChild.key != null) {\r\n                    if ((process.env.NODE_ENV !== 'production') && keyToNewIndexMap.has(nextChild.key)) {\r\n                        warn(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);\r\n                    }\r\n                    keyToNewIndexMap.set(nextChild.key, i);\r\n                }\r\n            }\r\n            // 5.2 loop through old children left to be patched and try to patch\r\n            // matching nodes & remove nodes that are no longer present\r\n            let j;\r\n            let patched = 0;\r\n            const toBePatched = e2 - s2 + 1;\r\n            let moved = false;\r\n            // used to track whether any node has moved\r\n            let maxNewIndexSoFar = 0;\r\n            // works as Map<newIndex, oldIndex>\r\n            // Note that oldIndex is offset by +1\r\n            // and oldIndex = 0 is a special value indicating the new node has\r\n            // no corresponding old node.\r\n            // used for determining longest stable subsequence\r\n            const newIndexToOldIndexMap = new Array(toBePatched);\r\n            for (i = 0; i < toBePatched; i++)\r\n                newIndexToOldIndexMap[i] = 0;\r\n            for (i = s1; i <= e1; i++) {\r\n                const prevChild = c1[i];\r\n                if (patched >= toBePatched) {\r\n                    // all new children have been patched so this can only be a removal\r\n                    unmount(prevChild, parentComponent, parentSuspense, true);\r\n                    continue;\r\n                }\r\n                let newIndex;\r\n                if (prevChild.key != null) {\r\n                    newIndex = keyToNewIndexMap.get(prevChild.key);\r\n                }\r\n                else {\r\n                    // key-less node, try to locate a key-less node of the same type\r\n                    for (j = s2; j <= e2; j++) {\r\n                        if (newIndexToOldIndexMap[j - s2] === 0 &&\r\n                            isSameVNodeType(prevChild, c2[j])) {\r\n                            newIndex = j;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (newIndex === undefined) {\r\n                    unmount(prevChild, parentComponent, parentSuspense, true);\r\n                }\r\n                else {\r\n                    newIndexToOldIndexMap[newIndex - s2] = i + 1;\r\n                    if (newIndex >= maxNewIndexSoFar) {\r\n                        maxNewIndexSoFar = newIndex;\r\n                    }\r\n                    else {\r\n                        moved = true;\r\n                    }\r\n                    patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, optimized);\r\n                    patched++;\r\n                }\r\n            }\r\n            // 5.3 move and mount\r\n            // generate longest stable subsequence only when nodes have moved\r\n            const increasingNewIndexSequence = moved\r\n                ? getSequence(newIndexToOldIndexMap)\r\n                : EMPTY_ARR;\r\n            j = increasingNewIndexSequence.length - 1;\r\n            // looping backwards so that we can use last patched node as anchor\r\n            for (i = toBePatched - 1; i >= 0; i--) {\r\n                const nextIndex = s2 + i;\r\n                const nextChild = c2[nextIndex];\r\n                const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;\r\n                if (newIndexToOldIndexMap[i] === 0) {\r\n                    // mount new\r\n                    patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG);\r\n                }\r\n                else if (moved) {\r\n                    // move if:\r\n                    // There is no stable subsequence (e.g. a reverse)\r\n                    // OR current node is not among the stable sequence\r\n                    if (j < 0 || i !== increasingNewIndexSequence[j]) {\r\n                        move(nextChild, container, anchor, 2 /* REORDER */);\r\n                    }\r\n                    else {\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const move = (vnode, container, anchor, moveType, parentSuspense = null) => {\r\n        const { el, type, transition, children, shapeFlag } = vnode;\r\n        if (shapeFlag & 6 /* COMPONENT */) {\r\n            move(vnode.component.subTree, container, anchor, moveType);\r\n            return;\r\n        }\r\n        if ( shapeFlag & 128 /* SUSPENSE */) {\r\n            vnode.suspense.move(container, anchor, moveType);\r\n            return;\r\n        }\r\n        if (shapeFlag & 64 /* TELEPORT */) {\r\n            type.move(vnode, container, anchor, internals);\r\n            return;\r\n        }\r\n        if (type === Fragment) {\r\n            hostInsert(el, container, anchor);\r\n            for (let i = 0; i < children.length; i++) {\r\n                move(children[i], container, anchor, moveType);\r\n            }\r\n            hostInsert(vnode.anchor, container, anchor);\r\n            return;\r\n        }\r\n        // static node move can only happen when force updating HMR\r\n        if ((process.env.NODE_ENV !== 'production') && type === Static) {\r\n            moveStaticNode(vnode, container, anchor);\r\n            return;\r\n        }\r\n        // single nodes\r\n        const needTransition = moveType !== 2 /* REORDER */ &&\r\n            shapeFlag & 1 /* ELEMENT */ &&\r\n            transition;\r\n        if (needTransition) {\r\n            if (moveType === 0 /* ENTER */) {\r\n                transition.beforeEnter(el);\r\n                hostInsert(el, container, anchor);\r\n                queuePostRenderEffect(() => transition.enter(el), parentSuspense);\r\n            }\r\n            else {\r\n                const { leave, delayLeave, afterLeave } = transition;\r\n                const remove = () => hostInsert(el, container, anchor);\r\n                const performLeave = () => {\r\n                    leave(el, () => {\r\n                        remove();\r\n                        afterLeave && afterLeave();\r\n                    });\r\n                };\r\n                if (delayLeave) {\r\n                    delayLeave(el, remove, performLeave);\r\n                }\r\n                else {\r\n                    performLeave();\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            hostInsert(el, container, anchor);\r\n        }\r\n    };\r\n    const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {\r\n        const { type, props, ref, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;\r\n        // unset ref\r\n        if (ref != null && parentComponent) {\r\n            setRef(ref, null, parentComponent, parentSuspense, null);\r\n        }\r\n        if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n            parentComponent.ctx.deactivate(vnode);\r\n            return;\r\n        }\r\n        const shouldInvokeDirs = shapeFlag & 1 /* ELEMENT */ && dirs;\r\n        let vnodeHook;\r\n        if ((vnodeHook = props && props.onVnodeBeforeUnmount)) {\r\n            invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n        }\r\n        if (shapeFlag & 6 /* COMPONENT */) {\r\n            unmountComponent(vnode.component, parentSuspense, doRemove);\r\n        }\r\n        else {\r\n            if ( shapeFlag & 128 /* SUSPENSE */) {\r\n                vnode.suspense.unmount(parentSuspense, doRemove);\r\n                return;\r\n            }\r\n            if (shouldInvokeDirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'beforeUnmount');\r\n            }\r\n            if (dynamicChildren &&\r\n                // #1153: fast path should not be taken for non-stable (v-for) fragments\r\n                (type !== Fragment ||\r\n                    (patchFlag > 0 && patchFlag & 64 /* STABLE_FRAGMENT */))) {\r\n                // fast path for block nodes: only need to unmount dynamic children.\r\n                unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);\r\n            }\r\n            else if ((type === Fragment &&\r\n                (patchFlag & 128 /* KEYED_FRAGMENT */ ||\r\n                    patchFlag & 256 /* UNKEYED_FRAGMENT */)) ||\r\n                (!optimized && shapeFlag & 16 /* ARRAY_CHILDREN */)) {\r\n                unmountChildren(children, parentComponent, parentSuspense);\r\n            }\r\n            // an unmounted teleport should always remove its children if not disabled\r\n            if (shapeFlag & 64 /* TELEPORT */ &&\r\n                (doRemove || !isTeleportDisabled(vnode.props))) {\r\n                vnode.type.remove(vnode, internals);\r\n            }\r\n            if (doRemove) {\r\n                remove(vnode);\r\n            }\r\n        }\r\n        if ((vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                shouldInvokeDirs &&\r\n                    invokeDirectiveHook(vnode, null, parentComponent, 'unmounted');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    const remove = vnode => {\r\n        const { type, el, anchor, transition } = vnode;\r\n        if (type === Fragment) {\r\n            removeFragment(el, anchor);\r\n            return;\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && type === Static) {\r\n            removeStaticNode(vnode);\r\n            return;\r\n        }\r\n        const performRemove = () => {\r\n            hostRemove(el);\r\n            if (transition && !transition.persisted && transition.afterLeave) {\r\n                transition.afterLeave();\r\n            }\r\n        };\r\n        if (vnode.shapeFlag & 1 /* ELEMENT */ &&\r\n            transition &&\r\n            !transition.persisted) {\r\n            const { leave, delayLeave } = transition;\r\n            const performLeave = () => leave(el, performRemove);\r\n            if (delayLeave) {\r\n                delayLeave(vnode.el, performRemove, performLeave);\r\n            }\r\n            else {\r\n                performLeave();\r\n            }\r\n        }\r\n        else {\r\n            performRemove();\r\n        }\r\n    };\r\n    const removeFragment = (cur, end) => {\r\n        // For fragments, directly remove all contained DOM nodes.\r\n        // (fragment child nodes cannot have transition)\r\n        let next;\r\n        while (cur !== end) {\r\n            next = hostNextSibling(cur);\r\n            hostRemove(cur);\r\n            cur = next;\r\n        }\r\n        hostRemove(end);\r\n    };\r\n    const unmountComponent = (instance, parentSuspense, doRemove) => {\r\n        if ((process.env.NODE_ENV !== 'production') && (true ) && instance.type.__hmrId) {\r\n            unregisterHMR(instance);\r\n        }\r\n        const { bum, effects, update, subTree, um } = instance;\r\n        // beforeUnmount hook\r\n        if (bum) {\r\n            invokeArrayFns(bum);\r\n        }\r\n        if (effects) {\r\n            for (let i = 0; i < effects.length; i++) {\r\n                stop(effects[i]);\r\n            }\r\n        }\r\n        // update may be null if a component is unmounted before its async\r\n        // setup has resolved.\r\n        if (update) {\r\n            stop(update);\r\n            unmount(subTree, instance, parentSuspense, doRemove);\r\n        }\r\n        // unmounted hook\r\n        if (um) {\r\n            queuePostRenderEffect(um, parentSuspense);\r\n        }\r\n        queuePostRenderEffect(() => {\r\n            instance.isUnmounted = true;\r\n        }, parentSuspense);\r\n        // A component with async dep inside a pending suspense is unmounted before\r\n        // its async dep resolves. This should remove the dep from the suspense, and\r\n        // cause the suspense to resolve immediately if that was the last dep.\r\n        if (\r\n            parentSuspense &&\r\n            parentSuspense.pendingBranch &&\r\n            !parentSuspense.isUnmounted &&\r\n            instance.asyncDep &&\r\n            !instance.asyncResolved &&\r\n            instance.suspenseId === parentSuspense.pendingId) {\r\n            parentSuspense.deps--;\r\n            if (parentSuspense.deps === 0) {\r\n                parentSuspense.resolve();\r\n            }\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            devtoolsComponentRemoved(instance);\r\n        }\r\n    };\r\n    const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {\r\n        for (let i = start; i < children.length; i++) {\r\n            unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);\r\n        }\r\n    };\r\n    const getNextHostNode = vnode => {\r\n        if (vnode.shapeFlag & 6 /* COMPONENT */) {\r\n            return getNextHostNode(vnode.component.subTree);\r\n        }\r\n        if ( vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n            return vnode.suspense.next();\r\n        }\r\n        return hostNextSibling((vnode.anchor || vnode.el));\r\n    };\r\n    const render = (vnode, container) => {\r\n        if (vnode == null) {\r\n            if (container._vnode) {\r\n                unmount(container._vnode, null, null, true);\r\n            }\r\n        }\r\n        else {\r\n            patch(container._vnode || null, vnode, container);\r\n        }\r\n        flushPostFlushCbs();\r\n        container._vnode = vnode;\r\n    };\r\n    const internals = {\r\n        p: patch,\r\n        um: unmount,\r\n        m: move,\r\n        r: remove,\r\n        mt: mountComponent,\r\n        mc: mountChildren,\r\n        pc: patchChildren,\r\n        pbc: patchBlockChildren,\r\n        n: getNextHostNode,\r\n        o: options\r\n    };\r\n    let hydrate;\r\n    let hydrateNode;\r\n    if (createHydrationFns) {\r\n        [hydrate, hydrateNode] = createHydrationFns(internals);\r\n    }\r\n    return {\r\n        render,\r\n        hydrate,\r\n        createApp: createAppAPI(render, hydrate)\r\n    };\r\n}\r\nfunction invokeVNodeHook(hook, instance, vnode, prevVNode = null) {\r\n    callWithAsyncErrorHandling(hook, instance, 7 /* VNODE_HOOK */, [\r\n        vnode,\r\n        prevVNode\r\n    ]);\r\n}\r\n/**\r\n * #1156\r\n * When a component is HMR-enabled, we need to make sure that all static nodes\r\n * inside a block also inherit the DOM element from the previous tree so that\r\n * HMR updates (which are full updates) can retrieve the element for patching.\r\n *\r\n * #2080\r\n * Inside keyed `template` fragment static children, if a fragment is moved,\r\n * the children will always moved so that need inherit el form previous nodes\r\n * to ensure correct moved position.\r\n */\r\nfunction traverseStaticChildren(n1, n2, shallow = false) {\r\n    const ch1 = n1.children;\r\n    const ch2 = n2.children;\r\n    if (isArray(ch1) && isArray(ch2)) {\r\n        for (let i = 0; i < ch1.length; i++) {\r\n            // this is only called in the optimized path so array children are\r\n            // guaranteed to be vnodes\r\n            const c1 = ch1[i];\r\n            let c2 = ch2[i];\r\n            if (c2.shapeFlag & 1 /* ELEMENT */ && !c2.dynamicChildren) {\r\n                if (c2.patchFlag <= 0 || c2.patchFlag === 32 /* HYDRATE_EVENTS */) {\r\n                    c2 = ch2[i] = cloneIfMounted(ch2[i]);\r\n                    c2.el = c1.el;\r\n                }\r\n                if (!shallow)\r\n                    traverseStaticChildren(c1, c2);\r\n            }\r\n            // also inherit for comment nodes, but not placeholders (e.g. v-if which\r\n            // would have received .el during block patch)\r\n            if ((process.env.NODE_ENV !== 'production') && c2.type === Comment && !c2.el) {\r\n                c2.el = c1.el;\r\n            }\r\n        }\r\n    }\r\n}\r\n// https://en.wikipedia.org/wiki/Longest_increasing_subsequence\r\nfunction getSequence(arr) {\r\n    const p = arr.slice();\r\n    const result = [0];\r\n    let i, j, u, v, c;\r\n    const len = arr.length;\r\n    for (i = 0; i < len; i++) {\r\n        const arrI = arr[i];\r\n        if (arrI !== 0) {\r\n            j = result[result.length - 1];\r\n            if (arr[j] < arrI) {\r\n                p[i] = j;\r\n                result.push(i);\r\n                continue;\r\n            }\r\n            u = 0;\r\n            v = result.length - 1;\r\n            while (u < v) {\r\n                c = ((u + v) / 2) | 0;\r\n                if (arr[result[c]] < arrI) {\r\n                    u = c + 1;\r\n                }\r\n                else {\r\n                    v = c;\r\n                }\r\n            }\r\n            if (arrI < arr[result[u]]) {\r\n                if (u > 0) {\r\n                    p[i] = result[u - 1];\r\n                }\r\n                result[u] = i;\r\n            }\r\n        }\r\n    }\r\n    u = result.length;\r\n    v = result[u - 1];\r\n    while (u-- > 0) {\r\n        result[u] = v;\r\n        v = p[v];\r\n    }\r\n    return result;\r\n}\n\nconst isTeleport = (type) => type.__isTeleport;\r\nconst isTeleportDisabled = (props) => props && (props.disabled || props.disabled === '');\r\nconst resolveTarget = (props, select) => {\r\n    const targetSelector = props && props.to;\r\n    if (isString(targetSelector)) {\r\n        if (!select) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Current renderer does not support string target for Teleports. ` +\r\n                    `(missing querySelector renderer option)`);\r\n            return null;\r\n        }\r\n        else {\r\n            const target = select(targetSelector);\r\n            if (!target) {\r\n                (process.env.NODE_ENV !== 'production') &&\r\n                    warn(`Failed to locate Teleport target with selector \"${targetSelector}\". ` +\r\n                        `Note the target element must exist before the component is mounted - ` +\r\n                        `i.e. the target cannot be rendered by the component itself, and ` +\r\n                        `ideally should be outside of the entire Vue component tree.`);\r\n            }\r\n            return target;\r\n        }\r\n    }\r\n    else {\r\n        if ((process.env.NODE_ENV !== 'production') && !targetSelector && !isTeleportDisabled(props)) {\r\n            warn(`Invalid Teleport target: ${targetSelector}`);\r\n        }\r\n        return targetSelector;\r\n    }\r\n};\r\nconst TeleportImpl = {\r\n    __isTeleport: true,\r\n    process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, internals) {\r\n        const { mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: { insert, querySelector, createText, createComment } } = internals;\r\n        const disabled = isTeleportDisabled(n2.props);\r\n        const { shapeFlag, children } = n2;\r\n        if (n1 == null) {\r\n            // insert anchors in the main view\r\n            const placeholder = (n2.el = (process.env.NODE_ENV !== 'production')\r\n                ? createComment('teleport start')\r\n                : createText(''));\r\n            const mainAnchor = (n2.anchor = (process.env.NODE_ENV !== 'production')\r\n                ? createComment('teleport end')\r\n                : createText(''));\r\n            insert(placeholder, container, anchor);\r\n            insert(mainAnchor, container, anchor);\r\n            const target = (n2.target = resolveTarget(n2.props, querySelector));\r\n            const targetAnchor = (n2.targetAnchor = createText(''));\r\n            if (target) {\r\n                insert(targetAnchor, target);\r\n            }\r\n            else if ((process.env.NODE_ENV !== 'production') && !disabled) {\r\n                warn('Invalid Teleport target on mount:', target, `(${typeof target})`);\r\n            }\r\n            const mount = (container, anchor) => {\r\n                // Teleport *always* has Array children. This is enforced in both the\r\n                // compiler and vnode children normalization.\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    mountChildren(children, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                }\r\n            };\r\n            if (disabled) {\r\n                mount(container, mainAnchor);\r\n            }\r\n            else if (target) {\r\n                mount(target, targetAnchor);\r\n            }\r\n        }\r\n        else {\r\n            // update content\r\n            n2.el = n1.el;\r\n            const mainAnchor = (n2.anchor = n1.anchor);\r\n            const target = (n2.target = n1.target);\r\n            const targetAnchor = (n2.targetAnchor = n1.targetAnchor);\r\n            const wasDisabled = isTeleportDisabled(n1.props);\r\n            const currentContainer = wasDisabled ? container : target;\r\n            const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;\r\n            if (n2.dynamicChildren) {\r\n                // fast path when the teleport happens to be a block root\r\n                patchBlockChildren(n1.dynamicChildren, n2.dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG);\r\n                // even in block tree mode we need to make sure all root-level nodes\r\n                // in the teleport inherit previous DOM references so that they can\r\n                // be moved in future patches.\r\n                traverseStaticChildren(n1, n2, true);\r\n            }\r\n            else if (!optimized) {\r\n                patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG);\r\n            }\r\n            if (disabled) {\r\n                if (!wasDisabled) {\r\n                    // enabled -> disabled\r\n                    // move into main container\r\n                    moveTeleport(n2, container, mainAnchor, internals, 1 /* TOGGLE */);\r\n                }\r\n            }\r\n            else {\r\n                // target changed\r\n                if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {\r\n                    const nextTarget = (n2.target = resolveTarget(n2.props, querySelector));\r\n                    if (nextTarget) {\r\n                        moveTeleport(n2, nextTarget, null, internals, 0 /* TARGET_CHANGE */);\r\n                    }\r\n                    else if ((process.env.NODE_ENV !== 'production')) {\r\n                        warn('Invalid Teleport target on update:', target, `(${typeof target})`);\r\n                    }\r\n                }\r\n                else if (wasDisabled) {\r\n                    // disabled -> enabled\r\n                    // move into teleport target\r\n                    moveTeleport(n2, target, targetAnchor, internals, 1 /* TOGGLE */);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    remove(vnode, { r: remove, o: { remove: hostRemove } }) {\r\n        const { shapeFlag, children, anchor } = vnode;\r\n        hostRemove(anchor);\r\n        if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n            for (let i = 0; i < children.length; i++) {\r\n                remove(children[i]);\r\n            }\r\n        }\r\n    },\r\n    move: moveTeleport,\r\n    hydrate: hydrateTeleport\r\n};\r\nfunction moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2 /* REORDER */) {\r\n    // move target anchor if this is a target change.\r\n    if (moveType === 0 /* TARGET_CHANGE */) {\r\n        insert(vnode.targetAnchor, container, parentAnchor);\r\n    }\r\n    const { el, anchor, shapeFlag, children, props } = vnode;\r\n    const isReorder = moveType === 2 /* REORDER */;\r\n    // move main view anchor if this is a re-order.\r\n    if (isReorder) {\r\n        insert(el, container, parentAnchor);\r\n    }\r\n    // if this is a re-order and teleport is enabled (content is in target)\r\n    // do not move children. So the opposite is: only move children if this\r\n    // is not a reorder, or the teleport is disabled\r\n    if (!isReorder || isTeleportDisabled(props)) {\r\n        // Teleport has either Array children or no children.\r\n        if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n            for (let i = 0; i < children.length; i++) {\r\n                move(children[i], container, parentAnchor, 2 /* REORDER */);\r\n            }\r\n        }\r\n    }\r\n    // move main view anchor if this is a re-order.\r\n    if (isReorder) {\r\n        insert(anchor, container, parentAnchor);\r\n    }\r\n}\r\nfunction hydrateTeleport(node, vnode, parentComponent, parentSuspense, optimized, { o: { nextSibling, parentNode, querySelector } }, hydrateChildren) {\r\n    const target = (vnode.target = resolveTarget(vnode.props, querySelector));\r\n    if (target) {\r\n        // if multiple teleports rendered to the same target element, we need to\r\n        // pick up from where the last teleport finished instead of the first node\r\n        const targetNode = target._lpa || target.firstChild;\r\n        if (vnode.shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n            if (isTeleportDisabled(vnode.props)) {\r\n                vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, optimized);\r\n                vnode.targetAnchor = targetNode;\r\n            }\r\n            else {\r\n                vnode.anchor = nextSibling(node);\r\n                vnode.targetAnchor = hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, optimized);\r\n            }\r\n            target._lpa =\r\n                vnode.targetAnchor && nextSibling(vnode.targetAnchor);\r\n        }\r\n    }\r\n    return vnode.anchor && nextSibling(vnode.anchor);\r\n}\r\n// Force-casted public typing for h and TSX props inference\r\nconst Teleport = TeleportImpl;\n\nconst COMPONENTS = 'components';\r\nconst DIRECTIVES = 'directives';\r\n/**\r\n * @private\r\n */\r\nfunction resolveComponent(name) {\r\n    return resolveAsset(COMPONENTS, name) || name;\r\n}\r\nconst NULL_DYNAMIC_COMPONENT = Symbol();\r\n/**\r\n * @private\r\n */\r\nfunction resolveDynamicComponent(component) {\r\n    if (isString(component)) {\r\n        return resolveAsset(COMPONENTS, component, false) || component;\r\n    }\r\n    else {\r\n        // invalid types will fallthrough to createVNode and raise warning\r\n        return (component || NULL_DYNAMIC_COMPONENT);\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction resolveDirective(name) {\r\n    return resolveAsset(DIRECTIVES, name);\r\n}\r\n// implementation\r\nfunction resolveAsset(type, name, warnMissing = true) {\r\n    const instance = currentRenderingInstance || currentInstance;\r\n    if (instance) {\r\n        const Component = instance.type;\r\n        // self name has highest priority\r\n        if (type === COMPONENTS) {\r\n            const selfName = Component.displayName || Component.name;\r\n            if (selfName &&\r\n                (selfName === name ||\r\n                    selfName === camelize(name) ||\r\n                    selfName === capitalize(camelize(name)))) {\r\n                return Component;\r\n            }\r\n        }\r\n        const res = \r\n        // local registration\r\n        // check instance[type] first for components with mixin or extends.\r\n        resolve(instance[type] || Component[type], name) ||\r\n            // global registration\r\n            resolve(instance.appContext[type], name);\r\n        if ((process.env.NODE_ENV !== 'production') && warnMissing && !res) {\r\n            warn(`Failed to resolve ${type.slice(0, -1)}: ${name}`);\r\n        }\r\n        return res;\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`resolve${capitalize(type.slice(0, -1))} ` +\r\n            `can only be used in render() or setup().`);\r\n    }\r\n}\r\nfunction resolve(registry, name) {\r\n    return (registry &&\r\n        (registry[name] ||\r\n            registry[camelize(name)] ||\r\n            registry[capitalize(camelize(name))]));\r\n}\n\nconst Fragment = Symbol((process.env.NODE_ENV !== 'production') ? 'Fragment' : undefined);\r\nconst Text = Symbol((process.env.NODE_ENV !== 'production') ? 'Text' : undefined);\r\nconst Comment = Symbol((process.env.NODE_ENV !== 'production') ? 'Comment' : undefined);\r\nconst Static = Symbol((process.env.NODE_ENV !== 'production') ? 'Static' : undefined);\r\n// Since v-if and v-for are the two possible ways node structure can dynamically\r\n// change, once we consider v-if branches and each v-for fragment a block, we\r\n// can divide a template into nested blocks, and within each block the node\r\n// structure would be stable. This allows us to skip most children diffing\r\n// and only worry about the dynamic nodes (indicated by patch flags).\r\nconst blockStack = [];\r\nlet currentBlock = null;\r\n/**\r\n * Open a block.\r\n * This must be called before `createBlock`. It cannot be part of `createBlock`\r\n * because the children of the block are evaluated before `createBlock` itself\r\n * is called. The generated code typically looks like this:\r\n *\r\n * ```js\r\n * function render() {\r\n *   return (openBlock(),createBlock('div', null, [...]))\r\n * }\r\n * ```\r\n * disableTracking is true when creating a v-for fragment block, since a v-for\r\n * fragment always diffs its children.\r\n *\r\n * @private\r\n */\r\nfunction openBlock(disableTracking = false) {\r\n    blockStack.push((currentBlock = disableTracking ? null : []));\r\n}\r\nfunction closeBlock() {\r\n    blockStack.pop();\r\n    currentBlock = blockStack[blockStack.length - 1] || null;\r\n}\r\n// Whether we should be tracking dynamic child nodes inside a block.\r\n// Only tracks when this value is > 0\r\n// We are not using a simple boolean because this value may need to be\r\n// incremented/decremented by nested usage of v-once (see below)\r\nlet shouldTrack = 1;\r\n/**\r\n * Block tracking sometimes needs to be disabled, for example during the\r\n * creation of a tree that needs to be cached by v-once. The compiler generates\r\n * code like this:\r\n *\r\n * ``` js\r\n * _cache[1] || (\r\n *   setBlockTracking(-1),\r\n *   _cache[1] = createVNode(...),\r\n *   setBlockTracking(1),\r\n *   _cache[1]\r\n * )\r\n * ```\r\n *\r\n * @private\r\n */\r\nfunction setBlockTracking(value) {\r\n    shouldTrack += value;\r\n}\r\n/**\r\n * Create a block root vnode. Takes the same exact arguments as `createVNode`.\r\n * A block root keeps track of dynamic nodes within the block in the\r\n * `dynamicChildren` array.\r\n *\r\n * @private\r\n */\r\nfunction createBlock(type, props, children, patchFlag, dynamicProps) {\r\n    const vnode = createVNode(type, props, children, patchFlag, dynamicProps, true /* isBlock: prevent a block from tracking itself */);\r\n    // save current block children on the block vnode\r\n    vnode.dynamicChildren = currentBlock || EMPTY_ARR;\r\n    // close block\r\n    closeBlock();\r\n    // a block is always going to be patched, so track it as a child of its\r\n    // parent block\r\n    if (shouldTrack > 0 && currentBlock) {\r\n        currentBlock.push(vnode);\r\n    }\r\n    return vnode;\r\n}\r\nfunction isVNode(value) {\r\n    return value ? value.__v_isVNode === true : false;\r\n}\r\nfunction isSameVNodeType(n1, n2) {\r\n    if ((process.env.NODE_ENV !== 'production') &&\r\n        n2.shapeFlag & 6 /* COMPONENT */ &&\r\n        hmrDirtyComponents.has(n2.type)) {\r\n        // HMR only: if the component has been hot-updated, force a reload.\r\n        return false;\r\n    }\r\n    return n1.type === n2.type && n1.key === n2.key;\r\n}\r\nlet vnodeArgsTransformer;\r\n/**\r\n * Internal API for registering an arguments transform for createVNode\r\n * used for creating stubs in the test-utils\r\n * It is *internal* but needs to be exposed for test-utils to pick up proper\r\n * typings\r\n */\r\nfunction transformVNodeArgs(transformer) {\r\n    vnodeArgsTransformer = transformer;\r\n}\r\nconst createVNodeWithArgsTransform = (...args) => {\r\n    return _createVNode(...(vnodeArgsTransformer\r\n        ? vnodeArgsTransformer(args, currentRenderingInstance)\r\n        : args));\r\n};\r\nconst InternalObjectKey = `__vInternal`;\r\nconst normalizeKey = ({ key }) => key != null ? key : null;\r\nconst normalizeRef = ({ ref }) => {\r\n    return (ref != null\r\n        ? isArray(ref)\r\n            ? ref\r\n            : { i: currentRenderingInstance, r: ref }\r\n        : null);\r\n};\r\nconst createVNode = ((process.env.NODE_ENV !== 'production')\r\n    ? createVNodeWithArgsTransform\r\n    : _createVNode);\r\nfunction _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {\r\n    if (!type || type === NULL_DYNAMIC_COMPONENT) {\r\n        if ((process.env.NODE_ENV !== 'production') && !type) {\r\n            warn(`Invalid vnode type when creating vnode: ${type}.`);\r\n        }\r\n        type = Comment;\r\n    }\r\n    if (isVNode(type)) {\r\n        // createVNode receiving an existing vnode. This happens in cases like\r\n        // <component :is=\"vnode\"/>\r\n        // #2078 make sure to merge refs during the clone instead of overwriting it\r\n        const cloned = cloneVNode(type, props, true /* mergeRef: true */);\r\n        if (children) {\r\n            normalizeChildren(cloned, children);\r\n        }\r\n        return cloned;\r\n    }\r\n    // class component normalization.\r\n    if (isClassComponent(type)) {\r\n        type = type.__vccOpts;\r\n    }\r\n    // class & style normalization.\r\n    if (props) {\r\n        // for reactive or proxy objects, we need to clone it to enable mutation.\r\n        if (isProxy(props) || InternalObjectKey in props) {\r\n            props = extend({}, props);\r\n        }\r\n        let { class: klass, style } = props;\r\n        if (klass && !isString(klass)) {\r\n            props.class = normalizeClass(klass);\r\n        }\r\n        if (isObject(style)) {\r\n            // reactive state objects need to be cloned since they are likely to be\r\n            // mutated\r\n            if (isProxy(style) && !isArray(style)) {\r\n                style = extend({}, style);\r\n            }\r\n            props.style = normalizeStyle(style);\r\n        }\r\n    }\r\n    // encode the vnode type information into a bitmap\r\n    const shapeFlag = isString(type)\r\n        ? 1 /* ELEMENT */\r\n        :  isSuspense(type)\r\n            ? 128 /* SUSPENSE */\r\n            : isTeleport(type)\r\n                ? 64 /* TELEPORT */\r\n                : isObject(type)\r\n                    ? 4 /* STATEFUL_COMPONENT */\r\n                    : isFunction(type)\r\n                        ? 2 /* FUNCTIONAL_COMPONENT */\r\n                        : 0;\r\n    if ((process.env.NODE_ENV !== 'production') && shapeFlag & 4 /* STATEFUL_COMPONENT */ && isProxy(type)) {\r\n        type = toRaw(type);\r\n        warn(`Vue received a Component which was made a reactive object. This can ` +\r\n            `lead to unnecessary performance overhead, and should be avoided by ` +\r\n            `marking the component with \\`markRaw\\` or using \\`shallowRef\\` ` +\r\n            `instead of \\`ref\\`.`, `\\nComponent that was made reactive: `, type);\r\n    }\r\n    const vnode = {\r\n        __v_isVNode: true,\r\n        [\"__v_skip\" /* SKIP */]: true,\r\n        type,\r\n        props,\r\n        key: props && normalizeKey(props),\r\n        ref: props && normalizeRef(props),\r\n        scopeId: currentScopeId,\r\n        children: null,\r\n        component: null,\r\n        suspense: null,\r\n        ssContent: null,\r\n        ssFallback: null,\r\n        dirs: null,\r\n        transition: null,\r\n        el: null,\r\n        anchor: null,\r\n        target: null,\r\n        targetAnchor: null,\r\n        staticCount: 0,\r\n        shapeFlag,\r\n        patchFlag,\r\n        dynamicProps,\r\n        dynamicChildren: null,\r\n        appContext: null\r\n    };\r\n    // validate key\r\n    if ((process.env.NODE_ENV !== 'production') && vnode.key !== vnode.key) {\r\n        warn(`VNode created with invalid key (NaN). VNode type:`, vnode.type);\r\n    }\r\n    normalizeChildren(vnode, children);\r\n    // normalize suspense children\r\n    if ( shapeFlag & 128 /* SUSPENSE */) {\r\n        const { content, fallback } = normalizeSuspenseChildren(vnode);\r\n        vnode.ssContent = content;\r\n        vnode.ssFallback = fallback;\r\n    }\r\n    if (shouldTrack > 0 &&\r\n        // avoid a block node from tracking itself\r\n        !isBlockNode &&\r\n        // has current parent block\r\n        currentBlock &&\r\n        // presence of a patch flag indicates this node needs patching on updates.\r\n        // component nodes also should always be patched, because even if the\r\n        // component doesn't need to update, it needs to persist the instance on to\r\n        // the next vnode so that it can be properly unmounted later.\r\n        (patchFlag > 0 || shapeFlag & 6 /* COMPONENT */) &&\r\n        // the EVENTS flag is only for hydration and if it is the only flag, the\r\n        // vnode should not be considered dynamic due to handler caching.\r\n        patchFlag !== 32 /* HYDRATE_EVENTS */) {\r\n        currentBlock.push(vnode);\r\n    }\r\n    return vnode;\r\n}\r\nfunction cloneVNode(vnode, extraProps, mergeRef = false) {\r\n    // This is intentionally NOT using spread or extend to avoid the runtime\r\n    // key enumeration cost.\r\n    const { props, ref, patchFlag } = vnode;\r\n    const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;\r\n    return {\r\n        __v_isVNode: true,\r\n        [\"__v_skip\" /* SKIP */]: true,\r\n        type: vnode.type,\r\n        props: mergedProps,\r\n        key: mergedProps && normalizeKey(mergedProps),\r\n        ref: extraProps && extraProps.ref\r\n            ? // #2078 in the case of <component :is=\"vnode\" ref=\"extra\"/>\r\n                // if the vnode itself already has a ref, cloneVNode will need to merge\r\n                // the refs so the single vnode can be set on multiple refs\r\n                mergeRef && ref\r\n                    ? isArray(ref)\r\n                        ? ref.concat(normalizeRef(extraProps))\r\n                        : [ref, normalizeRef(extraProps)]\r\n                    : normalizeRef(extraProps)\r\n            : ref,\r\n        scopeId: vnode.scopeId,\r\n        children: vnode.children,\r\n        target: vnode.target,\r\n        targetAnchor: vnode.targetAnchor,\r\n        staticCount: vnode.staticCount,\r\n        shapeFlag: vnode.shapeFlag,\r\n        // if the vnode is cloned with extra props, we can no longer assume its\r\n        // existing patch flag to be reliable and need to add the FULL_PROPS flag.\r\n        // note: perserve flag for fragments since they use the flag for children\r\n        // fast paths only.\r\n        patchFlag: extraProps && vnode.type !== Fragment\r\n            ? patchFlag === -1 // hoisted node\r\n                ? 16 /* FULL_PROPS */\r\n                : patchFlag | 16 /* FULL_PROPS */\r\n            : patchFlag,\r\n        dynamicProps: vnode.dynamicProps,\r\n        dynamicChildren: vnode.dynamicChildren,\r\n        appContext: vnode.appContext,\r\n        dirs: vnode.dirs,\r\n        transition: vnode.transition,\r\n        // These should technically only be non-null on mounted VNodes. However,\r\n        // they *should* be copied for kept-alive vnodes. So we just always copy\r\n        // them since them being non-null during a mount doesn't affect the logic as\r\n        // they will simply be overwritten.\r\n        component: vnode.component,\r\n        suspense: vnode.suspense,\r\n        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),\r\n        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),\r\n        el: vnode.el,\r\n        anchor: vnode.anchor\r\n    };\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createTextVNode(text = ' ', flag = 0) {\r\n    return createVNode(Text, null, text, flag);\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createStaticVNode(content, numberOfNodes) {\r\n    // A static vnode can contain multiple stringified elements, and the number\r\n    // of elements is necessary for hydration.\r\n    const vnode = createVNode(Static, null, content);\r\n    vnode.staticCount = numberOfNodes;\r\n    return vnode;\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createCommentVNode(text = '', \r\n// when used as the v-else branch, the comment node must be created as a\r\n// block to ensure correct updates.\r\nasBlock = false) {\r\n    return asBlock\r\n        ? (openBlock(), createBlock(Comment, null, text))\r\n        : createVNode(Comment, null, text);\r\n}\r\nfunction normalizeVNode(child) {\r\n    if (child == null || typeof child === 'boolean') {\r\n        // empty placeholder\r\n        return createVNode(Comment);\r\n    }\r\n    else if (isArray(child)) {\r\n        // fragment\r\n        return createVNode(Fragment, null, child);\r\n    }\r\n    else if (typeof child === 'object') {\r\n        // already vnode, this should be the most common since compiled templates\r\n        // always produce all-vnode children arrays\r\n        return child.el === null ? child : cloneVNode(child);\r\n    }\r\n    else {\r\n        // strings and numbers\r\n        return createVNode(Text, null, String(child));\r\n    }\r\n}\r\n// optimized normalization for template-compiled render fns\r\nfunction cloneIfMounted(child) {\r\n    return child.el === null ? child : cloneVNode(child);\r\n}\r\nfunction normalizeChildren(vnode, children) {\r\n    let type = 0;\r\n    const { shapeFlag } = vnode;\r\n    if (children == null) {\r\n        children = null;\r\n    }\r\n    else if (isArray(children)) {\r\n        type = 16 /* ARRAY_CHILDREN */;\r\n    }\r\n    else if (typeof children === 'object') {\r\n        if (shapeFlag & 1 /* ELEMENT */ || shapeFlag & 64 /* TELEPORT */) {\r\n            // Normalize slot to plain children for plain element and Teleport\r\n            const slot = children.default;\r\n            if (slot) {\r\n                // _c marker is added by withCtx() indicating this is a compiled slot\r\n                slot._c && setCompiledSlotRendering(1);\r\n                normalizeChildren(vnode, slot());\r\n                slot._c && setCompiledSlotRendering(-1);\r\n            }\r\n            return;\r\n        }\r\n        else {\r\n            type = 32 /* SLOTS_CHILDREN */;\r\n            const slotFlag = children._;\r\n            if (!slotFlag && !(InternalObjectKey in children)) {\r\n                children._ctx = currentRenderingInstance;\r\n            }\r\n            else if (slotFlag === 3 /* FORWARDED */ && currentRenderingInstance) {\r\n                // a child component receives forwarded slots from the parent.\r\n                // its slot type is determined by its parent's slot type.\r\n                if (currentRenderingInstance.vnode.patchFlag & 1024 /* DYNAMIC_SLOTS */) {\r\n                    children._ = 2 /* DYNAMIC */;\r\n                    vnode.patchFlag |= 1024 /* DYNAMIC_SLOTS */;\r\n                }\r\n                else {\r\n                    children._ = 1 /* STABLE */;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else if (isFunction(children)) {\r\n        children = { default: children, _ctx: currentRenderingInstance };\r\n        type = 32 /* SLOTS_CHILDREN */;\r\n    }\r\n    else {\r\n        children = String(children);\r\n        // force teleport children to array so it can be moved around\r\n        if (shapeFlag & 64 /* TELEPORT */) {\r\n            type = 16 /* ARRAY_CHILDREN */;\r\n            children = [createTextVNode(children)];\r\n        }\r\n        else {\r\n            type = 8 /* TEXT_CHILDREN */;\r\n        }\r\n    }\r\n    vnode.children = children;\r\n    vnode.shapeFlag |= type;\r\n}\r\nfunction mergeProps(...args) {\r\n    const ret = extend({}, args[0]);\r\n    for (let i = 1; i < args.length; i++) {\r\n        const toMerge = args[i];\r\n        for (const key in toMerge) {\r\n            if (key === 'class') {\r\n                if (ret.class !== toMerge.class) {\r\n                    ret.class = normalizeClass([ret.class, toMerge.class]);\r\n                }\r\n            }\r\n            else if (key === 'style') {\r\n                ret.style = normalizeStyle([ret.style, toMerge.style]);\r\n            }\r\n            else if (isOn(key)) {\r\n                const existing = ret[key];\r\n                const incoming = toMerge[key];\r\n                if (existing !== incoming) {\r\n                    ret[key] = existing\r\n                        ? [].concat(existing, toMerge[key])\r\n                        : incoming;\r\n                }\r\n            }\r\n            else if (key !== '') {\r\n                ret[key] = toMerge[key];\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}\n\nfunction provide(key, value) {\r\n    if (!currentInstance) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`provide() can only be used inside setup().`);\r\n        }\r\n    }\r\n    else {\r\n        let provides = currentInstance.provides;\r\n        // by default an instance inherits its parent's provides object\r\n        // but when it needs to provide values of its own, it creates its\r\n        // own provides object using parent provides object as prototype.\r\n        // this way in `inject` we can simply look up injections from direct\r\n        // parent and let the prototype chain do the work.\r\n        const parentProvides = currentInstance.parent && currentInstance.parent.provides;\r\n        if (parentProvides === provides) {\r\n            provides = currentInstance.provides = Object.create(parentProvides);\r\n        }\r\n        // TS doesn't allow symbol as index type\r\n        provides[key] = value;\r\n    }\r\n}\r\nfunction inject(key, defaultValue, treatDefaultAsFactory = false) {\r\n    // fallback to `currentRenderingInstance` so that this can be called in\r\n    // a functional component\r\n    const instance = currentInstance || currentRenderingInstance;\r\n    if (instance) {\r\n        // #2400\r\n        // to support `app.use` plugins,\r\n        // fallback to appContext's `provides` if the intance is at root\r\n        const provides = instance.parent == null\r\n            ? instance.vnode.appContext && instance.vnode.appContext.provides\r\n            : instance.parent.provides;\r\n        if (provides && key in provides) {\r\n            // TS doesn't allow symbol as index type\r\n            return provides[key];\r\n        }\r\n        else if (arguments.length > 1) {\r\n            return treatDefaultAsFactory && isFunction(defaultValue)\r\n                ? defaultValue()\r\n                : defaultValue;\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`injection \"${String(key)}\" not found.`);\r\n        }\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`inject() can only be used inside setup() or functional components.`);\r\n    }\r\n}\n\nfunction createDuplicateChecker() {\r\n    const cache = Object.create(null);\r\n    return (type, key) => {\r\n        if (cache[key]) {\r\n            warn(`${type} property \"${key}\" is already defined in ${cache[key]}.`);\r\n        }\r\n        else {\r\n            cache[key] = type;\r\n        }\r\n    };\r\n}\r\nlet isInBeforeCreate = false;\r\nfunction applyOptions(instance, options, deferredData = [], deferredWatch = [], deferredProvide = [], asMixin = false) {\r\n    const { \r\n    // composition\r\n    mixins, extends: extendsOptions, \r\n    // state\r\n    data: dataOptions, computed: computedOptions, methods, watch: watchOptions, provide: provideOptions, inject: injectOptions, \r\n    // assets\r\n    components, directives, \r\n    // lifecycle\r\n    beforeMount, mounted, beforeUpdate, updated, activated, deactivated, beforeDestroy, beforeUnmount, destroyed, unmounted, render, renderTracked, renderTriggered, errorCaptured } = options;\r\n    const publicThis = instance.proxy;\r\n    const ctx = instance.ctx;\r\n    const globalMixins = instance.appContext.mixins;\r\n    if (asMixin && render && instance.render === NOOP) {\r\n        instance.render = render;\r\n    }\r\n    // applyOptions is called non-as-mixin once per instance\r\n    if (!asMixin) {\r\n        isInBeforeCreate = true;\r\n        callSyncHook('beforeCreate', \"bc\" /* BEFORE_CREATE */, options, instance, globalMixins);\r\n        isInBeforeCreate = false;\r\n        // global mixins are applied first\r\n        applyMixins(instance, globalMixins, deferredData, deferredWatch, deferredProvide);\r\n    }\r\n    // extending a base component...\r\n    if (extendsOptions) {\r\n        applyOptions(instance, extendsOptions, deferredData, deferredWatch, deferredProvide, true);\r\n    }\r\n    // local mixins\r\n    if (mixins) {\r\n        applyMixins(instance, mixins, deferredData, deferredWatch, deferredProvide);\r\n    }\r\n    const checkDuplicateProperties = (process.env.NODE_ENV !== 'production') ? createDuplicateChecker() : null;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const [propsOptions] = instance.propsOptions;\r\n        if (propsOptions) {\r\n            for (const key in propsOptions) {\r\n                checkDuplicateProperties(\"Props\" /* PROPS */, key);\r\n            }\r\n        }\r\n    }\r\n    // options initialization order (to be consistent with Vue 2):\r\n    // - props (already done outside of this function)\r\n    // - inject\r\n    // - methods\r\n    // - data (deferred since it relies on `this` access)\r\n    // - computed\r\n    // - watch (deferred since it relies on `this` access)\r\n    if (injectOptions) {\r\n        if (isArray(injectOptions)) {\r\n            for (let i = 0; i < injectOptions.length; i++) {\r\n                const key = injectOptions[i];\r\n                ctx[key] = inject(key);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    checkDuplicateProperties(\"Inject\" /* INJECT */, key);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (const key in injectOptions) {\r\n                const opt = injectOptions[key];\r\n                if (isObject(opt)) {\r\n                    ctx[key] = inject(opt.from || key, opt.default, true /* treat default function as factory */);\r\n                }\r\n                else {\r\n                    ctx[key] = inject(opt);\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    checkDuplicateProperties(\"Inject\" /* INJECT */, key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (methods) {\r\n        for (const key in methods) {\r\n            const methodHandler = methods[key];\r\n            if (isFunction(methodHandler)) {\r\n                ctx[key] = methodHandler.bind(publicThis);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    checkDuplicateProperties(\"Methods\" /* METHODS */, key);\r\n                }\r\n            }\r\n            else if ((process.env.NODE_ENV !== 'production')) {\r\n                warn(`Method \"${key}\" has type \"${typeof methodHandler}\" in the component definition. ` +\r\n                    `Did you reference the function correctly?`);\r\n            }\r\n        }\r\n    }\r\n    if (!asMixin) {\r\n        if (deferredData.length) {\r\n            deferredData.forEach(dataFn => resolveData(instance, dataFn, publicThis));\r\n        }\r\n        if (dataOptions) {\r\n            resolveData(instance, dataOptions, publicThis);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            const rawData = toRaw(instance.data);\r\n            for (const key in rawData) {\r\n                checkDuplicateProperties(\"Data\" /* DATA */, key);\r\n                // expose data on ctx during dev\r\n                if (key[0] !== '$' && key[0] !== '_') {\r\n                    Object.defineProperty(ctx, key, {\r\n                        configurable: true,\r\n                        enumerable: true,\r\n                        get: () => rawData[key],\r\n                        set: NOOP\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else if (dataOptions) {\r\n        deferredData.push(dataOptions);\r\n    }\r\n    if (computedOptions) {\r\n        for (const key in computedOptions) {\r\n            const opt = computedOptions[key];\r\n            const get = isFunction(opt)\r\n                ? opt.bind(publicThis, publicThis)\r\n                : isFunction(opt.get)\r\n                    ? opt.get.bind(publicThis, publicThis)\r\n                    : NOOP;\r\n            if ((process.env.NODE_ENV !== 'production') && get === NOOP) {\r\n                warn(`Computed property \"${key}\" has no getter.`);\r\n            }\r\n            const set = !isFunction(opt) && isFunction(opt.set)\r\n                ? opt.set.bind(publicThis)\r\n                : (process.env.NODE_ENV !== 'production')\r\n                    ? () => {\r\n                        warn(`Write operation failed: computed property \"${key}\" is readonly.`);\r\n                    }\r\n                    : NOOP;\r\n            const c = computed({\r\n                get,\r\n                set\r\n            });\r\n            Object.defineProperty(ctx, key, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                get: () => c.value,\r\n                set: v => (c.value = v)\r\n            });\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                checkDuplicateProperties(\"Computed\" /* COMPUTED */, key);\r\n            }\r\n        }\r\n    }\r\n    if (watchOptions) {\r\n        deferredWatch.push(watchOptions);\r\n    }\r\n    if (!asMixin && deferredWatch.length) {\r\n        deferredWatch.forEach(watchOptions => {\r\n            for (const key in watchOptions) {\r\n                createWatcher(watchOptions[key], ctx, publicThis, key);\r\n            }\r\n        });\r\n    }\r\n    if (provideOptions) {\r\n        deferredProvide.push(provideOptions);\r\n    }\r\n    if (!asMixin && deferredProvide.length) {\r\n        deferredProvide.forEach(provideOptions => {\r\n            const provides = isFunction(provideOptions)\r\n                ? provideOptions.call(publicThis)\r\n                : provideOptions;\r\n            for (const key in provides) {\r\n                provide(key, provides[key]);\r\n            }\r\n        });\r\n    }\r\n    // asset options.\r\n    // To reduce memory usage, only components with mixins or extends will have\r\n    // resolved asset registry attached to instance.\r\n    if (asMixin) {\r\n        if (components) {\r\n            extend(instance.components ||\r\n                (instance.components = extend({}, instance.type.components)), components);\r\n        }\r\n        if (directives) {\r\n            extend(instance.directives ||\r\n                (instance.directives = extend({}, instance.type.directives)), directives);\r\n        }\r\n    }\r\n    // lifecycle options\r\n    if (!asMixin) {\r\n        callSyncHook('created', \"c\" /* CREATED */, options, instance, globalMixins);\r\n    }\r\n    if (beforeMount) {\r\n        onBeforeMount(beforeMount.bind(publicThis));\r\n    }\r\n    if (mounted) {\r\n        onMounted(mounted.bind(publicThis));\r\n    }\r\n    if (beforeUpdate) {\r\n        onBeforeUpdate(beforeUpdate.bind(publicThis));\r\n    }\r\n    if (updated) {\r\n        onUpdated(updated.bind(publicThis));\r\n    }\r\n    if (activated) {\r\n        onActivated(activated.bind(publicThis));\r\n    }\r\n    if (deactivated) {\r\n        onDeactivated(deactivated.bind(publicThis));\r\n    }\r\n    if (errorCaptured) {\r\n        onErrorCaptured(errorCaptured.bind(publicThis));\r\n    }\r\n    if (renderTracked) {\r\n        onRenderTracked(renderTracked.bind(publicThis));\r\n    }\r\n    if (renderTriggered) {\r\n        onRenderTriggered(renderTriggered.bind(publicThis));\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') && beforeDestroy) {\r\n        warn(`\\`beforeDestroy\\` has been renamed to \\`beforeUnmount\\`.`);\r\n    }\r\n    if (beforeUnmount) {\r\n        onBeforeUnmount(beforeUnmount.bind(publicThis));\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') && destroyed) {\r\n        warn(`\\`destroyed\\` has been renamed to \\`unmounted\\`.`);\r\n    }\r\n    if (unmounted) {\r\n        onUnmounted(unmounted.bind(publicThis));\r\n    }\r\n}\r\nfunction callSyncHook(name, type, options, instance, globalMixins) {\r\n    callHookFromMixins(name, type, globalMixins, instance);\r\n    const { extends: base, mixins } = options;\r\n    if (base) {\r\n        callHookFromExtends(name, type, base, instance);\r\n    }\r\n    if (mixins) {\r\n        callHookFromMixins(name, type, mixins, instance);\r\n    }\r\n    const selfHook = options[name];\r\n    if (selfHook) {\r\n        callWithAsyncErrorHandling(selfHook.bind(instance.proxy), instance, type);\r\n    }\r\n}\r\nfunction callHookFromExtends(name, type, base, instance) {\r\n    if (base.extends) {\r\n        callHookFromExtends(name, type, base.extends, instance);\r\n    }\r\n    const baseHook = base[name];\r\n    if (baseHook) {\r\n        callWithAsyncErrorHandling(baseHook.bind(instance.proxy), instance, type);\r\n    }\r\n}\r\nfunction callHookFromMixins(name, type, mixins, instance) {\r\n    for (let i = 0; i < mixins.length; i++) {\r\n        const chainedMixins = mixins[i].mixins;\r\n        if (chainedMixins) {\r\n            callHookFromMixins(name, type, chainedMixins, instance);\r\n        }\r\n        const fn = mixins[i][name];\r\n        if (fn) {\r\n            callWithAsyncErrorHandling(fn.bind(instance.proxy), instance, type);\r\n        }\r\n    }\r\n}\r\nfunction applyMixins(instance, mixins, deferredData, deferredWatch, deferredProvide) {\r\n    for (let i = 0; i < mixins.length; i++) {\r\n        applyOptions(instance, mixins[i], deferredData, deferredWatch, deferredProvide, true);\r\n    }\r\n}\r\nfunction resolveData(instance, dataFn, publicThis) {\r\n    if ((process.env.NODE_ENV !== 'production') && !isFunction(dataFn)) {\r\n        warn(`The data option must be a function. ` +\r\n            `Plain object usage is no longer supported.`);\r\n    }\r\n    const data = dataFn.call(publicThis, publicThis);\r\n    if ((process.env.NODE_ENV !== 'production') && isPromise(data)) {\r\n        warn(`data() returned a Promise - note data() cannot be async; If you ` +\r\n            `intend to perform data fetching before component renders, use ` +\r\n            `async setup() + <Suspense>.`);\r\n    }\r\n    if (!isObject(data)) {\r\n        (process.env.NODE_ENV !== 'production') && warn(`data() should return an object.`);\r\n    }\r\n    else if (instance.data === EMPTY_OBJ) {\r\n        instance.data = reactive(data);\r\n    }\r\n    else {\r\n        // existing data: this is a mixin or extends.\r\n        extend(instance.data, data);\r\n    }\r\n}\r\nfunction createWatcher(raw, ctx, publicThis, key) {\r\n    const getter = key.includes('.')\r\n        ? createPathGetter(publicThis, key)\r\n        : () => publicThis[key];\r\n    if (isString(raw)) {\r\n        const handler = ctx[raw];\r\n        if (isFunction(handler)) {\r\n            watch(getter, handler);\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`Invalid watch handler specified by key \"${raw}\"`, handler);\r\n        }\r\n    }\r\n    else if (isFunction(raw)) {\r\n        watch(getter, raw.bind(publicThis));\r\n    }\r\n    else if (isObject(raw)) {\r\n        if (isArray(raw)) {\r\n            raw.forEach(r => createWatcher(r, ctx, publicThis, key));\r\n        }\r\n        else {\r\n            const handler = isFunction(raw.handler)\r\n                ? raw.handler.bind(publicThis)\r\n                : ctx[raw.handler];\r\n            if (isFunction(handler)) {\r\n                watch(getter, handler, raw);\r\n            }\r\n            else if ((process.env.NODE_ENV !== 'production')) {\r\n                warn(`Invalid watch handler specified by key \"${raw.handler}\"`, handler);\r\n            }\r\n        }\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`Invalid watch option: \"${key}\"`, raw);\r\n    }\r\n}\r\nfunction createPathGetter(ctx, path) {\r\n    const segments = path.split('.');\r\n    return () => {\r\n        let cur = ctx;\r\n        for (let i = 0; i < segments.length && cur; i++) {\r\n            cur = cur[segments[i]];\r\n        }\r\n        return cur;\r\n    };\r\n}\r\nfunction resolveMergedOptions(instance) {\r\n    const raw = instance.type;\r\n    const { __merged, mixins, extends: extendsOptions } = raw;\r\n    if (__merged)\r\n        return __merged;\r\n    const globalMixins = instance.appContext.mixins;\r\n    if (!globalMixins.length && !mixins && !extendsOptions)\r\n        return raw;\r\n    const options = {};\r\n    globalMixins.forEach(m => mergeOptions(options, m, instance));\r\n    mergeOptions(options, raw, instance);\r\n    return (raw.__merged = options);\r\n}\r\nfunction mergeOptions(to, from, instance) {\r\n    const strats = instance.appContext.config.optionMergeStrategies;\r\n    const { mixins, extends: extendsOptions } = from;\r\n    extendsOptions && mergeOptions(to, extendsOptions, instance);\r\n    mixins &&\r\n        mixins.forEach((m) => mergeOptions(to, m, instance));\r\n    for (const key in from) {\r\n        if (strats && hasOwn(strats, key)) {\r\n            to[key] = strats[key](to[key], from[key], instance.proxy, key);\r\n        }\r\n        else {\r\n            to[key] = from[key];\r\n        }\r\n    }\r\n}\n\nconst publicPropertiesMap = extend(Object.create(null), {\r\n    $: i => i,\r\n    $el: i => i.vnode.el,\r\n    $data: i => i.data,\r\n    $props: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.props) : i.props),\r\n    $attrs: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.attrs) : i.attrs),\r\n    $slots: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.slots) : i.slots),\r\n    $refs: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.refs) : i.refs),\r\n    $parent: i => i.parent && i.parent.proxy,\r\n    $root: i => i.root && i.root.proxy,\r\n    $emit: i => i.emit,\r\n    $options: i => (__VUE_OPTIONS_API__ ? resolveMergedOptions(i) : i.type),\r\n    $forceUpdate: i => () => queueJob(i.update),\r\n    $nextTick: i => nextTick.bind(i.proxy),\r\n    $watch: i => (__VUE_OPTIONS_API__ ? instanceWatch.bind(i) : NOOP)\r\n});\r\nconst PublicInstanceProxyHandlers = {\r\n    get({ _: instance }, key) {\r\n        const { ctx, setupState, data, props, accessCache, type, appContext } = instance;\r\n        // let @vue/reactivity know it should never observe Vue public instances.\r\n        if (key === \"__v_skip\" /* SKIP */) {\r\n            return true;\r\n        }\r\n        // for internal formatters to know that this is a Vue instance\r\n        if ((process.env.NODE_ENV !== 'production') && key === '__isVue') {\r\n            return true;\r\n        }\r\n        // data / props / ctx\r\n        // This getter gets called for every property access on the render context\r\n        // during render and is a major hotspot. The most expensive part of this\r\n        // is the multiple hasOwn() calls. It's much faster to do a simple property\r\n        // access on a plain object, so we use an accessCache object (with null\r\n        // prototype) to memoize what access type a key corresponds to.\r\n        let normalizedProps;\r\n        if (key[0] !== '$') {\r\n            const n = accessCache[key];\r\n            if (n !== undefined) {\r\n                switch (n) {\r\n                    case 0 /* SETUP */:\r\n                        return setupState[key];\r\n                    case 1 /* DATA */:\r\n                        return data[key];\r\n                    case 3 /* CONTEXT */:\r\n                        return ctx[key];\r\n                    case 2 /* PROPS */:\r\n                        return props[key];\r\n                    // default: just fallthrough\r\n                }\r\n            }\r\n            else if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {\r\n                accessCache[key] = 0 /* SETUP */;\r\n                return setupState[key];\r\n            }\r\n            else if (data !== EMPTY_OBJ && hasOwn(data, key)) {\r\n                accessCache[key] = 1 /* DATA */;\r\n                return data[key];\r\n            }\r\n            else if (\r\n            // only cache other properties when instance has declared (thus stable)\r\n            // props\r\n            (normalizedProps = instance.propsOptions[0]) &&\r\n                hasOwn(normalizedProps, key)) {\r\n                accessCache[key] = 2 /* PROPS */;\r\n                return props[key];\r\n            }\r\n            else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {\r\n                accessCache[key] = 3 /* CONTEXT */;\r\n                return ctx[key];\r\n            }\r\n            else if (!__VUE_OPTIONS_API__ || !isInBeforeCreate) {\r\n                accessCache[key] = 4 /* OTHER */;\r\n            }\r\n        }\r\n        const publicGetter = publicPropertiesMap[key];\r\n        let cssModule, globalProperties;\r\n        // public $xxx properties\r\n        if (publicGetter) {\r\n            if (key === '$attrs') {\r\n                track(instance, \"get\" /* GET */, key);\r\n                (process.env.NODE_ENV !== 'production') && markAttrsAccessed();\r\n            }\r\n            return publicGetter(instance);\r\n        }\r\n        else if (\r\n        // css module (injected by vue-loader)\r\n        (cssModule = type.__cssModules) &&\r\n            (cssModule = cssModule[key])) {\r\n            return cssModule;\r\n        }\r\n        else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {\r\n            // user may set custom properties to `this` that start with `$`\r\n            accessCache[key] = 3 /* CONTEXT */;\r\n            return ctx[key];\r\n        }\r\n        else if (\r\n        // global properties\r\n        ((globalProperties = appContext.config.globalProperties),\r\n            hasOwn(globalProperties, key))) {\r\n            return globalProperties[key];\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production') &&\r\n            currentRenderingInstance &&\r\n            (!isString(key) ||\r\n                // #1091 avoid internal isRef/isVNode checks on component instance leading\r\n                // to infinite warning loop\r\n                key.indexOf('__v') !== 0)) {\r\n            if (data !== EMPTY_OBJ &&\r\n                (key[0] === '$' || key[0] === '_') &&\r\n                hasOwn(data, key)) {\r\n                warn(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved ` +\r\n                    `character (\"$\" or \"_\") and is not proxied on the render context.`);\r\n            }\r\n            else {\r\n                warn(`Property ${JSON.stringify(key)} was accessed during render ` +\r\n                    `but is not defined on instance.`);\r\n            }\r\n        }\r\n    },\r\n    set({ _: instance }, key, value) {\r\n        const { data, setupState, ctx } = instance;\r\n        if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {\r\n            setupState[key] = value;\r\n        }\r\n        else if (data !== EMPTY_OBJ && hasOwn(data, key)) {\r\n            data[key] = value;\r\n        }\r\n        else if (key in instance.props) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Attempting to mutate prop \"${key}\". Props are readonly.`, instance);\r\n            return false;\r\n        }\r\n        if (key[0] === '$' && key.slice(1) in instance) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Attempting to mutate public property \"${key}\". ` +\r\n                    `Properties starting with $ are reserved and readonly.`, instance);\r\n            return false;\r\n        }\r\n        else {\r\n            if ((process.env.NODE_ENV !== 'production') && key in instance.appContext.config.globalProperties) {\r\n                Object.defineProperty(ctx, key, {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    value\r\n                });\r\n            }\r\n            else {\r\n                ctx[key] = value;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n    has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {\r\n        let normalizedProps;\r\n        return (accessCache[key] !== undefined ||\r\n            (data !== EMPTY_OBJ && hasOwn(data, key)) ||\r\n            (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) ||\r\n            ((normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key)) ||\r\n            hasOwn(ctx, key) ||\r\n            hasOwn(publicPropertiesMap, key) ||\r\n            hasOwn(appContext.config.globalProperties, key));\r\n    }\r\n};\r\nif ((process.env.NODE_ENV !== 'production') && !false) {\r\n    PublicInstanceProxyHandlers.ownKeys = (target) => {\r\n        warn(`Avoid app logic that relies on enumerating keys on a component instance. ` +\r\n            `The keys will be empty in production mode to avoid performance overhead.`);\r\n        return Reflect.ownKeys(target);\r\n    };\r\n}\r\nconst RuntimeCompiledPublicInstanceProxyHandlers = extend({}, PublicInstanceProxyHandlers, {\r\n    get(target, key) {\r\n        // fast path for unscopables when using `with` block\r\n        if (key === Symbol.unscopables) {\r\n            return;\r\n        }\r\n        return PublicInstanceProxyHandlers.get(target, key, target);\r\n    },\r\n    has(_, key) {\r\n        const has = key[0] !== '_' && !isGloballyWhitelisted(key);\r\n        if ((process.env.NODE_ENV !== 'production') && !has && PublicInstanceProxyHandlers.has(_, key)) {\r\n            warn(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);\r\n        }\r\n        return has;\r\n    }\r\n});\r\n// In dev mode, the proxy target exposes the same properties as seen on `this`\r\n// for easier console inspection. In prod mode it will be an empty object so\r\n// these properties definitions can be skipped.\r\nfunction createRenderContext(instance) {\r\n    const target = {};\r\n    // expose internal instance for proxy handlers\r\n    Object.defineProperty(target, `_`, {\r\n        configurable: true,\r\n        enumerable: false,\r\n        get: () => instance\r\n    });\r\n    // expose public properties\r\n    Object.keys(publicPropertiesMap).forEach(key => {\r\n        Object.defineProperty(target, key, {\r\n            configurable: true,\r\n            enumerable: false,\r\n            get: () => publicPropertiesMap[key](instance),\r\n            // intercepted by the proxy so no need for implementation,\r\n            // but needed to prevent set errors\r\n            set: NOOP\r\n        });\r\n    });\r\n    // expose global properties\r\n    const { globalProperties } = instance.appContext.config;\r\n    Object.keys(globalProperties).forEach(key => {\r\n        Object.defineProperty(target, key, {\r\n            configurable: true,\r\n            enumerable: false,\r\n            get: () => globalProperties[key],\r\n            set: NOOP\r\n        });\r\n    });\r\n    return target;\r\n}\r\n// dev only\r\nfunction exposePropsOnRenderContext(instance) {\r\n    const { ctx, propsOptions: [propsOptions] } = instance;\r\n    if (propsOptions) {\r\n        Object.keys(propsOptions).forEach(key => {\r\n            Object.defineProperty(ctx, key, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                get: () => instance.props[key],\r\n                set: NOOP\r\n            });\r\n        });\r\n    }\r\n}\r\n// dev only\r\nfunction exposeSetupStateOnRenderContext(instance) {\r\n    const { ctx, setupState } = instance;\r\n    Object.keys(toRaw(setupState)).forEach(key => {\r\n        if (key[0] === '$' || key[0] === '_') {\r\n            warn(`setup() return property ${JSON.stringify(key)} should not start with \"$\" or \"_\" ` +\r\n                `which are reserved prefixes for Vue internals.`);\r\n            return;\r\n        }\r\n        Object.defineProperty(ctx, key, {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get: () => setupState[key],\r\n            set: NOOP\r\n        });\r\n    });\r\n}\n\nconst emptyAppContext = createAppContext();\r\nlet uid$1 = 0;\r\nfunction createComponentInstance(vnode, parent, suspense) {\r\n    const type = vnode.type;\r\n    // inherit parent app context - or - if root, adopt from root vnode\r\n    const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;\r\n    const instance = {\r\n        uid: uid$1++,\r\n        vnode,\r\n        type,\r\n        parent,\r\n        appContext,\r\n        root: null,\r\n        next: null,\r\n        subTree: null,\r\n        update: null,\r\n        render: null,\r\n        proxy: null,\r\n        withProxy: null,\r\n        effects: null,\r\n        provides: parent ? parent.provides : Object.create(appContext.provides),\r\n        accessCache: null,\r\n        renderCache: [],\r\n        // local resovled assets\r\n        components: null,\r\n        directives: null,\r\n        // resolved props and emits options\r\n        propsOptions: normalizePropsOptions(type, appContext),\r\n        emitsOptions: normalizeEmitsOptions(type, appContext),\r\n        // emit\r\n        emit: null,\r\n        emitted: null,\r\n        // state\r\n        ctx: EMPTY_OBJ,\r\n        data: EMPTY_OBJ,\r\n        props: EMPTY_OBJ,\r\n        attrs: EMPTY_OBJ,\r\n        slots: EMPTY_OBJ,\r\n        refs: EMPTY_OBJ,\r\n        setupState: EMPTY_OBJ,\r\n        setupContext: null,\r\n        // suspense related\r\n        suspense,\r\n        suspenseId: suspense ? suspense.pendingId : 0,\r\n        asyncDep: null,\r\n        asyncResolved: false,\r\n        // lifecycle hooks\r\n        // not using enums here because it results in computed properties\r\n        isMounted: false,\r\n        isUnmounted: false,\r\n        isDeactivated: false,\r\n        bc: null,\r\n        c: null,\r\n        bm: null,\r\n        m: null,\r\n        bu: null,\r\n        u: null,\r\n        um: null,\r\n        bum: null,\r\n        da: null,\r\n        a: null,\r\n        rtg: null,\r\n        rtc: null,\r\n        ec: null\r\n    };\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        instance.ctx = createRenderContext(instance);\r\n    }\r\n    else {\r\n        instance.ctx = { _: instance };\r\n    }\r\n    instance.root = parent ? parent.root : instance;\r\n    instance.emit = emit.bind(null, instance);\r\n    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n        devtoolsComponentAdded(instance);\r\n    }\r\n    return instance;\r\n}\r\nlet currentInstance = null;\r\nconst getCurrentInstance = () => currentInstance || currentRenderingInstance;\r\nconst setCurrentInstance = (instance) => {\r\n    currentInstance = instance;\r\n};\r\nconst isBuiltInTag = /*#__PURE__*/ makeMap('slot,component');\r\nfunction validateComponentName(name, config) {\r\n    const appIsNativeTag = config.isNativeTag || NO;\r\n    if (isBuiltInTag(name) || appIsNativeTag(name)) {\r\n        warn('Do not use built-in or reserved HTML elements as component id: ' + name);\r\n    }\r\n}\r\nlet isInSSRComponentSetup = false;\r\nfunction setupComponent(instance, isSSR = false) {\r\n    isInSSRComponentSetup = isSSR;\r\n    const { props, children, shapeFlag } = instance.vnode;\r\n    const isStateful = shapeFlag & 4 /* STATEFUL_COMPONENT */;\r\n    initProps(instance, props, isStateful, isSSR);\r\n    initSlots(instance, children);\r\n    const setupResult = isStateful\r\n        ? setupStatefulComponent(instance, isSSR)\r\n        : undefined;\r\n    isInSSRComponentSetup = false;\r\n    return setupResult;\r\n}\r\nfunction setupStatefulComponent(instance, isSSR) {\r\n    const Component = instance.type;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        if (Component.name) {\r\n            validateComponentName(Component.name, instance.appContext.config);\r\n        }\r\n        if (Component.components) {\r\n            const names = Object.keys(Component.components);\r\n            for (let i = 0; i < names.length; i++) {\r\n                validateComponentName(names[i], instance.appContext.config);\r\n            }\r\n        }\r\n        if (Component.directives) {\r\n            const names = Object.keys(Component.directives);\r\n            for (let i = 0; i < names.length; i++) {\r\n                validateDirectiveName(names[i]);\r\n            }\r\n        }\r\n    }\r\n    // 0. create render proxy property access cache\r\n    instance.accessCache = Object.create(null);\r\n    // 1. create public instance / render proxy\r\n    // also mark it raw so it's never observed\r\n    instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        exposePropsOnRenderContext(instance);\r\n    }\r\n    // 2. call setup()\r\n    const { setup } = Component;\r\n    if (setup) {\r\n        const setupContext = (instance.setupContext =\r\n            setup.length > 1 ? createSetupContext(instance) : null);\r\n        currentInstance = instance;\r\n        pauseTracking();\r\n        const setupResult = callWithErrorHandling(setup, instance, 0 /* SETUP_FUNCTION */, [(process.env.NODE_ENV !== 'production') ? shallowReadonly(instance.props) : instance.props, setupContext]);\r\n        resetTracking();\r\n        currentInstance = null;\r\n        if (isPromise(setupResult)) {\r\n            if (isSSR) {\r\n                // return the promise so server-renderer can wait on it\r\n                return setupResult.then((resolvedResult) => {\r\n                    handleSetupResult(instance, resolvedResult);\r\n                });\r\n            }\r\n            else {\r\n                // async setup returned Promise.\r\n                // bail here and wait for re-entry.\r\n                instance.asyncDep = setupResult;\r\n            }\r\n        }\r\n        else {\r\n            handleSetupResult(instance, setupResult);\r\n        }\r\n    }\r\n    else {\r\n        finishComponentSetup(instance);\r\n    }\r\n}\r\nfunction handleSetupResult(instance, setupResult, isSSR) {\r\n    if (isFunction(setupResult)) {\r\n        // setup returned an inline render function\r\n        instance.render = setupResult;\r\n    }\r\n    else if (isObject(setupResult)) {\r\n        if ((process.env.NODE_ENV !== 'production') && isVNode(setupResult)) {\r\n            warn(`setup() should not return VNodes directly - ` +\r\n                `return a render function instead.`);\r\n        }\r\n        // setup returned bindings.\r\n        // assuming a render function compiled from template is present.\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            instance.devtoolsRawSetupState = setupResult;\r\n        }\r\n        instance.setupState = proxyRefs(setupResult);\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            exposeSetupStateOnRenderContext(instance);\r\n        }\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production') && setupResult !== undefined) {\r\n        warn(`setup() should return an object. Received: ${setupResult === null ? 'null' : typeof setupResult}`);\r\n    }\r\n    finishComponentSetup(instance);\r\n}\r\nlet compile;\r\n/**\r\n * For runtime-dom to register the compiler.\r\n * Note the exported method uses any to avoid d.ts relying on the compiler types.\r\n */\r\nfunction registerRuntimeCompiler(_compile) {\r\n    compile = _compile;\r\n}\r\nfunction finishComponentSetup(instance, isSSR) {\r\n    const Component = instance.type;\r\n    // template / render function normalization\r\n    if (!instance.render) {\r\n        // could be set from setup()\r\n        if (compile && Component.template && !Component.render) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                startMeasure(instance, `compile`);\r\n            }\r\n            Component.render = compile(Component.template, {\r\n                isCustomElement: instance.appContext.config.isCustomElement,\r\n                delimiters: Component.delimiters\r\n            });\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                endMeasure(instance, `compile`);\r\n            }\r\n        }\r\n        instance.render = (Component.render || NOOP);\r\n        // for runtime-compiled render functions using `with` blocks, the render\r\n        // proxy used needs a different `has` handler which is more performant and\r\n        // also only allows a whitelist of globals to fallthrough.\r\n        if (instance.render._rc) {\r\n            instance.withProxy = new Proxy(instance.ctx, RuntimeCompiledPublicInstanceProxyHandlers);\r\n        }\r\n    }\r\n    // support for 2.x options\r\n    if (__VUE_OPTIONS_API__) {\r\n        currentInstance = instance;\r\n        applyOptions(instance, Component);\r\n        currentInstance = null;\r\n    }\r\n    // warn missing template/render\r\n    if ((process.env.NODE_ENV !== 'production') && !Component.render && instance.render === NOOP) {\r\n        /* istanbul ignore if */\r\n        if (!compile && Component.template) {\r\n            warn(`Component provided template option but ` +\r\n                `runtime compilation is not supported in this build of Vue.` +\r\n                ( ` Configure your bundler to alias \"vue\" to \"vue/dist/vue.esm-bundler.js\".`\r\n                    ) /* should not happen */);\r\n        }\r\n        else {\r\n            warn(`Component is missing template or render function.`);\r\n        }\r\n    }\r\n}\r\nconst attrHandlers = {\r\n    get: (target, key) => {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            markAttrsAccessed();\r\n        }\r\n        return target[key];\r\n    },\r\n    set: () => {\r\n        warn(`setupContext.attrs is readonly.`);\r\n        return false;\r\n    },\r\n    deleteProperty: () => {\r\n        warn(`setupContext.attrs is readonly.`);\r\n        return false;\r\n    }\r\n};\r\nfunction createSetupContext(instance) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        // We use getters in dev in case libs like test-utils overwrite instance\r\n        // properties (overwrites should not be done in prod)\r\n        return Object.freeze({\r\n            get attrs() {\r\n                return new Proxy(instance.attrs, attrHandlers);\r\n            },\r\n            get slots() {\r\n                return shallowReadonly(instance.slots);\r\n            },\r\n            get emit() {\r\n                return (event, ...args) => instance.emit(event, ...args);\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        return {\r\n            attrs: instance.attrs,\r\n            slots: instance.slots,\r\n            emit: instance.emit\r\n        };\r\n    }\r\n}\r\n// record effects created during a component's setup() so that they can be\r\n// stopped when the component unmounts\r\nfunction recordInstanceBoundEffect(effect) {\r\n    if (currentInstance) {\r\n        (currentInstance.effects || (currentInstance.effects = [])).push(effect);\r\n    }\r\n}\r\nconst classifyRE = /(?:^|[-_])(\\w)/g;\r\nconst classify = (str) => str.replace(classifyRE, c => c.toUpperCase()).replace(/[-_]/g, '');\r\n/* istanbul ignore next */\r\nfunction formatComponentName(instance, Component, isRoot = false) {\r\n    let name = isFunction(Component)\r\n        ? Component.displayName || Component.name\r\n        : Component.name;\r\n    if (!name && Component.__file) {\r\n        const match = Component.__file.match(/([^/\\\\]+)\\.vue$/);\r\n        if (match) {\r\n            name = match[1];\r\n        }\r\n    }\r\n    if (!name && instance && instance.parent) {\r\n        // try to infer the name based on reverse resolution\r\n        const inferFromRegistry = (registry) => {\r\n            for (const key in registry) {\r\n                if (registry[key] === Component) {\r\n                    return key;\r\n                }\r\n            }\r\n        };\r\n        name =\r\n            inferFromRegistry(instance.components ||\r\n                instance.parent.type.components) || inferFromRegistry(instance.appContext.components);\r\n    }\r\n    return name ? classify(name) : isRoot ? `App` : `Anonymous`;\r\n}\r\nfunction isClassComponent(value) {\r\n    return isFunction(value) && '__vccOpts' in value;\r\n}\n\nfunction computed(getterOrOptions) {\r\n    const c = computed$1(getterOrOptions);\r\n    recordInstanceBoundEffect(c.effect);\r\n    return c;\r\n}\n\n// implementation, close to no-op\r\nfunction defineComponent(options) {\r\n    return isFunction(options) ? { setup: options, name: options.name } : options;\r\n}\n\nfunction defineAsyncComponent(source) {\r\n    if (isFunction(source)) {\r\n        source = { loader: source };\r\n    }\r\n    const { loader, loadingComponent: loadingComponent, errorComponent: errorComponent, delay = 200, timeout, // undefined = never times out\r\n    suspensible = true, onError: userOnError } = source;\r\n    let pendingRequest = null;\r\n    let resolvedComp;\r\n    let retries = 0;\r\n    const retry = () => {\r\n        retries++;\r\n        pendingRequest = null;\r\n        return load();\r\n    };\r\n    const load = () => {\r\n        let thisRequest;\r\n        return (pendingRequest ||\r\n            (thisRequest = pendingRequest = loader()\r\n                .catch(err => {\r\n                err = err instanceof Error ? err : new Error(String(err));\r\n                if (userOnError) {\r\n                    return new Promise((resolve, reject) => {\r\n                        const userRetry = () => resolve(retry());\r\n                        const userFail = () => reject(err);\r\n                        userOnError(err, userRetry, userFail, retries + 1);\r\n                    });\r\n                }\r\n                else {\r\n                    throw err;\r\n                }\r\n            })\r\n                .then((comp) => {\r\n                if (thisRequest !== pendingRequest && pendingRequest) {\r\n                    return pendingRequest;\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && !comp) {\r\n                    warn(`Async component loader resolved to undefined. ` +\r\n                        `If you are using retry(), make sure to return its return value.`);\r\n                }\r\n                // interop module default\r\n                if (comp &&\r\n                    (comp.__esModule || comp[Symbol.toStringTag] === 'Module')) {\r\n                    comp = comp.default;\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && comp && !isObject(comp) && !isFunction(comp)) {\r\n                    throw new Error(`Invalid async component load result: ${comp}`);\r\n                }\r\n                resolvedComp = comp;\r\n                return comp;\r\n            })));\r\n    };\r\n    return defineComponent({\r\n        __asyncLoader: load,\r\n        name: 'AsyncComponentWrapper',\r\n        setup() {\r\n            const instance = currentInstance;\r\n            // already resolved\r\n            if (resolvedComp) {\r\n                return () => createInnerComp(resolvedComp, instance);\r\n            }\r\n            const onError = (err) => {\r\n                pendingRequest = null;\r\n                handleError(err, instance, 13 /* ASYNC_COMPONENT_LOADER */, !errorComponent /* do not throw in dev if user provided error component */);\r\n            };\r\n            // suspense-controlled or SSR.\r\n            if (( suspensible && instance.suspense) ||\r\n                (false )) {\r\n                return load()\r\n                    .then(comp => {\r\n                    return () => createInnerComp(comp, instance);\r\n                })\r\n                    .catch(err => {\r\n                    onError(err);\r\n                    return () => errorComponent\r\n                        ? createVNode(errorComponent, {\r\n                            error: err\r\n                        })\r\n                        : null;\r\n                });\r\n            }\r\n            const loaded = ref(false);\r\n            const error = ref();\r\n            const delayed = ref(!!delay);\r\n            if (delay) {\r\n                setTimeout(() => {\r\n                    delayed.value = false;\r\n                }, delay);\r\n            }\r\n            if (timeout != null) {\r\n                setTimeout(() => {\r\n                    if (!loaded.value && !error.value) {\r\n                        const err = new Error(`Async component timed out after ${timeout}ms.`);\r\n                        onError(err);\r\n                        error.value = err;\r\n                    }\r\n                }, timeout);\r\n            }\r\n            load()\r\n                .then(() => {\r\n                loaded.value = true;\r\n            })\r\n                .catch(err => {\r\n                onError(err);\r\n                error.value = err;\r\n            });\r\n            return () => {\r\n                if (loaded.value && resolvedComp) {\r\n                    return createInnerComp(resolvedComp, instance);\r\n                }\r\n                else if (error.value && errorComponent) {\r\n                    return createVNode(errorComponent, {\r\n                        error: error.value\r\n                    });\r\n                }\r\n                else if (loadingComponent && !delayed.value) {\r\n                    return createVNode(loadingComponent);\r\n                }\r\n            };\r\n        }\r\n    });\r\n}\r\nfunction createInnerComp(comp, { vnode: { props, children } }) {\r\n    return createVNode(comp, props, children);\r\n}\n\n// Actual implementation\r\nfunction h(type, propsOrChildren, children) {\r\n    const l = arguments.length;\r\n    if (l === 2) {\r\n        if (isObject(propsOrChildren) && !isArray(propsOrChildren)) {\r\n            // single vnode without props\r\n            if (isVNode(propsOrChildren)) {\r\n                return createVNode(type, null, [propsOrChildren]);\r\n            }\r\n            // props without children\r\n            return createVNode(type, propsOrChildren);\r\n        }\r\n        else {\r\n            // omit props\r\n            return createVNode(type, null, propsOrChildren);\r\n        }\r\n    }\r\n    else {\r\n        if (l > 3) {\r\n            children = Array.prototype.slice.call(arguments, 2);\r\n        }\r\n        else if (l === 3 && isVNode(children)) {\r\n            children = [children];\r\n        }\r\n        return createVNode(type, propsOrChildren, children);\r\n    }\r\n}\n\nconst ssrContextKey = Symbol((process.env.NODE_ENV !== 'production') ? `ssrContext` : ``);\r\nconst useSSRContext = () => {\r\n    {\r\n        const ctx = inject(ssrContextKey);\r\n        if (!ctx) {\r\n            warn(`Server rendering context not provided. Make sure to only call ` +\r\n                `useSsrContext() conditionally in the server build.`);\r\n        }\r\n        return ctx;\r\n    }\r\n};\n\nfunction initCustomFormatter() {\r\n    if (!(process.env.NODE_ENV !== 'production') || !true) {\r\n        return;\r\n    }\r\n    const vueStyle = { style: 'color:#3ba776' };\r\n    const numberStyle = { style: 'color:#0b1bc9' };\r\n    const stringStyle = { style: 'color:#b62e24' };\r\n    const keywordStyle = { style: 'color:#9d288c' };\r\n    // custom formatter for Chrome\r\n    // https://www.mattzeunert.com/2016/02/19/custom-chrome-devtools-object-formatters.html\r\n    const formatter = {\r\n        header(obj) {\r\n            // TODO also format ComponentPublicInstance & ctx.slots/attrs in setup\r\n            if (!isObject(obj)) {\r\n                return null;\r\n            }\r\n            if (obj.__isVue) {\r\n                return ['div', vueStyle, `VueInstance`];\r\n            }\r\n            else if (isRef(obj)) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ['span', vueStyle, genRefFlag(obj)],\r\n                    '<',\r\n                    formatValue(obj.value),\r\n                    `>`\r\n                ];\r\n            }\r\n            else if (isReactive(obj)) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ['span', vueStyle, 'Reactive'],\r\n                    '<',\r\n                    formatValue(obj),\r\n                    `>${isReadonly(obj) ? ` (readonly)` : ``}`\r\n                ];\r\n            }\r\n            else if (isReadonly(obj)) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ['span', vueStyle, 'Readonly'],\r\n                    '<',\r\n                    formatValue(obj),\r\n                    '>'\r\n                ];\r\n            }\r\n            return null;\r\n        },\r\n        hasBody(obj) {\r\n            return obj && obj.__isVue;\r\n        },\r\n        body(obj) {\r\n            if (obj && obj.__isVue) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ...formatInstance(obj.$)\r\n                ];\r\n            }\r\n        }\r\n    };\r\n    function formatInstance(instance) {\r\n        const blocks = [];\r\n        if (instance.type.props && instance.props) {\r\n            blocks.push(createInstanceBlock('props', toRaw(instance.props)));\r\n        }\r\n        if (instance.setupState !== EMPTY_OBJ) {\r\n            blocks.push(createInstanceBlock('setup', instance.setupState));\r\n        }\r\n        if (instance.data !== EMPTY_OBJ) {\r\n            blocks.push(createInstanceBlock('data', toRaw(instance.data)));\r\n        }\r\n        const computed = extractKeys(instance, 'computed');\r\n        if (computed) {\r\n            blocks.push(createInstanceBlock('computed', computed));\r\n        }\r\n        const injected = extractKeys(instance, 'inject');\r\n        if (injected) {\r\n            blocks.push(createInstanceBlock('injected', injected));\r\n        }\r\n        blocks.push([\r\n            'div',\r\n            {},\r\n            [\r\n                'span',\r\n                {\r\n                    style: keywordStyle.style + ';opacity:0.66'\r\n                },\r\n                '$ (internal): '\r\n            ],\r\n            ['object', { object: instance }]\r\n        ]);\r\n        return blocks;\r\n    }\r\n    function createInstanceBlock(type, target) {\r\n        target = extend({}, target);\r\n        if (!Object.keys(target).length) {\r\n            return ['span', {}];\r\n        }\r\n        return [\r\n            'div',\r\n            { style: 'line-height:1.25em;margin-bottom:0.6em' },\r\n            [\r\n                'div',\r\n                {\r\n                    style: 'color:#476582'\r\n                },\r\n                type\r\n            ],\r\n            [\r\n                'div',\r\n                {\r\n                    style: 'padding-left:1.25em'\r\n                },\r\n                ...Object.keys(target).map(key => {\r\n                    return [\r\n                        'div',\r\n                        {},\r\n                        ['span', keywordStyle, key + ': '],\r\n                        formatValue(target[key], false)\r\n                    ];\r\n                })\r\n            ]\r\n        ];\r\n    }\r\n    function formatValue(v, asRaw = true) {\r\n        if (typeof v === 'number') {\r\n            return ['span', numberStyle, v];\r\n        }\r\n        else if (typeof v === 'string') {\r\n            return ['span', stringStyle, JSON.stringify(v)];\r\n        }\r\n        else if (typeof v === 'boolean') {\r\n            return ['span', keywordStyle, v];\r\n        }\r\n        else if (isObject(v)) {\r\n            return ['object', { object: asRaw ? toRaw(v) : v }];\r\n        }\r\n        else {\r\n            return ['span', stringStyle, String(v)];\r\n        }\r\n    }\r\n    function extractKeys(instance, type) {\r\n        const Comp = instance.type;\r\n        if (isFunction(Comp)) {\r\n            return;\r\n        }\r\n        const extracted = {};\r\n        for (const key in instance.ctx) {\r\n            if (isKeyOfType(Comp, key, type)) {\r\n                extracted[key] = instance.ctx[key];\r\n            }\r\n        }\r\n        return extracted;\r\n    }\r\n    function isKeyOfType(Comp, key, type) {\r\n        const opts = Comp[type];\r\n        if ((isArray(opts) && opts.includes(key)) ||\r\n            (isObject(opts) && key in opts)) {\r\n            return true;\r\n        }\r\n        if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {\r\n            return true;\r\n        }\r\n        if (Comp.mixins && Comp.mixins.some(m => isKeyOfType(m, key, type))) {\r\n            return true;\r\n        }\r\n    }\r\n    function genRefFlag(v) {\r\n        if (v._shallow) {\r\n            return `ShallowRef`;\r\n        }\r\n        if (v.effect) {\r\n            return `ComputedRef`;\r\n        }\r\n        return `Ref`;\r\n    }\r\n    /* eslint-disable no-restricted-globals */\r\n    if (window.devtoolsFormatters) {\r\n        window.devtoolsFormatters.push(formatter);\r\n    }\r\n    else {\r\n        window.devtoolsFormatters = [formatter];\r\n    }\r\n}\n\n/**\r\n * Actual implementation\r\n */\r\nfunction renderList(source, renderItem) {\r\n    let ret;\r\n    if (isArray(source) || isString(source)) {\r\n        ret = new Array(source.length);\r\n        for (let i = 0, l = source.length; i < l; i++) {\r\n            ret[i] = renderItem(source[i], i);\r\n        }\r\n    }\r\n    else if (typeof source === 'number') {\r\n        if ((process.env.NODE_ENV !== 'production') && !Number.isInteger(source)) {\r\n            warn(`The v-for range expect an integer value but got ${source}.`);\r\n            return [];\r\n        }\r\n        ret = new Array(source);\r\n        for (let i = 0; i < source; i++) {\r\n            ret[i] = renderItem(i + 1, i);\r\n        }\r\n    }\r\n    else if (isObject(source)) {\r\n        if (source[Symbol.iterator]) {\r\n            ret = Array.from(source, renderItem);\r\n        }\r\n        else {\r\n            const keys = Object.keys(source);\r\n            ret = new Array(keys.length);\r\n            for (let i = 0, l = keys.length; i < l; i++) {\r\n                const key = keys[i];\r\n                ret[i] = renderItem(source[key], key, i);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        ret = [];\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * For prefixing keys in v-on=\"obj\" with \"on\"\r\n * @private\r\n */\r\nfunction toHandlers(obj) {\r\n    const ret = {};\r\n    if ((process.env.NODE_ENV !== 'production') && !isObject(obj)) {\r\n        warn(`v-on with no argument expects an object value.`);\r\n        return ret;\r\n    }\r\n    for (const key in obj) {\r\n        ret[toHandlerKey(key)] = obj[key];\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * Compiler runtime helper for creating dynamic slots object\r\n * @private\r\n */\r\nfunction createSlots(slots, dynamicSlots) {\r\n    for (let i = 0; i < dynamicSlots.length; i++) {\r\n        const slot = dynamicSlots[i];\r\n        // array of dynamic slot generated by <template v-for=\"...\" #[...]>\r\n        if (isArray(slot)) {\r\n            for (let j = 0; j < slot.length; j++) {\r\n                slots[slot[j].name] = slot[j].fn;\r\n            }\r\n        }\r\n        else if (slot) {\r\n            // conditional single slot generated by <template v-if=\"...\" #foo>\r\n            slots[slot.name] = slot.fn;\r\n        }\r\n    }\r\n    return slots;\r\n}\n\n// Core API ------------------------------------------------------------------\r\nconst version = \"3.0.2\";\r\n/**\r\n * SSR utils for \\@vue/server-renderer. Only exposed in cjs builds.\r\n * @internal\r\n */\r\nconst ssrUtils = ( null);\n\nexport { BaseTransition, Comment, Fragment, KeepAlive, Static, Suspense, Teleport, Text, callWithAsyncErrorHandling, callWithErrorHandling, cloneVNode, computed, createBlock, createCommentVNode, createHydrationRenderer, createRenderer, createSlots, createStaticVNode, createTextVNode, createVNode, defineAsyncComponent, defineComponent, devtools, getCurrentInstance, getTransitionRawChildren, h, handleError, initCustomFormatter, inject, isVNode, mergeProps, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onUnmounted, onUpdated, openBlock, popScopeId, provide, pushScopeId, queuePostFlushCb, registerRuntimeCompiler, renderList, renderSlot, resolveComponent, resolveDirective, resolveDynamicComponent, resolveTransitionHooks, setBlockTracking, setDevtoolsHook, setTransitionHooks, ssrContextKey, ssrUtils, toHandlers, transformVNodeArgs, useSSRContext, useTransitionState, version, warn, watch, watchEffect, withCtx, withDirectives, withScopeId };\n","import { camelize, warn, callWithAsyncErrorHandling, getCurrentInstance, onMounted, watchEffect, onUpdated, unref, Fragment, h, BaseTransition, useTransitionState, getTransitionRawChildren, setTransitionHooks, resolveTransitionHooks, createVNode, createRenderer, createHydrationRenderer } from '@vue/runtime-core';\nexport * from '@vue/runtime-core';\nimport { isString, isArray, hyphenate, capitalize, isSpecialBooleanAttr, isOn, isModelListener, isFunction, EMPTY_OBJ, extend, isObject, toNumber, invokeArrayFns, looseIndexOf, isSet, looseEqual, isHTMLTag, isSVGTag } from '@vue/shared';\n\nconst svgNS = 'http://www.w3.org/2000/svg';\r\nconst doc = (typeof document !== 'undefined' ? document : null);\r\nlet tempContainer;\r\nlet tempSVGContainer;\r\nconst nodeOps = {\r\n    insert: (child, parent, anchor) => {\r\n        parent.insertBefore(child, anchor || null);\r\n    },\r\n    remove: child => {\r\n        const parent = child.parentNode;\r\n        if (parent) {\r\n            parent.removeChild(child);\r\n        }\r\n    },\r\n    createElement: (tag, isSVG, is) => isSVG\r\n        ? doc.createElementNS(svgNS, tag)\r\n        : doc.createElement(tag, is ? { is } : undefined),\r\n    createText: text => doc.createTextNode(text),\r\n    createComment: text => doc.createComment(text),\r\n    setText: (node, text) => {\r\n        node.nodeValue = text;\r\n    },\r\n    setElementText: (el, text) => {\r\n        el.textContent = text;\r\n    },\r\n    parentNode: node => node.parentNode,\r\n    nextSibling: node => node.nextSibling,\r\n    querySelector: selector => doc.querySelector(selector),\r\n    setScopeId(el, id) {\r\n        el.setAttribute(id, '');\r\n    },\r\n    cloneNode(el) {\r\n        return el.cloneNode(true);\r\n    },\r\n    // __UNSAFE__\r\n    // Reason: innerHTML.\r\n    // Static content here can only come from compiled templates.\r\n    // As long as the user only uses trusted templates, this is safe.\r\n    insertStaticContent(content, parent, anchor, isSVG) {\r\n        const temp = isSVG\r\n            ? tempSVGContainer ||\r\n                (tempSVGContainer = doc.createElementNS(svgNS, 'svg'))\r\n            : tempContainer || (tempContainer = doc.createElement('div'));\r\n        temp.innerHTML = content;\r\n        const first = temp.firstChild;\r\n        let node = first;\r\n        let last = node;\r\n        while (node) {\r\n            last = node;\r\n            nodeOps.insert(node, parent, anchor);\r\n            node = temp.firstChild;\r\n        }\r\n        return [first, last];\r\n    }\r\n};\n\n// compiler should normalize class + :class bindings on the same element\r\n// into a single binding ['staticClass', dynamic]\r\nfunction patchClass(el, value, isSVG) {\r\n    if (value == null) {\r\n        value = '';\r\n    }\r\n    if (isSVG) {\r\n        el.setAttribute('class', value);\r\n    }\r\n    else {\r\n        // directly setting className should be faster than setAttribute in theory\r\n        // if this is an element during a transition, take the temporary transition\r\n        // classes into account.\r\n        const transitionClasses = el._vtc;\r\n        if (transitionClasses) {\r\n            value = (value\r\n                ? [value, ...transitionClasses]\r\n                : [...transitionClasses]).join(' ');\r\n        }\r\n        el.className = value;\r\n    }\r\n}\n\nfunction patchStyle(el, prev, next) {\r\n    const style = el.style;\r\n    if (!next) {\r\n        el.removeAttribute('style');\r\n    }\r\n    else if (isString(next)) {\r\n        if (prev !== next) {\r\n            style.cssText = next;\r\n        }\r\n    }\r\n    else {\r\n        for (const key in next) {\r\n            setStyle(style, key, next[key]);\r\n        }\r\n        if (prev && !isString(prev)) {\r\n            for (const key in prev) {\r\n                if (next[key] == null) {\r\n                    setStyle(style, key, '');\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nconst importantRE = /\\s*!important$/;\r\nfunction setStyle(style, name, val) {\r\n    if (isArray(val)) {\r\n        val.forEach(v => setStyle(style, name, v));\r\n    }\r\n    else {\r\n        if (name.startsWith('--')) {\r\n            // custom property definition\r\n            style.setProperty(name, val);\r\n        }\r\n        else {\r\n            const prefixed = autoPrefix(style, name);\r\n            if (importantRE.test(val)) {\r\n                // !important\r\n                style.setProperty(hyphenate(prefixed), val.replace(importantRE, ''), 'important');\r\n            }\r\n            else {\r\n                style[prefixed] = val;\r\n            }\r\n        }\r\n    }\r\n}\r\nconst prefixes = ['Webkit', 'Moz', 'ms'];\r\nconst prefixCache = {};\r\nfunction autoPrefix(style, rawName) {\r\n    const cached = prefixCache[rawName];\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    let name = camelize(rawName);\r\n    if (name !== 'filter' && name in style) {\r\n        return (prefixCache[rawName] = name);\r\n    }\r\n    name = capitalize(name);\r\n    for (let i = 0; i < prefixes.length; i++) {\r\n        const prefixed = prefixes[i] + name;\r\n        if (prefixed in style) {\r\n            return (prefixCache[rawName] = prefixed);\r\n        }\r\n    }\r\n    return rawName;\r\n}\n\nconst xlinkNS = 'http://www.w3.org/1999/xlink';\r\nfunction patchAttr(el, key, value, isSVG) {\r\n    if (isSVG && key.startsWith('xlink:')) {\r\n        if (value == null) {\r\n            el.removeAttributeNS(xlinkNS, key.slice(6, key.length));\r\n        }\r\n        else {\r\n            el.setAttributeNS(xlinkNS, key, value);\r\n        }\r\n    }\r\n    else {\r\n        // note we are only checking boolean attributes that don't have a\r\n        // corresponding dom prop of the same name here.\r\n        const isBoolean = isSpecialBooleanAttr(key);\r\n        if (value == null || (isBoolean && value === false)) {\r\n            el.removeAttribute(key);\r\n        }\r\n        else {\r\n            el.setAttribute(key, isBoolean ? '' : value);\r\n        }\r\n    }\r\n}\n\n// __UNSAFE__\r\n// functions. The user is responsible for using them with only trusted content.\r\nfunction patchDOMProp(el, key, value, \r\n// the following args are passed only due to potential innerHTML/textContent\r\n// overriding existing VNodes, in which case the old tree must be properly\r\n// unmounted.\r\nprevChildren, parentComponent, parentSuspense, unmountChildren) {\r\n    if (key === 'innerHTML' || key === 'textContent') {\r\n        if (prevChildren) {\r\n            unmountChildren(prevChildren, parentComponent, parentSuspense);\r\n        }\r\n        el[key] = value == null ? '' : value;\r\n        return;\r\n    }\r\n    if (key === 'value' && el.tagName !== 'PROGRESS') {\r\n        // store value as _value as well since\r\n        // non-string values will be stringified.\r\n        el._value = value;\r\n        const newValue = value == null ? '' : value;\r\n        if (el.value !== newValue) {\r\n            el.value = newValue;\r\n        }\r\n        return;\r\n    }\r\n    if (value === '' && typeof el[key] === 'boolean') {\r\n        // e.g. <select multiple> compiles to { multiple: '' }\r\n        el[key] = true;\r\n    }\r\n    else if (value == null && typeof el[key] === 'string') {\r\n        // e.g. <div :id=\"null\">\r\n        el[key] = '';\r\n        el.removeAttribute(key);\r\n    }\r\n    else {\r\n        // some properties perform value validation and throw\r\n        try {\r\n            el[key] = value;\r\n        }\r\n        catch (e) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                warn(`Failed setting prop \"${key}\" on <${el.tagName.toLowerCase()}>: ` +\r\n                    `value ${value} is invalid.`, e);\r\n            }\r\n        }\r\n    }\r\n}\n\n// Async edge case fix requires storing an event listener's attach timestamp.\r\nlet _getNow = Date.now;\r\n// Determine what event timestamp the browser is using. Annoyingly, the\r\n// timestamp can either be hi-res (relative to page load) or low-res\r\n// (relative to UNIX epoch), so in order to compare time we have to use the\r\n// same timestamp type when saving the flush timestamp.\r\nif (typeof document !== 'undefined' &&\r\n    _getNow() > document.createEvent('Event').timeStamp) {\r\n    // if the low-res timestamp which is bigger than the event timestamp\r\n    // (which is evaluated AFTER) it means the event is using a hi-res timestamp,\r\n    // and we need to use the hi-res version for event listeners as well.\r\n    _getNow = () => performance.now();\r\n}\r\n// To avoid the overhead of repeatedly calling performance.now(), we cache\r\n// and use the same timestamp for all event listeners attached in the same tick.\r\nlet cachedNow = 0;\r\nconst p = Promise.resolve();\r\nconst reset = () => {\r\n    cachedNow = 0;\r\n};\r\nconst getNow = () => cachedNow || (p.then(reset), (cachedNow = _getNow()));\r\nfunction addEventListener(el, event, handler, options) {\r\n    el.addEventListener(event, handler, options);\r\n}\r\nfunction removeEventListener(el, event, handler, options) {\r\n    el.removeEventListener(event, handler, options);\r\n}\r\nfunction patchEvent(el, rawName, prevValue, nextValue, instance = null) {\r\n    // vei = vue event invokers\r\n    const invokers = el._vei || (el._vei = {});\r\n    const existingInvoker = invokers[rawName];\r\n    if (nextValue && existingInvoker) {\r\n        // patch\r\n        existingInvoker.value = nextValue;\r\n    }\r\n    else {\r\n        const [name, options] = parseName(rawName);\r\n        if (nextValue) {\r\n            // add\r\n            const invoker = (invokers[rawName] = createInvoker(nextValue, instance));\r\n            addEventListener(el, name, invoker, options);\r\n        }\r\n        else if (existingInvoker) {\r\n            // remove\r\n            removeEventListener(el, name, existingInvoker, options);\r\n            invokers[rawName] = undefined;\r\n        }\r\n    }\r\n}\r\nconst optionsModifierRE = /(?:Once|Passive|Capture)$/;\r\nfunction parseName(name) {\r\n    let options;\r\n    if (optionsModifierRE.test(name)) {\r\n        options = {};\r\n        let m;\r\n        while ((m = name.match(optionsModifierRE))) {\r\n            name = name.slice(0, name.length - m[0].length);\r\n            options[m[0].toLowerCase()] = true;\r\n        }\r\n    }\r\n    return [name.slice(2).toLowerCase(), options];\r\n}\r\nfunction createInvoker(initialValue, instance) {\r\n    const invoker = (e) => {\r\n        // async edge case #6566: inner click event triggers patch, event handler\r\n        // attached to outer element during patch, and triggered again. This\r\n        // happens because browsers fire microtask ticks between event propagation.\r\n        // the solution is simple: we save the timestamp when a handler is attached,\r\n        // and the handler would only fire if the event passed to it was fired\r\n        // AFTER it was attached.\r\n        const timeStamp = e.timeStamp || _getNow();\r\n        if (timeStamp >= invoker.attached - 1) {\r\n            callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5 /* NATIVE_EVENT_HANDLER */, [e]);\r\n        }\r\n    };\r\n    invoker.value = initialValue;\r\n    invoker.attached = getNow();\r\n    return invoker;\r\n}\r\nfunction patchStopImmediatePropagation(e, value) {\r\n    if (isArray(value)) {\r\n        const originalStop = e.stopImmediatePropagation;\r\n        e.stopImmediatePropagation = () => {\r\n            originalStop.call(e);\r\n            e._stopped = true;\r\n        };\r\n        return value.map(fn => (e) => !e._stopped && fn(e));\r\n    }\r\n    else {\r\n        return value;\r\n    }\r\n}\n\nconst nativeOnRE = /^on[a-z]/;\r\nconst forcePatchProp = (_, key) => key === 'value';\r\nconst patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {\r\n    switch (key) {\r\n        // special\r\n        case 'class':\r\n            patchClass(el, nextValue, isSVG);\r\n            break;\r\n        case 'style':\r\n            patchStyle(el, prevValue, nextValue);\r\n            break;\r\n        default:\r\n            if (isOn(key)) {\r\n                // ignore v-model listeners\r\n                if (!isModelListener(key)) {\r\n                    patchEvent(el, key, prevValue, nextValue, parentComponent);\r\n                }\r\n            }\r\n            else if (shouldSetAsProp(el, key, nextValue, isSVG)) {\r\n                patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);\r\n            }\r\n            else {\r\n                // special case for <input v-model type=\"checkbox\"> with\r\n                // :true-value & :false-value\r\n                // store value as dom properties since non-string values will be\r\n                // stringified.\r\n                if (key === 'true-value') {\r\n                    el._trueValue = nextValue;\r\n                }\r\n                else if (key === 'false-value') {\r\n                    el._falseValue = nextValue;\r\n                }\r\n                patchAttr(el, key, nextValue, isSVG);\r\n            }\r\n            break;\r\n    }\r\n};\r\nfunction shouldSetAsProp(el, key, value, isSVG) {\r\n    if (isSVG) {\r\n        // most keys must be set as attribute on svg elements to work\r\n        // ...except innerHTML\r\n        if (key === 'innerHTML') {\r\n            return true;\r\n        }\r\n        // or native onclick with function values\r\n        if (key in el && nativeOnRE.test(key) && isFunction(value)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // spellcheck and draggable are numerated attrs, however their\r\n    // corresponding DOM properties are actually booleans - this leads to\r\n    // setting it with a string \"false\" value leading it to be coerced to\r\n    // `true`, so we need to always treat them as attributes.\r\n    // Note that `contentEditable` doesn't have this problem: its DOM\r\n    // property is also enumerated string values.\r\n    if (key === 'spellcheck' || key === 'draggable') {\r\n        return false;\r\n    }\r\n    // #1787 form as an attribute must be a string, while it accepts an Element as\r\n    // a prop\r\n    if (key === 'form' && typeof value === 'string') {\r\n        return false;\r\n    }\r\n    // #1526 <input list> must be set as attribute\r\n    if (key === 'list' && el.tagName === 'INPUT') {\r\n        return false;\r\n    }\r\n    // native onclick with string value, must be set as attribute\r\n    if (nativeOnRE.test(key) && isString(value)) {\r\n        return false;\r\n    }\r\n    return key in el;\r\n}\n\nfunction useCssModule(name = '$style') {\r\n    /* istanbul ignore else */\r\n    {\r\n        const instance = getCurrentInstance();\r\n        if (!instance) {\r\n            (process.env.NODE_ENV !== 'production') && warn(`useCssModule must be called inside setup()`);\r\n            return EMPTY_OBJ;\r\n        }\r\n        const modules = instance.type.__cssModules;\r\n        if (!modules) {\r\n            (process.env.NODE_ENV !== 'production') && warn(`Current instance does not have CSS modules injected.`);\r\n            return EMPTY_OBJ;\r\n        }\r\n        const mod = modules[name];\r\n        if (!mod) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Current instance does not have CSS module named \"${name}\".`);\r\n            return EMPTY_OBJ;\r\n        }\r\n        return mod;\r\n    }\r\n}\n\nfunction useCssVars(getter, scoped = false) {\r\n    const instance = getCurrentInstance();\r\n    /* istanbul ignore next */\r\n    if (!instance) {\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn(`useCssVars is called without current active component instance.`);\r\n        return;\r\n    }\r\n    const prefix = scoped && instance.type.__scopeId\r\n        ? `${instance.type.__scopeId.replace(/^data-v-/, '')}-`\r\n        : ``;\r\n    const setVars = () => setVarsOnVNode(instance.subTree, getter(instance.proxy), prefix);\r\n    onMounted(() => watchEffect(setVars));\r\n    onUpdated(setVars);\r\n}\r\nfunction setVarsOnVNode(vnode, vars, prefix) {\r\n    if ( vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n        const suspense = vnode.suspense;\r\n        vnode = suspense.activeBranch;\r\n        if (suspense.pendingBranch && !suspense.isHydrating) {\r\n            suspense.effects.push(() => {\r\n                setVarsOnVNode(suspense.activeBranch, vars, prefix);\r\n            });\r\n        }\r\n    }\r\n    // drill down HOCs until it's a non-component vnode\r\n    while (vnode.component) {\r\n        vnode = vnode.component.subTree;\r\n    }\r\n    if (vnode.shapeFlag & 1 /* ELEMENT */ && vnode.el) {\r\n        const style = vnode.el.style;\r\n        for (const key in vars) {\r\n            style.setProperty(`--${prefix}${key}`, unref(vars[key]));\r\n        }\r\n    }\r\n    else if (vnode.type === Fragment) {\r\n        vnode.children.forEach(c => setVarsOnVNode(c, vars, prefix));\r\n    }\r\n}\n\nconst TRANSITION = 'transition';\r\nconst ANIMATION = 'animation';\r\n// DOM Transition is a higher-order-component based on the platform-agnostic\r\n// base Transition component, with DOM-specific logic.\r\nconst Transition = (props, { slots }) => h(BaseTransition, resolveTransitionProps(props), slots);\r\nTransition.displayName = 'Transition';\r\nconst DOMTransitionPropsValidators = {\r\n    name: String,\r\n    type: String,\r\n    css: {\r\n        type: Boolean,\r\n        default: true\r\n    },\r\n    duration: [String, Number, Object],\r\n    enterFromClass: String,\r\n    enterActiveClass: String,\r\n    enterToClass: String,\r\n    appearFromClass: String,\r\n    appearActiveClass: String,\r\n    appearToClass: String,\r\n    leaveFromClass: String,\r\n    leaveActiveClass: String,\r\n    leaveToClass: String\r\n};\r\nconst TransitionPropsValidators = (Transition.props = /*#__PURE__*/ extend({}, BaseTransition.props, DOMTransitionPropsValidators));\r\nfunction resolveTransitionProps(rawProps) {\r\n    let { name = 'v', type, css = true, duration, enterFromClass = `${name}-enter-from`, enterActiveClass = `${name}-enter-active`, enterToClass = `${name}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name}-leave-from`, leaveActiveClass = `${name}-leave-active`, leaveToClass = `${name}-leave-to` } = rawProps;\r\n    const baseProps = {};\r\n    for (const key in rawProps) {\r\n        if (!(key in DOMTransitionPropsValidators)) {\r\n            baseProps[key] = rawProps[key];\r\n        }\r\n    }\r\n    if (!css) {\r\n        return baseProps;\r\n    }\r\n    const durations = normalizeDuration(duration);\r\n    const enterDuration = durations && durations[0];\r\n    const leaveDuration = durations && durations[1];\r\n    const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps;\r\n    const finishEnter = (el, isAppear, done) => {\r\n        removeTransitionClass(el, isAppear ? appearToClass : enterToClass);\r\n        removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);\r\n        done && done();\r\n    };\r\n    const finishLeave = (el, done) => {\r\n        removeTransitionClass(el, leaveToClass);\r\n        removeTransitionClass(el, leaveActiveClass);\r\n        done && done();\r\n    };\r\n    const makeEnterHook = (isAppear) => {\r\n        return (el, done) => {\r\n            const hook = isAppear ? onAppear : onEnter;\r\n            const resolve = () => finishEnter(el, isAppear, done);\r\n            hook && hook(el, resolve);\r\n            nextFrame(() => {\r\n                removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);\r\n                addTransitionClass(el, isAppear ? appearToClass : enterToClass);\r\n                if (!(hook && hook.length > 1)) {\r\n                    if (enterDuration) {\r\n                        setTimeout(resolve, enterDuration);\r\n                    }\r\n                    else {\r\n                        whenTransitionEnds(el, type, resolve);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n    };\r\n    return extend(baseProps, {\r\n        onBeforeEnter(el) {\r\n            onBeforeEnter && onBeforeEnter(el);\r\n            addTransitionClass(el, enterActiveClass);\r\n            addTransitionClass(el, enterFromClass);\r\n        },\r\n        onBeforeAppear(el) {\r\n            onBeforeAppear && onBeforeAppear(el);\r\n            addTransitionClass(el, appearActiveClass);\r\n            addTransitionClass(el, appearFromClass);\r\n        },\r\n        onEnter: makeEnterHook(false),\r\n        onAppear: makeEnterHook(true),\r\n        onLeave(el, done) {\r\n            const resolve = () => finishLeave(el, done);\r\n            addTransitionClass(el, leaveActiveClass);\r\n            addTransitionClass(el, leaveFromClass);\r\n            nextFrame(() => {\r\n                removeTransitionClass(el, leaveFromClass);\r\n                addTransitionClass(el, leaveToClass);\r\n                if (!(onLeave && onLeave.length > 1)) {\r\n                    if (leaveDuration) {\r\n                        setTimeout(resolve, leaveDuration);\r\n                    }\r\n                    else {\r\n                        whenTransitionEnds(el, type, resolve);\r\n                    }\r\n                }\r\n            });\r\n            onLeave && onLeave(el, resolve);\r\n        },\r\n        onEnterCancelled(el) {\r\n            finishEnter(el, false);\r\n            onEnterCancelled && onEnterCancelled(el);\r\n        },\r\n        onAppearCancelled(el) {\r\n            finishEnter(el, true);\r\n            onAppearCancelled && onAppearCancelled(el);\r\n        },\r\n        onLeaveCancelled(el) {\r\n            finishLeave(el);\r\n            onLeaveCancelled && onLeaveCancelled(el);\r\n        }\r\n    });\r\n}\r\nfunction normalizeDuration(duration) {\r\n    if (duration == null) {\r\n        return null;\r\n    }\r\n    else if (isObject(duration)) {\r\n        return [NumberOf(duration.enter), NumberOf(duration.leave)];\r\n    }\r\n    else {\r\n        const n = NumberOf(duration);\r\n        return [n, n];\r\n    }\r\n}\r\nfunction NumberOf(val) {\r\n    const res = toNumber(val);\r\n    if ((process.env.NODE_ENV !== 'production'))\r\n        validateDuration(res);\r\n    return res;\r\n}\r\nfunction validateDuration(val) {\r\n    if (typeof val !== 'number') {\r\n        warn(`<transition> explicit duration is not a valid number - ` +\r\n            `got ${JSON.stringify(val)}.`);\r\n    }\r\n    else if (isNaN(val)) {\r\n        warn(`<transition> explicit duration is NaN - ` +\r\n            'the duration expression might be incorrect.');\r\n    }\r\n}\r\nfunction addTransitionClass(el, cls) {\r\n    cls.split(/\\s+/).forEach(c => c && el.classList.add(c));\r\n    (el._vtc ||\r\n        (el._vtc = new Set())).add(cls);\r\n}\r\nfunction removeTransitionClass(el, cls) {\r\n    cls.split(/\\s+/).forEach(c => c && el.classList.remove(c));\r\n    const { _vtc } = el;\r\n    if (_vtc) {\r\n        _vtc.delete(cls);\r\n        if (!_vtc.size) {\r\n            el._vtc = undefined;\r\n        }\r\n    }\r\n}\r\nfunction nextFrame(cb) {\r\n    requestAnimationFrame(() => {\r\n        requestAnimationFrame(cb);\r\n    });\r\n}\r\nfunction whenTransitionEnds(el, expectedType, cb) {\r\n    const { type, timeout, propCount } = getTransitionInfo(el, expectedType);\r\n    if (!type) {\r\n        return cb();\r\n    }\r\n    const endEvent = type + 'end';\r\n    let ended = 0;\r\n    const end = () => {\r\n        el.removeEventListener(endEvent, onEnd);\r\n        cb();\r\n    };\r\n    const onEnd = (e) => {\r\n        if (e.target === el) {\r\n            if (++ended >= propCount) {\r\n                end();\r\n            }\r\n        }\r\n    };\r\n    setTimeout(() => {\r\n        if (ended < propCount) {\r\n            end();\r\n        }\r\n    }, timeout + 1);\r\n    el.addEventListener(endEvent, onEnd);\r\n}\r\nfunction getTransitionInfo(el, expectedType) {\r\n    const styles = window.getComputedStyle(el);\r\n    // JSDOM may return undefined for transition properties\r\n    const getStyleProperties = (key) => (styles[key] || '').split(', ');\r\n    const transitionDelays = getStyleProperties(TRANSITION + 'Delay');\r\n    const transitionDurations = getStyleProperties(TRANSITION + 'Duration');\r\n    const transitionTimeout = getTimeout(transitionDelays, transitionDurations);\r\n    const animationDelays = getStyleProperties(ANIMATION + 'Delay');\r\n    const animationDurations = getStyleProperties(ANIMATION + 'Duration');\r\n    const animationTimeout = getTimeout(animationDelays, animationDurations);\r\n    let type = null;\r\n    let timeout = 0;\r\n    let propCount = 0;\r\n    /* istanbul ignore if */\r\n    if (expectedType === TRANSITION) {\r\n        if (transitionTimeout > 0) {\r\n            type = TRANSITION;\r\n            timeout = transitionTimeout;\r\n            propCount = transitionDurations.length;\r\n        }\r\n    }\r\n    else if (expectedType === ANIMATION) {\r\n        if (animationTimeout > 0) {\r\n            type = ANIMATION;\r\n            timeout = animationTimeout;\r\n            propCount = animationDurations.length;\r\n        }\r\n    }\r\n    else {\r\n        timeout = Math.max(transitionTimeout, animationTimeout);\r\n        type =\r\n            timeout > 0\r\n                ? transitionTimeout > animationTimeout\r\n                    ? TRANSITION\r\n                    : ANIMATION\r\n                : null;\r\n        propCount = type\r\n            ? type === TRANSITION\r\n                ? transitionDurations.length\r\n                : animationDurations.length\r\n            : 0;\r\n    }\r\n    const hasTransform = type === TRANSITION &&\r\n        /\\b(transform|all)(,|$)/.test(styles[TRANSITION + 'Property']);\r\n    return {\r\n        type,\r\n        timeout,\r\n        propCount,\r\n        hasTransform\r\n    };\r\n}\r\nfunction getTimeout(delays, durations) {\r\n    while (delays.length < durations.length) {\r\n        delays = delays.concat(delays);\r\n    }\r\n    return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));\r\n}\r\n// Old versions of Chromium (below 61.0.3163.100) formats floating pointer\r\n// numbers in a locale-dependent way, using a comma instead of a dot.\r\n// If comma is not replaced with a dot, the input will be rounded down\r\n// (i.e. acting as a floor function) causing unexpected behaviors\r\nfunction toMs(s) {\r\n    return Number(s.slice(0, -1).replace(',', '.')) * 1000;\r\n}\n\nfunction toRaw(observed) {\r\n    return ((observed && toRaw(observed[\"__v_raw\" /* RAW */])) || observed);\r\n}\n\nconst positionMap = new WeakMap();\r\nconst newPositionMap = new WeakMap();\r\nconst TransitionGroupImpl = {\r\n    name: 'TransitionGroup',\r\n    props: /*#__PURE__*/ extend({}, TransitionPropsValidators, {\r\n        tag: String,\r\n        moveClass: String\r\n    }),\r\n    setup(props, { slots }) {\r\n        const instance = getCurrentInstance();\r\n        const state = useTransitionState();\r\n        let prevChildren;\r\n        let children;\r\n        onUpdated(() => {\r\n            // children is guaranteed to exist after initial render\r\n            if (!prevChildren.length) {\r\n                return;\r\n            }\r\n            const moveClass = props.moveClass || `${props.name || 'v'}-move`;\r\n            if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {\r\n                return;\r\n            }\r\n            // we divide the work into three loops to avoid mixing DOM reads and writes\r\n            // in each iteration - which helps prevent layout thrashing.\r\n            prevChildren.forEach(callPendingCbs);\r\n            prevChildren.forEach(recordPosition);\r\n            const movedChildren = prevChildren.filter(applyTranslation);\r\n            // force reflow to put everything in position\r\n            forceReflow();\r\n            movedChildren.forEach(c => {\r\n                const el = c.el;\r\n                const style = el.style;\r\n                addTransitionClass(el, moveClass);\r\n                style.transform = style.webkitTransform = style.transitionDuration = '';\r\n                const cb = (el._moveCb = (e) => {\r\n                    if (e && e.target !== el) {\r\n                        return;\r\n                    }\r\n                    if (!e || /transform$/.test(e.propertyName)) {\r\n                        el.removeEventListener('transitionend', cb);\r\n                        el._moveCb = null;\r\n                        removeTransitionClass(el, moveClass);\r\n                    }\r\n                });\r\n                el.addEventListener('transitionend', cb);\r\n            });\r\n        });\r\n        return () => {\r\n            const rawProps = toRaw(props);\r\n            const cssTransitionProps = resolveTransitionProps(rawProps);\r\n            const tag = rawProps.tag || Fragment;\r\n            prevChildren = children;\r\n            children = slots.default ? getTransitionRawChildren(slots.default()) : [];\r\n            for (let i = 0; i < children.length; i++) {\r\n                const child = children[i];\r\n                if (child.key != null) {\r\n                    setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`<TransitionGroup> children must be keyed.`);\r\n                }\r\n            }\r\n            if (prevChildren) {\r\n                for (let i = 0; i < prevChildren.length; i++) {\r\n                    const child = prevChildren[i];\r\n                    setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));\r\n                    positionMap.set(child, child.el.getBoundingClientRect());\r\n                }\r\n            }\r\n            return createVNode(tag, null, children);\r\n        };\r\n    }\r\n};\r\nconst TransitionGroup = TransitionGroupImpl;\r\nfunction callPendingCbs(c) {\r\n    const el = c.el;\r\n    if (el._moveCb) {\r\n        el._moveCb();\r\n    }\r\n    if (el._enterCb) {\r\n        el._enterCb();\r\n    }\r\n}\r\nfunction recordPosition(c) {\r\n    newPositionMap.set(c, c.el.getBoundingClientRect());\r\n}\r\nfunction applyTranslation(c) {\r\n    const oldPos = positionMap.get(c);\r\n    const newPos = newPositionMap.get(c);\r\n    const dx = oldPos.left - newPos.left;\r\n    const dy = oldPos.top - newPos.top;\r\n    if (dx || dy) {\r\n        const s = c.el.style;\r\n        s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;\r\n        s.transitionDuration = '0s';\r\n        return c;\r\n    }\r\n}\r\n// this is put in a dedicated function to avoid the line from being treeshaken\r\nfunction forceReflow() {\r\n    return document.body.offsetHeight;\r\n}\r\nfunction hasCSSTransform(el, root, moveClass) {\r\n    // Detect whether an element with the move class applied has\r\n    // CSS transitions. Since the element may be inside an entering\r\n    // transition at this very moment, we make a clone of it and remove\r\n    // all other transition classes applied to ensure only the move class\r\n    // is applied.\r\n    const clone = el.cloneNode();\r\n    if (el._vtc) {\r\n        el._vtc.forEach(cls => {\r\n            cls.split(/\\s+/).forEach(c => c && clone.classList.remove(c));\r\n        });\r\n    }\r\n    moveClass.split(/\\s+/).forEach(c => c && clone.classList.add(c));\r\n    clone.style.display = 'none';\r\n    const container = (root.nodeType === 1\r\n        ? root\r\n        : root.parentNode);\r\n    container.appendChild(clone);\r\n    const { hasTransform } = getTransitionInfo(clone);\r\n    container.removeChild(clone);\r\n    return hasTransform;\r\n}\n\nconst getModelAssigner = (vnode) => {\r\n    const fn = vnode.props['onUpdate:modelValue'];\r\n    return isArray(fn) ? value => invokeArrayFns(fn, value) : fn;\r\n};\r\nfunction onCompositionStart(e) {\r\n    e.target.composing = true;\r\n}\r\nfunction onCompositionEnd(e) {\r\n    const target = e.target;\r\n    if (target.composing) {\r\n        target.composing = false;\r\n        trigger(target, 'input');\r\n    }\r\n}\r\nfunction trigger(el, type) {\r\n    const e = document.createEvent('HTMLEvents');\r\n    e.initEvent(type, true, true);\r\n    el.dispatchEvent(e);\r\n}\r\n// We are exporting the v-model runtime directly as vnode hooks so that it can\r\n// be tree-shaken in case v-model is never used.\r\nconst vModelText = {\r\n    created(el, { modifiers: { lazy, trim, number } }, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        const castToNumber = number || el.type === 'number';\r\n        addEventListener(el, lazy ? 'change' : 'input', e => {\r\n            if (e.target.composing)\r\n                return;\r\n            let domValue = el.value;\r\n            if (trim) {\r\n                domValue = domValue.trim();\r\n            }\r\n            else if (castToNumber) {\r\n                domValue = toNumber(domValue);\r\n            }\r\n            el._assign(domValue);\r\n        });\r\n        if (trim) {\r\n            addEventListener(el, 'change', () => {\r\n                el.value = el.value.trim();\r\n            });\r\n        }\r\n        if (!lazy) {\r\n            addEventListener(el, 'compositionstart', onCompositionStart);\r\n            addEventListener(el, 'compositionend', onCompositionEnd);\r\n            // Safari < 10.2 & UIWebView doesn't fire compositionend when\r\n            // switching focus before confirming composition choice\r\n            // this also fixes the issue where some browsers e.g. iOS Chrome\r\n            // fires \"change\" instead of \"input\" on autocomplete.\r\n            addEventListener(el, 'change', onCompositionEnd);\r\n        }\r\n    },\r\n    // set value on mounted so it's after min/max for type=\"range\"\r\n    mounted(el, { value }) {\r\n        el.value = value == null ? '' : value;\r\n    },\r\n    beforeUpdate(el, { value, modifiers: { trim, number } }, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        // avoid clearing unresolved text. #2302\r\n        if (el.composing)\r\n            return;\r\n        if (document.activeElement === el) {\r\n            if (trim && el.value.trim() === value) {\r\n                return;\r\n            }\r\n            if ((number || el.type === 'number') && toNumber(el.value) === value) {\r\n                return;\r\n            }\r\n        }\r\n        const newValue = value == null ? '' : value;\r\n        if (el.value !== newValue) {\r\n            el.value = newValue;\r\n        }\r\n    }\r\n};\r\nconst vModelCheckbox = {\r\n    created(el, binding, vnode) {\r\n        setChecked(el, binding, vnode);\r\n        el._assign = getModelAssigner(vnode);\r\n        addEventListener(el, 'change', () => {\r\n            const modelValue = el._modelValue;\r\n            const elementValue = getValue(el);\r\n            const checked = el.checked;\r\n            const assign = el._assign;\r\n            if (isArray(modelValue)) {\r\n                const index = looseIndexOf(modelValue, elementValue);\r\n                const found = index !== -1;\r\n                if (checked && !found) {\r\n                    assign(modelValue.concat(elementValue));\r\n                }\r\n                else if (!checked && found) {\r\n                    const filtered = [...modelValue];\r\n                    filtered.splice(index, 1);\r\n                    assign(filtered);\r\n                }\r\n            }\r\n            else if (isSet(modelValue)) {\r\n                if (checked) {\r\n                    modelValue.add(elementValue);\r\n                }\r\n                else {\r\n                    modelValue.delete(elementValue);\r\n                }\r\n            }\r\n            else {\r\n                assign(getCheckboxValue(el, checked));\r\n            }\r\n        });\r\n    },\r\n    beforeUpdate(el, binding, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        setChecked(el, binding, vnode);\r\n    }\r\n};\r\nfunction setChecked(el, { value, oldValue }, vnode) {\r\n    el._modelValue = value;\r\n    if (isArray(value)) {\r\n        el.checked = looseIndexOf(value, vnode.props.value) > -1;\r\n    }\r\n    else if (isSet(value)) {\r\n        el.checked = value.has(vnode.props.value);\r\n    }\r\n    else if (value !== oldValue) {\r\n        el.checked = looseEqual(value, getCheckboxValue(el, true));\r\n    }\r\n}\r\nconst vModelRadio = {\r\n    created(el, { value }, vnode) {\r\n        el.checked = looseEqual(value, vnode.props.value);\r\n        el._assign = getModelAssigner(vnode);\r\n        addEventListener(el, 'change', () => {\r\n            el._assign(getValue(el));\r\n        });\r\n    },\r\n    beforeUpdate(el, { value, oldValue }, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        if (value !== oldValue) {\r\n            el.checked = looseEqual(value, vnode.props.value);\r\n        }\r\n    }\r\n};\r\nconst vModelSelect = {\r\n    created(el, { modifiers: { number } }, vnode) {\r\n        addEventListener(el, 'change', () => {\r\n            const selectedVal = Array.prototype.filter\r\n                .call(el.options, (o) => o.selected)\r\n                .map((o) => number ? toNumber(getValue(o)) : getValue(o));\r\n            el._assign(el.multiple ? selectedVal : selectedVal[0]);\r\n        });\r\n        el._assign = getModelAssigner(vnode);\r\n    },\r\n    // set value in mounted & updated because <select> relies on its children\r\n    // <option>s.\r\n    mounted(el, { value }) {\r\n        setSelected(el, value);\r\n    },\r\n    beforeUpdate(el, _binding, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n    },\r\n    updated(el, { value }) {\r\n        setSelected(el, value);\r\n    }\r\n};\r\nfunction setSelected(el, value) {\r\n    const isMultiple = el.multiple;\r\n    if (isMultiple && !isArray(value) && !isSet(value)) {\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn(`<select multiple v-model> expects an Array or Set value for its binding, ` +\r\n                `but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);\r\n        return;\r\n    }\r\n    for (let i = 0, l = el.options.length; i < l; i++) {\r\n        const option = el.options[i];\r\n        const optionValue = getValue(option);\r\n        if (isMultiple) {\r\n            if (isArray(value)) {\r\n                option.selected = looseIndexOf(value, optionValue) > -1;\r\n            }\r\n            else {\r\n                option.selected = value.has(optionValue);\r\n            }\r\n        }\r\n        else {\r\n            if (looseEqual(getValue(option), value)) {\r\n                el.selectedIndex = i;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    if (!isMultiple) {\r\n        el.selectedIndex = -1;\r\n    }\r\n}\r\n// retrieve raw value set via :value bindings\r\nfunction getValue(el) {\r\n    return '_value' in el ? el._value : el.value;\r\n}\r\n// retrieve raw value for true-value and false-value set via :true-value or :false-value bindings\r\nfunction getCheckboxValue(el, checked) {\r\n    const key = checked ? '_trueValue' : '_falseValue';\r\n    return key in el ? el[key] : checked;\r\n}\r\nconst vModelDynamic = {\r\n    created(el, binding, vnode) {\r\n        callModelHook(el, binding, vnode, null, 'created');\r\n    },\r\n    mounted(el, binding, vnode) {\r\n        callModelHook(el, binding, vnode, null, 'mounted');\r\n    },\r\n    beforeUpdate(el, binding, vnode, prevVNode) {\r\n        callModelHook(el, binding, vnode, prevVNode, 'beforeUpdate');\r\n    },\r\n    updated(el, binding, vnode, prevVNode) {\r\n        callModelHook(el, binding, vnode, prevVNode, 'updated');\r\n    }\r\n};\r\nfunction callModelHook(el, binding, vnode, prevVNode, hook) {\r\n    let modelToUse;\r\n    switch (el.tagName) {\r\n        case 'SELECT':\r\n            modelToUse = vModelSelect;\r\n            break;\r\n        case 'TEXTAREA':\r\n            modelToUse = vModelText;\r\n            break;\r\n        default:\r\n            switch (vnode.props && vnode.props.type) {\r\n                case 'checkbox':\r\n                    modelToUse = vModelCheckbox;\r\n                    break;\r\n                case 'radio':\r\n                    modelToUse = vModelRadio;\r\n                    break;\r\n                default:\r\n                    modelToUse = vModelText;\r\n            }\r\n    }\r\n    const fn = modelToUse[hook];\r\n    fn && fn(el, binding, vnode, prevVNode);\r\n}\n\nconst systemModifiers = ['ctrl', 'shift', 'alt', 'meta'];\r\nconst modifierGuards = {\r\n    stop: e => e.stopPropagation(),\r\n    prevent: e => e.preventDefault(),\r\n    self: e => e.target !== e.currentTarget,\r\n    ctrl: e => !e.ctrlKey,\r\n    shift: e => !e.shiftKey,\r\n    alt: e => !e.altKey,\r\n    meta: e => !e.metaKey,\r\n    left: e => 'button' in e && e.button !== 0,\r\n    middle: e => 'button' in e && e.button !== 1,\r\n    right: e => 'button' in e && e.button !== 2,\r\n    exact: (e, modifiers) => systemModifiers.some(m => e[`${m}Key`] && !modifiers.includes(m))\r\n};\r\n/**\r\n * @private\r\n */\r\nconst withModifiers = (fn, modifiers) => {\r\n    return (event, ...args) => {\r\n        for (let i = 0; i < modifiers.length; i++) {\r\n            const guard = modifierGuards[modifiers[i]];\r\n            if (guard && guard(event, modifiers))\r\n                return;\r\n        }\r\n        return fn(event, ...args);\r\n    };\r\n};\r\n// Kept for 2.x compat.\r\n// Note: IE11 compat for `spacebar` and `del` is removed for now.\r\nconst keyNames = {\r\n    esc: 'escape',\r\n    space: ' ',\r\n    up: 'arrow-up',\r\n    left: 'arrow-left',\r\n    right: 'arrow-right',\r\n    down: 'arrow-down',\r\n    delete: 'backspace'\r\n};\r\n/**\r\n * @private\r\n */\r\nconst withKeys = (fn, modifiers) => {\r\n    return (event) => {\r\n        if (!('key' in event))\r\n            return;\r\n        const eventKey = hyphenate(event.key);\r\n        if (\r\n        // None of the provided key modifiers match the current event key\r\n        !modifiers.some(k => k === eventKey || keyNames[k] === eventKey)) {\r\n            return;\r\n        }\r\n        return fn(event);\r\n    };\r\n};\n\nconst vShow = {\r\n    beforeMount(el, { value }, { transition }) {\r\n        el._vod = el.style.display === 'none' ? '' : el.style.display;\r\n        if (transition && value) {\r\n            transition.beforeEnter(el);\r\n        }\r\n        else {\r\n            setDisplay(el, value);\r\n        }\r\n    },\r\n    mounted(el, { value }, { transition }) {\r\n        if (transition && value) {\r\n            transition.enter(el);\r\n        }\r\n    },\r\n    updated(el, { value, oldValue }, { transition }) {\r\n        if (!value === !oldValue)\r\n            return;\r\n        if (transition) {\r\n            if (value) {\r\n                transition.beforeEnter(el);\r\n                setDisplay(el, true);\r\n                transition.enter(el);\r\n            }\r\n            else {\r\n                transition.leave(el, () => {\r\n                    setDisplay(el, false);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            setDisplay(el, value);\r\n        }\r\n    },\r\n    beforeUnmount(el, { value }) {\r\n        setDisplay(el, value);\r\n    }\r\n};\r\nfunction setDisplay(el, value) {\r\n    el.style.display = value ? el._vod : 'none';\r\n}\n\nconst rendererOptions = extend({ patchProp, forcePatchProp }, nodeOps);\r\n// lazy create the renderer - this makes core renderer logic tree-shakable\r\n// in case the user only imports reactivity utilities from Vue.\r\nlet renderer;\r\nlet enabledHydration = false;\r\nfunction ensureRenderer() {\r\n    return renderer || (renderer = createRenderer(rendererOptions));\r\n}\r\nfunction ensureHydrationRenderer() {\r\n    renderer = enabledHydration\r\n        ? renderer\r\n        : createHydrationRenderer(rendererOptions);\r\n    enabledHydration = true;\r\n    return renderer;\r\n}\r\n// use explicit type casts here to avoid import() calls in rolled-up d.ts\r\nconst render = ((...args) => {\r\n    ensureRenderer().render(...args);\r\n});\r\nconst hydrate = ((...args) => {\r\n    ensureHydrationRenderer().hydrate(...args);\r\n});\r\nconst createApp = ((...args) => {\r\n    const app = ensureRenderer().createApp(...args);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        injectNativeTagCheck(app);\r\n    }\r\n    const { mount } = app;\r\n    app.mount = (containerOrSelector) => {\r\n        const container = normalizeContainer(containerOrSelector);\r\n        if (!container)\r\n            return;\r\n        const component = app._component;\r\n        if (!isFunction(component) && !component.render && !component.template) {\r\n            component.template = container.innerHTML;\r\n        }\r\n        // clear content before mounting\r\n        container.innerHTML = '';\r\n        const proxy = mount(container);\r\n        container.removeAttribute('v-cloak');\r\n        container.setAttribute('data-v-app', '');\r\n        return proxy;\r\n    };\r\n    return app;\r\n});\r\nconst createSSRApp = ((...args) => {\r\n    const app = ensureHydrationRenderer().createApp(...args);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        injectNativeTagCheck(app);\r\n    }\r\n    const { mount } = app;\r\n    app.mount = (containerOrSelector) => {\r\n        const container = normalizeContainer(containerOrSelector);\r\n        if (container) {\r\n            return mount(container, true);\r\n        }\r\n    };\r\n    return app;\r\n});\r\nfunction injectNativeTagCheck(app) {\r\n    // Inject `isNativeTag`\r\n    // this is used for component name validation (dev only)\r\n    Object.defineProperty(app.config, 'isNativeTag', {\r\n        value: (tag) => isHTMLTag(tag) || isSVGTag(tag),\r\n        writable: false\r\n    });\r\n}\r\nfunction normalizeContainer(container) {\r\n    if (isString(container)) {\r\n        const res = document.querySelector(container);\r\n        if ((process.env.NODE_ENV !== 'production') && !res) {\r\n            warn(`Failed to mount app: mount target selector returned null.`);\r\n        }\r\n        return res;\r\n    }\r\n    return container;\r\n}\n\nexport { Transition, TransitionGroup, createApp, createSSRApp, hydrate, render, useCssModule, useCssVars, vModelCheckbox, vModelDynamic, vModelRadio, vModelSelect, vModelText, vShow, withKeys, withModifiers };\n","export const red = {\n  '50': '#ffebee',\n  '100': '#ffcdd2',\n  '200': '#ef9a9a',\n  '300': '#e57373',\n  '400': '#ef5350',\n  '500': '#f44336',\n  '600': '#e53935',\n  '700': '#d32f2f',\n  '800': '#c62828',\n  '900': '#b71c1c',\n  a100: '#ff8a80',\n  a200: '#ff5252',\n  a400: '#ff1744',\n  a700: '#d50000',\n}\n\nexport const pink = {\n  '50': '#fce4ec',\n  '100': '#f8bbd0',\n  '200': '#f48fb1',\n  '300': '#f06292',\n  '400': '#ec407a',\n  '500': '#e91e63',\n  '600': '#d81b60',\n  '700': '#c2185b',\n  '800': '#ad1457',\n  '900': '#880e4f',\n  a100: '#ff80ab',\n  a200: '#ff4081',\n  a400: '#f50057',\n  a700: '#c51162',\n}\n\nexport const purple = {\n  '50': '#f3e5f5',\n  '100': '#e1bee7',\n  '200': '#ce93d8',\n  '300': '#ba68c8',\n  '400': '#ab47bc',\n  '500': '#9c27b0',\n  '600': '#8e24aa',\n  '700': '#7b1fa2',\n  '800': '#6a1b9a',\n  '900': '#4a148c',\n  a100: '#ea80fc',\n  a200: '#e040fb',\n  a400: '#d500f9',\n  a700: '#aa00ff',\n}\n\nexport const deepPurple = {\n  '50': '#ede7f6',\n  '100': '#d1c4e9',\n  '200': '#b39ddb',\n  '300': '#9575cd',\n  '400': '#7e57c2',\n  '500': '#673ab7',\n  '600': '#5e35b1',\n  '700': '#512da8',\n  '800': '#4527a0',\n  '900': '#311b92',\n  a100: '#b388ff',\n  a200: '#7c4dff',\n  a400: '#651fff',\n  a700: '#6200ea',\n}\n\nexport const indigo = {\n  '50': '#e8eaf6',\n  '100': '#c5cae9',\n  '200': '#9fa8da',\n  '300': '#7986cb',\n  '400': '#5c6bc0',\n  '500': '#3f51b5',\n  '600': '#3949ab',\n  '700': '#303f9f',\n  '800': '#283593',\n  '900': '#1a237e',\n  a100: '#8c9eff',\n  a200: '#536dfe',\n  a400: '#3d5afe',\n  a700: '#304ffe',\n}\n\nexport const blue = {\n  '50': '#e3f2fd',\n  '100': '#bbdefb',\n  '200': '#90caf9',\n  '300': '#64b5f6',\n  '400': '#42a5f5',\n  '500': '#2196f3',\n  '600': '#1e88e5',\n  '700': '#1976d2',\n  '800': '#1565c0',\n  '900': '#0d47a1',\n  a100: '#82b1ff',\n  a200: '#448aff',\n  a400: '#2979ff',\n  a700: '#2962ff',\n}\n\nexport const lightBlue = {\n  '50': '#e1f5fe',\n  '100': '#b3e5fc',\n  '200': '#81d4fa',\n  '300': '#4fc3f7',\n  '400': '#29b6f6',\n  '500': '#03a9f4',\n  '600': '#039be5',\n  '700': '#0288d1',\n  '800': '#0277bd',\n  '900': '#01579b',\n  a100: '#80d8ff',\n  a200: '#40c4ff',\n  a400: '#00b0ff',\n  a700: '#0091ea',\n}\n\nexport const cyan = {\n  '50': '#e0f7fa',\n  '100': '#b2ebf2',\n  '200': '#80deea',\n  '300': '#4dd0e1',\n  '400': '#26c6da',\n  '500': '#00bcd4',\n  '600': '#00acc1',\n  '700': '#0097a7',\n  '800': '#00838f',\n  '900': '#006064',\n  a100: '#84ffff',\n  a200: '#18ffff',\n  a400: '#00e5ff',\n  a700: '#00b8d4',\n}\n\nexport const teal = {\n  '50': '#e0f2f1',\n  '100': '#b2dfdb',\n  '200': '#80cbc4',\n  '300': '#4db6ac',\n  '400': '#26a69a',\n  '500': '#009688',\n  '600': '#00897b',\n  '700': '#00796b',\n  '800': '#00695c',\n  '900': '#004d40',\n  a100: '#a7ffeb',\n  a200: '#64ffda',\n  a400: '#1de9b6',\n  a700: '#00bfa5',\n}\n\nexport const green = {\n  '50': '#e8f5e9',\n  '100': '#c8e6c9',\n  '200': '#a5d6a7',\n  '300': '#81c784',\n  '400': '#66bb6a',\n  '500': '#4caf50',\n  '600': '#43a047',\n  '700': '#388e3c',\n  '800': '#2e7d32',\n  '900': '#1b5e20',\n  a100: '#b9f6ca',\n  a200: '#69f0ae',\n  a400: '#00e676',\n  a700: '#00c853',\n}\n\nexport const lightGreen = {\n  '50': '#f1f8e9',\n  '100': '#dcedc8',\n  '200': '#c5e1a5',\n  '300': '#aed581',\n  '400': '#9ccc65',\n  '500': '#8bc34a',\n  '600': '#7cb342',\n  '700': '#689f38',\n  '800': '#558b2f',\n  '900': '#33691e',\n  a100: '#ccff90',\n  a200: '#b2ff59',\n  a400: '#76ff03',\n  a700: '#64dd17',\n}\n\nexport const lime = {\n  '50': '#f9fbe7',\n  '100': '#f0f4c3',\n  '200': '#e6ee9c',\n  '300': '#dce775',\n  '400': '#d4e157',\n  '500': '#cddc39',\n  '600': '#c0ca33',\n  '700': '#afb42b',\n  '800': '#9e9d24',\n  '900': '#827717',\n  a100: '#f4ff81',\n  a200: '#eeff41',\n  a400: '#c6ff00',\n  a700: '#aeea00',\n}\n\nexport const yellow = {\n  '50': '#fffde7',\n  '100': '#fff9c4',\n  '200': '#fff59d',\n  '300': '#fff176',\n  '400': '#ffee58',\n  '500': '#ffeb3b',\n  '600': '#fdd835',\n  '700': '#fbc02d',\n  '800': '#f9a825',\n  '900': '#f57f17',\n  a100: '#ffff8d',\n  a200: '#ffff00',\n  a400: '#ffea00',\n  a700: '#ffd600',\n}\n\nexport const amber = {\n  '50': '#fff8e1',\n  '100': '#ffecb3',\n  '200': '#ffe082',\n  '300': '#ffd54f',\n  '400': '#ffca28',\n  '500': '#ffc107',\n  '600': '#ffb300',\n  '700': '#ffa000',\n  '800': '#ff8f00',\n  '900': '#ff6f00',\n  a100: '#ffe57f',\n  a200: '#ffd740',\n  a400: '#ffc400',\n  a700: '#ffab00',\n}\n\nexport const orange = {\n  '50': '#fff3e0',\n  '100': '#ffe0b2',\n  '200': '#ffcc80',\n  '300': '#ffb74d',\n  '400': '#ffa726',\n  '500': '#ff9800',\n  '600': '#fb8c00',\n  '700': '#f57c00',\n  '800': '#ef6c00',\n  '900': '#e65100',\n  a100: '#ffd180',\n  a200: '#ffab40',\n  a400: '#ff9100',\n  a700: '#ff6d00',\n}\n\nexport const deepOrange = {\n  '50': '#fbe9e7',\n  '100': '#ffccbc',\n  '200': '#ffab91',\n  '300': '#ff8a65',\n  '400': '#ff7043',\n  '500': '#ff5722',\n  '600': '#f4511e',\n  '700': '#e64a19',\n  '800': '#d84315',\n  '900': '#bf360c',\n  a100: '#ff9e80',\n  a200: '#ff6e40',\n  a400: '#ff3d00',\n  a700: '#dd2c00',\n}\n\nexport const brown = {\n  '50': '#efebe9',\n  '100': '#d7ccc8',\n  '200': '#bcaaa4',\n  '300': '#a1887f',\n  '400': '#8d6e63',\n  '500': '#795548',\n  '600': '#6d4c41',\n  '700': '#5d4037',\n  '800': '#4e342e',\n  '900': '#3e2723',\n}\n\nexport const gray = {\n  '50': '#fafafa',\n  '100': '#f5f5f5',\n  '200': '#eeeeee',\n  '300': '#e0e0e0',\n  '400': '#bdbdbd',\n  '500': '#9e9e9e',\n  '600': '#757575',\n  '700': '#616161',\n  '800': '#424242',\n  '900': '#212121',\n}\n\nexport const blueGray = {\n  '50': '#eceff1',\n  '100': '#cfd8dc',\n  '200': '#b0bec5',\n  '300': '#90a4ae',\n  '400': '#78909c',\n  '500': '#607d8b',\n  '600': '#546e7a',\n  '700': '#455a64',\n  '800': '#37474f',\n  '900': '#263238',\n}\n\nexport const black = '#000000';\nexport const white = '#ffffff';\nexport const transparent = 'transparent';\n\n// import https://github.com/egoist/md-colors failed with vite\n\nexport type SwatchBase = {\n    '50': string;\n    '100': string;\n    '200': string;\n    '300': string;\n    '400': string;\n    '500': string;\n    '600': string;\n    '700': string;\n    '800': string;\n    '900': string;\n};\n\nexport type Swatch = SwatchBase & {\n    a100: string;\n    a200: string;\n    a400: string;\n    a700: string;\n};\n\nexport type Incomplete = {\n    [key: string]: SwatchBase;\n};\n\nexport type Complete = {\n    [key: string]: Swatch;\n};\n\n// export type Swatch = {\n//     '50': string;\n//     '100': string;\n//     '200': string;\n//     '300': string;\n//     '400': string;\n//     '500': string;\n//     '600': string;\n//     '700': string;\n//     '800': string;\n//     '900': string;\n//     a100: string;\n//     a200: string;\n//     a400: string;\n//     a700: string;\n// };\n\n// OK but not what we need:\n\n// export type Incomplete = {\n//     [key in keyof SwatchBase]: Swatch;\n// };\n\n// export type Complete = {\n//     [key in keyof Swatch]: Swatch;\n// };\n\nexport const complete: Complete = {\n    red,\n    pink,\n    purple,\n    deepPurple,\n    indigo,\n    blue,\n    lightBlue,\n    cyan,\n    teal,\n    green,\n    lightGreen,\n    lime,\n    yellow,\n    amber,\n    orange,\n    deepOrange,\n}\n\nexport const incomplete: Incomplete = {\n    brown,\n    gray,\n    blueGray,\n}\n","import { reactive, Ref, ref, watch } from \"vue\";\r\nimport { complete as colors } from './materialui-swatches';\r\n\r\nfunction rndInt(min: number, max: number, includeMax: 0 | 1 = 1): number {\r\n    return Math.floor(Math.random() * (max - min + includeMax)) + min;\r\n}\r\n\r\nfunction rnd(min: number, max: number, includeMax: 0 | 1 = 1): number {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + includeMax) + min);\r\n}\r\n\r\nexport const enum CONST {\r\n    SCENE_W = 100,\r\n    SCENE_H = 100,\r\n}\r\n\r\nexport const N_SWATCHES = Object.keys(colors).length;\r\n\r\nfunction getRandomPalleteColor() {\r\n    // 1. select pallete\r\n    let keysColors = Object.keys(colors);\r\n    let whichPallete = rndInt(0, keysColors.length, 0);\r\n    let pallete = colors[keysColors[whichPallete]];\r\n\r\n    // 2. select color from pallete\r\n    let keys = Object.keys(pallete);\r\n    let nColors = keys.length;\r\n    let colorName = keys[rndInt(0, nColors, 0)];\r\n    let color = pallete[colorName];\r\n    return color;    \r\n}\r\n\r\nexport type Box = {\r\n    id: string;\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n    h: number;\r\n    angle: number; // angle in degrees\r\n    fill: number; // color hue\r\n};\r\n\r\nfunction initBox(): Box {\r\n    return {\r\n        id: Date.now().toString(36),\r\n        x: 50, // TODO: get half of schene width\r\n        y: 50,\r\n        w: 40,\r\n        h: 10,\r\n        angle: 0,\r\n        fill: 0,\r\n    };\r\n}\r\n\r\nexport function generateRandomBox(): Box {\r\n    let box = initBox();\r\n    box.w = rnd(40, CONST.SCENE_W);\r\n    box.h = rnd(1, 3);\r\n    box.x = rnd(0, CONST.SCENE_W - box.w);\r\n    box.y = rnd(0, CONST.SCENE_H - box.h);\r\n    box.fill = getRandomPalleteColor();\r\n    return box;\r\n}\r\n\r\nexport function generateRandomBoxes(total: number): Box[] {\r\n    return Array.from(Array(total), (v, i) => generateRandomBox());\r\n}\r\n\r\nexport function useTimeout(timeoutFunc: () => void) {\r\n    let timeoutID = 0;\r\n\r\n    const onRotate = (e: MouseEvent) => {\r\n        let checked = (e.target as HTMLInputElement).checked;\r\n        if (checked) {\r\n            if (timeoutID) {\r\n                clearInterval(timeoutID);\r\n                timeoutID = 0;\r\n            }\r\n            timeoutID = window.setInterval(timeoutFunc, 1000);\r\n        } else {\r\n            if (timeoutID) {\r\n                clearInterval(timeoutID);\r\n                timeoutID = 0;\r\n            }\r\n        }\r\n    };\r\n    return {\r\n        onRotate\r\n    }\r\n}\r\n\r\nexport function useGlobalRotationAngle(boxes: Ref<Box[]>) {\r\n\r\n    const state = reactive({\r\n        globalAngle: 0,\r\n        globalAngleOn: false,\r\n    });\r\n    const globalAngleOn = ref(false);\r\n\r\n    function onGlobalAngleOn(event: MouseEvent) {\r\n        state.globalAngleOn = (event.target as HTMLInputElement).checked;\r\n\r\n        console.log('onGlobalAngleOn', state.globalAngleOn, boxes.value);\r\n\r\n        if (state.globalAngleOn) {\r\n            boxes.value.forEach((box) => box.angle = state.globalAngle);\r\n            console.log('a', state.globalAngle, boxes.value);\r\n        }\r\n    }\r\n\r\n    watch(() => state.globalAngle, () => {\r\n        if (state.globalAngleOn) {\r\n            boxes.value.forEach((box) => box.angle = state.globalAngle);\r\n            console.log('update');\r\n        }\r\n    });\r\n\r\n    return {\r\n        state,\r\n        onGlobalAngleOn\r\n    }\r\n}    \r\n","<template>\n    <div class=\"container\">\n        <div class=\"controls\">\n            <button class=\"inp-btn\" @click=\"clearBoxes\">Clear boxes</button>\n            <button class=\"inp-btn\" @click=\"addBoxes\">Add 10 boxes</button>\n            <button class=\"inp-btn\" @click=\"addBox\">Add box</button>\n        </div>\n    \n        <div class=\"svg-wrap\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n                <defs>\n                    <linearGradient id=\"bkg-frame\">\n                        <stop offset=\"0%\"   stop-color=\"olive\" />\n                        <stop offset=\"100%\" stop-color=\"red\" />\n                    </linearGradient>\n                </defs>\n\n                <rect width=\"100%\" height=\"100%\" stroke=\"url(#bkg-frame)\" stroke-width=\".5\" fill=\"aliceblue\" />\n                <circle cx=\"50%\" cy=\"50%\" r=\".5\" stroke=\"red\" stroke-width=\".2\" fill=\"none\" />\n\n                <!-- <rect x=\"0\" y=\"0\" width=\"100%\" height=\"4px\" stroke=\"none\" fill=\"green\" transform=\"rotate(45, 50, 2) translate(50, 50)\" />\n                <circle :cx=\"`${0 + 100 / 2}`\" :cy=\"`${0 + 4 / 2}`\" r=\"1\" fill=\"blue\" /> -->\n\n                <g transform=\"rotate(45 50 2)\">\n                    <rect width=\"100%\" height=\"4px\" stroke=\"none\" fill=\"green\" />\n                    <circle cx=\"50\" cy=\"2\" r=\"1\" fill=\"blue\" />\n                </g>\n\n                <rect\n                    v-for=\"box in boxes\"\n                    :key=\"box.id\"\n                    x=\"0\"\n                    y=\"0\"\n                    :width=\"box.w\"\n                    :height=\"box.h\"\n                    :fill=\"box.fill\"\n                    :transform =\"`rotate(${getBoxAngle(box)}, ${box.x + box.w / 2}, ${box.y + box.h / 2}) translate(${box.x}, ${box.y})`\"\n                />\n            </svg>\n        </div>\n\n        <div class=\"stats\">Total boxes: {{boxes.length}}</div>\n        <div class=\"options\">\n            <div class=\"inp-group\">\n                <label>\n                    <input type=\"checkbox\" @click=\"onRotate\"> Rotate\n                </label>\n                <label>\n                    Step\n                    <input class=\"inp-text input-number\" type=\"range\" min=\"0\" max=\"359\" step=\"1\" v-model=\"globalAngle\">\n                </label>\n            </div>\n\n            <div class=\"inp-group\">\n                <label>\n                    <input type=\"checkbox\" @click=\"onGlobalAngleOn\"> Use global angle\n                </label>\n                <input class=\"inp-text input-number\" type=\"number\" v-model=\"globalAngle\">\n            </div>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\n    import { defineComponent, onMounted, reactive, Ref, ref, toRef, toRefs, watch } from \"vue\";\n    import { Box, generateRandomBox, generateRandomBoxes, useTimeout, useGlobalRotationAngle } from '../core/stripes';\n\n    //TODO: Limit number of overlapping bars\n\n    export default defineComponent({\n        setup() {\n            let state = reactive<{\n                    boxes: Box[];\n                }>({\n                boxes: [],\n            });\n\n            onMounted(() => state.boxes.push(...generateRandomBoxes(1)));\n\n            const clearBoxes = () => state.boxes = [];\n            const addBox = () => state.boxes.push(generateRandomBox());\n            const addBoxes = () => state.boxes.push(...generateRandomBoxes(10));\n\n            const gAngle = useGlobalRotationAngle(toRef(state, 'boxes'));\n\n            const getBoxAngle = (box: Box) => gAngle.state.globalAngleOn ? gAngle.state.globalAngle : box.angle;\n\n            const { onRotate } = useTimeout(() => {\n                if (gAngle.state.globalAngleOn) {\n                    gAngle.state.globalAngle = (gAngle.state.globalAngle + 30)  % 360;\n                }\n\n                state.boxes.forEach((box) => {\n                    if (gAngle.state.globalAngleOn) {\n                       box.angle = gAngle.state.globalAngle;\n                    } else {\n                        box.angle = (box.angle + 30) % 360;\n                    }\n                });\n            });\n\n            return {\n                ...toRefs(state),\n                clearBoxes,\n                addBox,\n                addBoxes,\n                getBoxAngle,\n                onRotate,\n                ...toRefs(gAngle.state),\n                onGlobalAngleOn: gAngle.onGlobalAngleOn,\n            };\n        },\n    });\n</script>\n\n<style lang=\"scss\">\n    .container {\n        width: 100%;\n        height: 100%;\n        position: relative;\n\n        background-color: tomato;\n        // background: tomato url(https://i.stack.imgur.com/PEnJm.png);\n        // background: #263039 url(https://i.stack.imgur.com/PEnJm.png);\n        // background-blend-mode: multiply;\n    \n        .controls {\n            padding: 1em 0;\n        }\n\n        .svg-wrap {\n            svg {\n                width: 80vw;\n                border: 4px solid white;\n                //height: 400px;\n            }\n        }\n\n        .options {\n            padding: 1em 0;\n            margin: 0 1rem;\n            background-color: rgb(230, 90, 66);\n\n            display: grid;\n        }\n    }\n\n    // Common controls\n\n    .inp-group {\n        display: grid;\n        grid-auto-flow: column;\n        align-items: center;\n    }\n\n    label {\n        user-select: none;\n        display: flex;\n    }\n\n    .inp-btn {\n        padding: .4em;\n        margin-left: .2em;\n        user-select: none;\n    }\n\n    .inp-text {\n        padding: .3em;\n        border-radius: 3px;\n        border: 1px solid #bbb;\n        font: inherit;\n        font-size: 1rem;\n    }\n\n    .input-number {\n        max-width: 4em;\n    }\n</style>\n","<template>\n    <HomeView />\n</template>\n\n<script>\nimport HomeView from \"./components/HomeView.vue\";\n\nexport default {\n    name: \"App\",\n    components: {\n        HomeView,\n    },\n};\n</script>\n","import { createApp } from \"vue\";\nimport App from \"./App.vue\";\nimport \"./index.css\";\n\ncreateApp(App).mount(\"#app\");\n"],"names":["str","Object","create","split","i","list","length","expectsLowerCase","map","val","toLowerCase","isArray","value","normalizeStyle","isString","item","parseStringStyle","normalized","key","res","isObject","listDelimiterRE","forEach","propertyDelimiterRE","tmp","trim","ret","normalizeClass","name","isMap","size","entries","reduce","val2","isSet","values","isPlainObject","String","onRE","test","startsWith","assign","arr","indexOf","el","splice","prototype","hasOwnProperty","call","Array","toTypeString","isFunction","then","catch","toString","objectToString","parseInt","cache","fn","cacheStringFunction","replace","camelizeRE","c","toUpperCase","hyphenateRE","charAt","slice","capitalize","oldValue","fns","arg","defineProperty","obj","configurable","enumerable","parseFloat","isNaN","n","WeakMap","Symbol","EMPTY_OBJ","_isEffect","isEffect","raw","effect2","active","options","scheduler","effectStack","includes","push","shouldTrack","pop","id","uid","allowRecurse","deps","createReactiveEffect","lazy","onStop","delete","trackStack","last","activeEffect","targetMap","get","target","depsMap","set","Map","dep","Set","has","add","effectsToAdd","type","add2","key2","newValue","isIntegerKey","ITERATE_KEY","MAP_KEY_ITERATE_KEY","getOwnPropertyNames","filter","isSymbol","isReadonly2","receiver","readonlyMap","reactiveMap","targetIsArray","hasOwn","arrayInstrumentations","Reflect","builtInSymbols","shallow","isRef","readonly","reactive","toRaw","this","l","method","apply","args","Number","hadKey","hasChanged","result","deleteProperty","ownKeys","readonlyGet","extend","mutableHandlers","shallowGet","readonlyHandlers","shallowReadonlyGet","getPrototypeOf","v","rawKey","track","rawTarget","getProto","toReadonly","isShallow","toShallow","toReactive","has2","wrap","get2","clear","hadItems","observed","callback","thisArg","iterator","targetIsMap","isKeyOnly","[object Object]","done","innerIterator","next","isPair","get$1","has$1","set$1","deleteEntry","createForEach","createReadonlyMethod","shallowInstrumentations","readonlyInstrumentations","mutableInstrumentations","instrumentations","createIterableMethod","createInstrumentationGetter","isExtensible","rawType","targetTypeMap","toRawType","createReactiveObject","mutableCollectionHandlers","readonlyCollectionHandlers","proxyMap","existingProxy","getTargetType","targetType","Proxy","collectionHandlers","baseHandlers","proxy","isReadonly","isReactive","Boolean","r","__v_isRef","rawValue","RefImpl","createRef","_rawValue","_shallow","_value","convert","newVal","unref","ref2","object","toRef","_object","_key","ObjectRefImpl","_setter","_dirty","effect","getter","err","instance","callWithErrorHandling","isPromise","callWithAsyncErrorHandling","vnode","parent","cur","ec","errorCapturedHooks","exposedInstance","errorInfo","appContext","config","errorHandler","appErrorHandler","error","contextVNode","throwInDev","Promise","resolve","currentFlushPromise","resolvedPromise","p2","bind","queue","job","isFlushing","flushIndex","currentPreFlushParentJob","isFlushPending","flushJobs","cb","activeQueue","index","pendingPreFlushCbs","parentJob","preFlushIndex","activePreFlushCbs","seen","pendingPostFlushCbs","activePostFlushCbs","deduped","sort","getId","a","b","postFlushIndex","Infinity","props","rawArgs","event","isModelListener2","modelArg","number","modifiersKey","toNumber","toHandlerKey","camelize","handlerName","handler","hyphenate","onceHandler","emitted","deopt","comp","__emits","emits","normalizeEmitsOptions","raw2","asMixin","mixins","extendEmits","extends","hasExtends","isOn","withProxy","propsOptions","slots","attrs","emit","render","renderCache","data","setupState","ctx","shapeFlag","normalizeVNode","render2","proxyToUse","Component","render3","getFunctionalFallthrough","inheritAttrs","fallthroughAttrs","keys","root","some","isModelListener","filterModelListeners","cloneVNode","dirs","concat","transition","createVNode","Comment","children","child","filtered","isVNode","nextProps","nextKeys","prevProps","isEmitListener","emitsOptions","s","filterSingleRoot","isRenderingCompiledSlot","InternalObjectKey","rawProps","isStateful","isSSR","shallowReactiveHandlers","shallowCollectionHandlers","isReservedProp","camelKey","needCastKeys","resolvePropValue","rawCurrentProps","opt","hasDefault","default","Function","defaultValue","__props","normalizePropsOptions","extendProps","EMPTY_ARR","validatePropName","normalizedKey","prop","getTypeIndex","booleanIndex","stringIndex","ctor","match","getType","expectedTypes","len","isSameType","currentInstance","hook","__weh","isUnmounted","prepend","unshift","wrappedHook","isInSSRComponentSetup","injectHook","lifecycle","createHook","doWatch","source","immediate","deep","flush","onTrack","onTrigger","traverse","cleanup2","onInvalidate","NOOP","baseGetter","runner","INITIAL_WATCHER_VALUE","forceTrigger","queuePostRenderEffect","suspense","isMounted","effects","publicThis","__isKeepAlive","__wdc","current","isDeactivated","isKeepAlive","keepAliveRoot","injected","currentRenderingInstance","owner","_c","renderFnWithContext","withCtx","normalizeSlotValue","rawSlot","rawSlots","_ctx","isInternalKey","normalizeSlot","directives","dir","mounted","updated","modifiers","prevVNode","bindings","oldBindings","binding","app","isNativeTag","NO","performance","globalProperties","optionMergeStrategies","isCustomElement","warnHandler","components","provides","rootProps","createAppContext","context","_uid","_component","rootComponent","_props","_container","_context","version","use","installedPlugins","plugin","install","mixin","component","directive","isHydrate","hydrate","rootContainer","__vue_app__","provide","queueJob","pendingBranch","rawRef","setRef","oldRawRef","parentComponent","parentSuspense","refs","oldRef","doSet","insert","remove","patchProp","forcePatchProp","createElement","createText","createComment","setText","setElementText","parentNode","nextSibling","setScopeId","cloneNode","insertStaticContent","n1","isSameVNodeType","n2","getNextHostNode","patchFlag","dynamicChildren","ref","Text","container","anchor","Static","isSVG","Fragment","optimized","process","internals","hostCreateText","hostCreateComment","hostInsertStaticContent","scopeId","hostCloneNode","hostCreateElement","is","unmountChildren","vnodeHook","onVnodeBeforeMount","persisted","needCallTransitionHooks","beforeEnter","onVnodeMounted","invokeVNodeHook","enter","invokeDirectiveHook","__scopeId","treeOwnerId","subTree","start","cloneIfMounted","newProps","onVnodeBeforeUpdate","oldProps","class","style","dynamicProps","propsToUpdate","prev","hostForcePatchProp","areChildrenSVG","onVnodeUpdated","newChildren","oldChildren","oldVNode","newVNode","hostParentNode","fallbackContainer","fragmentStartAnchor","fragmentEndAnchor","activate","initialVNode","emptyAppContext","uid$1","update","accessCache","setupContext","suspenseId","pendingId","asyncDep","asyncResolved","bc","bm","m","bu","u","um","bum","da","rtg","rtc","_","createComponentInstance","renderer","PublicInstanceProxyHandlers","setup","createSetupContext","setupResult","resolvedResult","setupStatefulComponent","registerDep","setupRenderEffect","placeholder","nextVNode","prevChildren","nextChildren","$stable","hasPropsChanged","shouldUpdateComponent","renderComponentRoot","nextTree","prevTree","originNext","hydrateNode","prodEffectOptions","kebabKey","rawPrevProps","camelizedKey","needDeletionCheck","deletionComparisonTarget","c1","c2","prevShapeFlag","Math","min","oldLength","newLength","commonLength","nextChild","l2","e1","e2","nextPos","parentAnchor","s2","toBePatched","s1","patched","prevChild","keyToNewIndexMap","j","newIndexToOldIndexMap","newIndex","maxNewIndexSoFar","moved","arrI","getSequence","increasingNewIndexSequence","nextIndex","moveType","move","leave","delayLeave","afterLeave","hostInsert","remove3","performLeave","deactivate","onVnodeBeforeUnmount","doRemove","unmount","shouldInvokeDirs","isTeleportDisabled","onVnodeUnmounted","performRemove","end","hostNextSibling","_vnode","p","patch","remove2","mt","mountComponent","mc","mountChildren","pc","patchChildren","pbc","patchBlockChildren","o","createHydrationFns","createApp","createAppAPI","baseCreateRenderer","ch1","ch2","disabled","displayName","selfName","resolveAsset","registry","currentBlock","disableTracking","blockStack","__v_isVNode","NULL_DYNAMIC_COMPONENT","cloned","__vccOpts","isProxy","klass","__isSuspense","isSuspense","__isTeleport","isTeleport","normalizeKey","normalizeRef","ssContent","ssFallback","targetAnchor","staticCount","content","fallback","normalizeSuspenseSlot","normalizeSuspenseChildren","isBlockNode","extraProps","toMerge","existing","incoming","mergeProps","mergedProps","mergeRef","text","flag","slot","setCompiledSlotRendering","slotFlag","createTextVNode","parentProvides","arguments","treatDefaultAsFactory","computed","methods","watch","inject","beforeMount","beforeUpdate","activated","deactivated","beforeDestroy","beforeUnmount","destroyed","unmounted","renderTracked","renderTriggered","errorCaptured","globalMixins","deferredData","deferredWatch","deferredProvide","extendsOptions","injectOptions","from","methodHandler","dataOptions","resolveData","dataFn","computedOptions","watchOptions","watchOptions2","provideOptions","provideOptions2","base","selfHook","baseHook","chainedMixins","path","segments","createPathGetter","createWatcher","mergeOptions","to","strats","$","$el","$data","$props","$attrs","$slots","$refs","$parent","$root","$emit","$options","__merged","resolveMergedOptions","$forceUpdate","$nextTick","nextTick","$watch","instanceWatch","normalizedProps","isInBeforeCreate","publicPropertiesMap","publicGetter","__cssModules","cssModule","unscopables","isGloballyWhitelisted","objectWithRefs","shallowUnwrapHandlers","_rc","RuntimeCompiledPublicInstanceProxyHandlers","getterOrOptions","ComputedRefImpl","setter","computed$1","renderItem","document","insertBefore","removeChild","doc","createElementNS","svgNS","tag","createTextNode","nodeValue","textContent","node","querySelector","selector","setAttribute","tempSVGContainer","tempContainer","innerHTML","temp","firstChild","first","setStyle","setProperty","prefixCache","rawName","cached","prefixes","prefixed","autoPrefix","importantRE","Date","now","_getNow","createEvent","timeStamp","addEventListener","_vei","invokers","nextValue","existingInvoker","optionsModifierRE","parseName","e","invoker","attached","stopImmediatePropagation","_stopped","patchStopImmediatePropagation","initialValue","cachedNow","reset","getNow","createInvoker","removeEventListener","invokeArrayFns","composing","initEvent","dispatchEvent","_assign","getModelAssigner","domValue","castToNumber","onCompositionStart","onCompositionEnd","activeElement","_vtc","transitionClasses","join","className","cssText","removeAttribute","prevValue","nativeOnRE","tagName","shouldSetAsProp","_trueValue","_falseValue","removeAttributeNS","xlinkNS","setAttributeNS","isSpecialBooleanAttr","isBoolean","nodeOps","red","50","100","200","300","400","500","600","700","800","900","a100","a200","a400","a700","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","green","lightGreen","lime","yellow","amber","orange","deepOrange","floor","random","includeMax","ceil","max","CONST","colors","x","y","w","h","angle","fill","rnd","box","rndInt","keysColors","whichPallete","pallete","getRandomPalleteColor","total","generateRandomBox","boxes","state","generateRandomBoxes","globalAngle","globalAngleOn","log","onGlobalAngleOn","checked","useGlobalRotationAngle","onRotate","timeoutID","window","setInterval","timeoutFunc","useTimeout","gAngle","toRefs","clearBoxes","addBox","addBoxes","getBoxAngle","xmlns","viewBox","offset","stop-color","width","height","stroke","stroke-width","cx","cy","transform","_createBlock","_hoisted_1","_createVNode","_hoisted_2","onClick","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","JSON","stringify","replacer","_hoisted_10","_hoisted_11","step","_hoisted_14","HomeView","createRenderer","rendererOptions","mount","normalizeContainer","containerOrSelector","template","App"],"mappings":"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"}